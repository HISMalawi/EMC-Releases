{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/apps/ART/views/encounters/Dispensing.vue","webpack:///./src/utils/GuidelineEngine.ts"],"names":["StockService","Service","constructor","drugId","stock","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","super","this","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","drugs","map","async","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","orders","order","getSessionDate","pageSize","drugID","params","patientId","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","cur","Array","isArray","concat","inArray","arr","expression","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","mixins","EncounterMixinVue","dispensation","getFields","item","dispenses","forEach","packs","order_id","loadDrugHistory","dateA","Date","start_date","dateB","medication","amount","buildOrderOptions","available_stock","calculateCompletePack","getPackSizesRows","availableStock","packSize","Math","floor","parseFloat","amount_needed","isDoneDispensing","o","every","isOk","totalTabs","amountNeeded","percentageGiven","alertConfirmation","id","helpText","FieldType","TT_DISPENSATION_INPUT","init","loadCurrentDrugOrder","onValueUpdate","l","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","isDrugManagementEnabled","medicationHistory","buildMedicationHistory","toolbarInfo","getFullName","getGender","hiddenFooterBtns","isCondition","ignored","undefined","prop","includes","sortByRelevance","guidelines","target","targetEvent","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-bc09139e.783a7314.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 30, 60, 90 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/ART/services/dispensation_service\"\nimport {isEmpty } from 'lodash'\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        dispensation: {} as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any){\n                if (ready) {\n                    this.dispensation = new DispensationService(this.patientID, this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        saveDispensations(item: Option) {\n            return this.dispensation.saveDispensations(this.buildDispensations(item))    \n        },\n        buildDispensations(item: Option) {\n            if (!isEmpty(item.other?.dispenses)) {\n                let dispenses: any = []\n                item.other.dispenses.forEach(([tabs, packs]: Array<number>) => {\n                    dispenses = [...dispenses, \n                    ...this.dispensation.buildDispensations(\n                        item.other.order_id, tabs, packs\n                    )]\n                })\n                return dispenses\n            }\n            return this.dispensation.buildDispensations(\n                item.other.order_id, parseInt(item.value.toString()), 1\n            )\n        },\n        async buildMedicationHistory() {\n            await this.dispensation.loadDrugHistory()\n            return this.dispensation.getDrugHistory()\n                .sort((a: any, b: any) => {\n                    const dateA: any = new Date(a.order.start_date)\n                    const dateB: any = new Date(b.order.start_date)\n                    return dateB - dateA\n                })\n                .map((d: any) => ({\n                    medication: d.drug.name,\n                    date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n                    amount: d.quantity\n                }))\n        },\n        buildOrderOptions() {\n            return this.dispensation.getCurrentOrder().map((d: any) => ({\n                label: d.drug.name,\n                value: d.quantity || 0,\n                other: {\n                    'order': d,\n                    'drug_id': d.drug.drug_id,\n                    'order_id': d.order.order_id,\n                    'available_stock': d.available_stock || '-',\n                    'amount_needed': this.calculateCompletePack(d),\n                    'pack_sizes': this.getPackSizesRows(d.drug.drug_id, d.available_stock || 0),\n                }\n            }))\n        },\n        getPackSizesRows(drugId: number, availableStock: number) {\n            const packs = this.dispensation.getDrugPackSizes(drugId)\n            return packs.map((packSize: number) => {\n                const packs = availableStock > 0 ? (Math.floor(availableStock / packSize)) : '-'\n                return [packSize, packs, 0, 0]\n            })\n        },\n        calculateCompletePack(order: any) {\n            const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n            if(units <= 0) return 0\n            return this.dispensation.calcCompletePack(order, units)\n        },\n        isDoneDispensing(orders: Array<Option>) {\n            return orders.map(o => o.value != 0).every(Boolean)\n        },\n        async isValidDispensation(option: Option) {\n            let isOk = true\n            const totalTabs = parseInt(option.value.toString())\n            const amountNeeded = option.other['amount_needed']\n            const percentageGiven = (totalTabs / amountNeeded) * 100\n\n            if (percentageGiven > 110) {\n                isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n            }\n\n            if (percentageGiven < 100) {\n                isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n            }\n            return isOk\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: 'dispenses',\n                    helpText: 'Dispensation',\n                    type: FieldType.TT_DISPENSATION_INPUT,\n                    init: async () => {\n                        this.dispensation.setIsDrugManagementEnabled((await Store.get('IS_ART_DRUG_MANAGEMENT_ENABLED')))\n                        await this.dispensation.loadCurrentDrugOrder()\n                        return true\n                    },\n                    onValueUpdate: async(i: Option, l: Array<Option>) => {\n                        if (i.value != -1 && this.isDoneDispensing(l)) {\n                            return this.$router.push({name: 'appointment'})\n                        }\n                        i.other['amount_needed'] = i.other['amount_needed'] - (parseInt(i.value.toString()) || 0)\n                        if(i.other['amount_needed'] < 0 ) i.other['amount_needed'] = 0\n                        \n                        await this.dispensation.loadCurrentDrugOrder()\n\n                        return this.buildOrderOptions()\n                    },\n                    onValue: async (i: Option, isBarcodeScanned: boolean) => {\n                        if (i.value  === -1) {\n                            const voided = await this.dispensation.voidOrder(i.other.order_id)\n                            return !voided\n                        }\n\n                        if (!isBarcodeScanned) {\n                            const isValidDispensation = await this.isValidDispensation(i)\n\n                            if (!isValidDispensation) return false\n                        }\n\n                        const dispensed = await this.saveDispensations(i)\n\n                        if (dispensed) return true\n\n                        toastWarning('Unable to save dispensation')\n\n                        return false\n                    },\n                    config: {\n                        isDrugManagementEnabled: () => this.dispensation.useDrugManagement,\n                        medicationHistory: () => this.buildMedicationHistory(),\n                        toolbarInfo: [\n                            { label: 'Name', value: this.patient.getFullName() },\n                            { label: 'Gender', value: this.patient.getGender() },\n                            { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                                this.patient.getBirthdate()\n                            )}\n                        ],\n                        hiddenFooterBtns: [ \n                            'Clear',\n                            'Finish'\n                        ]\n                    },\n                    options: () => this.buildOrderOptions()\n                }\n            ]\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"cancelDestinationPath\"]))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Dispensing.vue?vue&type=template&id=0051ed47&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    priority: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByRelevance(findings: Array<GuideLineInterface>) {\n    return findings.sort((a, b) => a.priority < b.priority ? -1 : 1)\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent=''): Array<GuideLineInterface> {\n\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n \n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortByRelevance(matches)\n}\n"],"sourceRoot":""}