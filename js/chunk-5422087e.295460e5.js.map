{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?c005","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?ba10","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","EstimationFieldType","getYearField","id","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","validateMinMax","minDate","min","Date","maxDate","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","isEstimate","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","AGE_ESTIMATE_FIELD","dayjs","Service","subtract","MONTH_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","_component_his_standard_form","_resolveComponent","AssessmentService","hivStatus","artStatus","arvNumber","arvStartDate","AppEncounterService","getJson","res","mixins","EncounterMixinVue","assessment","showHIVQuestions","offerCxCa","loadArtStatus","getHivStatus","setOfferCxCa","getFields","createEncounter","encounter","toastWarning","vals","keys","forEach","element","saveObservationList","toastSuccess","getFirstValueCoded","buildValueCoded","hasHIVStatus","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","resultsAvailable","results_available","getFacilities","getReasonsForNoCxcaOptions","ConceptService","getConceptsByCategory","Validation","hiv_status","getDate","buildValueDate","reason_for_visit","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","LocationService","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-5422087e.295460e5.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = (v: Option) => {\n        const isEstimate = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = isEstimate ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return field.computeValue(fullDate, isEstimate)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = (val: Option) => {\n        const year = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return field.computeValue(fullDate, true)\n    }\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    ) \n\n    durationEstimate.computedValue = (val: Option) => {\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return field.computeValue(fullDate, true)\n    }\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    \n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async loadArtStatus() {\n        const res = await AppEncounterService.getJson(`programs/12/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { ConceptService } from \"@/services/concept_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        await this.assessment.loadArtStatus();\n        if (this.assessment.getHivStatus() !== '') {\n          this.showHIVQuestions = false;\n        }\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    hasHIVStatus() {\n      return this.assessment.getHivStatus !== \"\"\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => this.getReasonsForNoCxcaOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=52f44ce7&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}