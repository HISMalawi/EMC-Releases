{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./node_modules/eslint-loader/index.js"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","ConsultationService","patientID","providerID","AppEncounterService","getJson","this","DrugOrderService","getAllDrugOrders","orders","reduce","quantities","order","name","drug","match","quantity","rifapentine","isoniazid","console","error","ObservationService","getFirstObs","obs","value_text","obsInValidPeriod","getProgramID","date","getFirstValueCoded","id","req","isEmpty","lastScreened","duration","dayjs","diff","getFirstValueText","secondCheck","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug_inventory_id","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","postJson","dispensations","getSessionDate","pageSize","Service","drugID","params","patientId","EstimationFieldType","getYearField","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","defaultValue","split","year","month","day","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","toString","validation","c","required","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-5fe92ce6.f88f0fcd.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async hasCompleteTptDispensations() {\n    try {\n      const orders = await DrugOrderService.getAllDrugOrders(this.patientID)\n      const { rifapentine, isoniazid } = orders.reduce((quantities: any, order: any) => {\n      const name = order.drug.name\n      if (name.match(/Isoniazid/i))\n        quantities['isoniazid'] += order.quantity\n      if (name.match(/Rifapentine/i))\n        quantities['rifapentine'] += order.quantity\n      return quantities\n      }, {'rifapentine': 0, 'isoniazid': 0})\n      return isoniazid >= 168 || isoniazid >= 36 && rifapentine >= 72\n    } catch (e) {\n      console.error(e)\n      return false\n    }\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  async patientCompleted3HP() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && typeof obs.value_text === 'string' \n      && AppEncounterService.obsInValidPeriod(obs)\n      && obs.value_text.match(/complete/i) ? true : false\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}