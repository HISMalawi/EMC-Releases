{"version":3,"sources":["webpack:///./src/apps/EMC/views/tools/PatientMerging.vue?cb81","webpack:///./src/apps/EMC/views/tools/PatientMerging.vue?0655","webpack:///./src/apps/EMC/views/tools/PatientMerging.vue","webpack:///./src/apps/EMC/views/tools/PatientMerging.vue?84ec"],"names":["_hoisted_1","class","_hoisted_2","_createTextVNode","_hoisted_3","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_button","_resolveComponent","_component_ion_col","_component_ion_card_title","_component_ion_searchbar","_component_ion_card_header","_component_patient_card","_component_ion_card_content","_component_ion_card","_component_ion_row","_component_ion_grid","_component_Layout","_openBlock","_createBlock","default","_withCtx","_createVNode","size","disabled","enableMergeBtn","onClick","merge","_","_Fragment","_renderList","patients","patient","key","category","color","_toDisplayString","style","placeholder","modelValue","query","$event","onKeyup","_withKeys","searchPatient","results","result","index","onPatient","isActive","isChecked","defineComponent","components","Layout","IonGrid","IonRow","IonCol","PatientCard","IonSearchbar","setup","router","useRouter","reactive","computed","every","length","some","parseSearchText","nameOrArvNumber","match","type","value","GLOBAL_PROP","sitePrefix","buildSearchByNameQuery","name","tempName","split","filter","entry","test","Patientservice","search","findByOtherID","map","p","i","id","getID","getFullName","docID","getDocID","birthdate","getBirthdate","arvNum","getArvNumber","npid","getNationalID","gender","getGender","homeDistrict","getHomeDistrict","homeVillage","getHomeVillage","currentDistrict","getCurrentDistrict","currentVillage","getCurrentVillage","console","log","forEach","alertConfirmation","primaryPatient","find","mergePatients","primary","secondary","mergedPatient","push","params","patientId","toastDanger","__exports__"],"mappings":"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","file":"js/chunk-106f1396.d66aa639.js","sourcesContent":["export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./PatientMerging.vue?vue&type=style&index=0&id=4c745dac&lang=css\"","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, withKeys as _withKeys } from \"vue\"\n\nconst _hoisted_1 = { class: \"ion-margin-start\" }\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" Patient Merging \")\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" Merge Selected Patients \")\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_button = _resolveComponent(\"ion-button\")\n  const _component_ion_col = _resolveComponent(\"ion-col\")\n  const _component_ion_card_title = _resolveComponent(\"ion-card-title\")\n  const _component_ion_searchbar = _resolveComponent(\"ion-searchbar\")\n  const _component_ion_card_header = _resolveComponent(\"ion-card-header\")\n  const _component_patient_card = _resolveComponent(\"patient-card\")\n  const _component_ion_card_content = _resolveComponent(\"ion-card-content\")\n  const _component_ion_card = _resolveComponent(\"ion-card\")\n  const _component_ion_row = _resolveComponent(\"ion-row\")\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")\n  const _component_Layout = _resolveComponent(\"Layout\")\n\n  return (_openBlock(), _createBlock(_component_Layout, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_grid, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_row, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_col, {\n                size: \"12\",\n                class: \"padding\"\n              }, {\n                default: _withCtx(() => [\n                  _createVNode(\"h2\", _hoisted_1, [\n                    _hoisted_2,\n                    _createVNode(_component_ion_button, {\n                      class: \"ion-float-end ion-margin-end\",\n                      disabled: !_ctx.enableMergeBtn,\n                      onClick: _ctx.merge\n                    }, {\n                      default: _withCtx(() => [\n                        _hoisted_3\n                      ]),\n                      _: 1\n                    }, 8, [\"disabled\", \"onClick\"])\n                  ])\n                ]),\n                _: 1\n              }),\n              (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.patients, (patient) => {\n                return (_openBlock(), _createBlock(_component_ion_col, {\n                  size: \"6\",\n                  key: patient.category\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_card, null, {\n                      default: _withCtx(() => [\n                        _createVNode(_component_ion_card_header, { color: \"light\" }, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_ion_card_title, { class: \"ion-margin-bottom\" }, {\n                              default: _withCtx(() => [\n                                _createTextVNode(_toDisplayString(patient.category) + \" patients \", 1 /* TEXT */)\n                              ]),\n                              _: 2\n                            }, 1024),\n                            _createVNode(_component_ion_searchbar, {\n                              style: {\"width\":\"100%\",\"height\":\"45px\"},\n                              class: \"box-input ion-no-padding ion-margin-end\",\n                              placeholder: \"Type Name or ARV Number and press enter\",\n                              modelValue: patient.query,\n                              \"onUpdate:modelValue\": $event => (patient.query = $event),\n                              onKeyup: _withKeys($event => (_ctx.searchPatient(patient)), [\"enter\"])\n                            }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"onKeyup\"])\n                          ]),\n                          _: 2\n                        }, 1024),\n                        _createVNode(_component_ion_card_content, {\n                          color: \"light\",\n                          style: {\"height\":\"70vh\",\"overflow-y\":\"auto\"}\n                        }, {\n                          default: _withCtx(() => [\n                            (_openBlock(true), _createBlock(_Fragment, null, _renderList(patient.results, (result, index) => {\n                              return (_openBlock(), _createBlock(_component_patient_card, {\n                                onClick: $event => (_ctx.onPatient(result, patient.category)),\n                                key: index,\n                                patient: result,\n                                isActive: result.isChecked\n                              }, null, 8, [\"onClick\", \"patient\", \"isActive\"]))\n                            }), 128 /* KEYED_FRAGMENT */))\n                          ]),\n                          _: 2\n                        }, 1024)\n                      ]),\n                      _: 2\n                    }, 1024)\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128 /* KEYED_FRAGMENT */))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","\nimport { computed, defineComponent, reactive } from \"vue\";\nimport Layout from \"@/apps/EMC/Components/Layout.vue\";\nimport { IonGrid, IonRow, IonCol, IonSearchbar } from \"@ionic/vue\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport { useRouter } from \"vue-router\";\nimport  PatientCard from \"@/components/DataViews/ArtPatientCard.vue\"\nimport { alertConfirmation, toastDanger } from \"@/utils/Alerts\";\n\ninterface MergePatient {\n  query: string;\n  results: any[];\n  category: \"primary\" | \"secondary\";\n}\n\nexport default defineComponent({\n  components: {\n    Layout,\n    IonGrid,\n    IonRow,\n    IonCol,\n    // IonButton,\n    PatientCard,\n    IonSearchbar,\n  },\n  setup() {\n    const router = useRouter()\n    const patients = reactive<MergePatient[]>([\n      {\n        category: \"primary\",\n        query: \"\",\n        results: [],\n      },\n      {\n        category: \"secondary\",\n        query: \"\",\n        results: [],\n      },\n    ]);\n\n    const enableMergeBtn = computed(() => {\n      return patients.every((patient) => patient.results.length > 0 && patient.results.some((result) => result.isChecked));\n    })\n\n    const parseSearchText = async (nameOrArvNumber: string) => {\n      if (nameOrArvNumber.match(/^(\\w+-ARV-\\w+)$/)) {\n        return { type: \"arv_number\", value: nameOrArvNumber };\n      }\n      if (nameOrArvNumber.match(/^(\\d+)$/)) {\n        const sitePrefix = await GLOBAL_PROP.sitePrefix();\n        return {\n          type: \"arv_number\",\n          value: `${sitePrefix}-ARV-${nameOrArvNumber}`,\n        };\n      }\n      return { type: \"name\", value: nameOrArvNumber };\n    };\n\n    const buildSearchByNameQuery = (name: string) => {\n      const query: Record<string, any> = {};\n      const tempName = name.split(\" \").filter(entry => /\\S/.test(entry));\n\n      if (tempName.length > 0) {\n        query['given_name'] = tempName[0];\n        tempName[1] ? (query['family_name'] = tempName[1]) : null;\n        if (tempName[2]) {\n          query['middle_name'] = tempName[1];\n          query['family_name'] = tempName[2];\n        }\n      }\n\n      return query;\n    }\n\n    const searchPatient = async (patient: MergePatient) => {\n      if (patient.query) {\n        try {\n          const { type, value } = await parseSearchText(patient.query);\n          const results: any[] = (type === \"name\")\n            ? await Patientservice.search(buildSearchByNameQuery(value))\n            : (type === 'arv_number')\n            ? await Patientservice.findByOtherID(4, value)\n            : []\n          patient.results = results.map((p: any, i: number) => {\n            const patient = new Patientservice(p)\n            return {\n              index: i,\n              id: patient.getID(),\n              name: patient.getFullName(),\n              docID: patient.getDocID(),\n              birthdate: patient.getBirthdate(),\n              arvNum: patient.getArvNumber(),\n              npid: patient.getNationalID(),\n              gender: patient.getGender(),\n              homeDistrict: patient.getHomeDistrict(),\n              homeVillage: patient.getHomeVillage(),\n              currentDistrict: patient.getCurrentDistrict(),\n              currentVillage: patient.getCurrentVillage(),\n              isChecked: false\n            }\n          })\n        } catch (error) {\n          console.log(`${error}`)\n        } \n      }\n    };\n\n    const onPatient = (result: any, category: \"primary\" | \"secondary\") => {\n      if(category === 'primary') {\n        patients[0].results.forEach(p => {\n          if(p.id === result.id) {\n            p.isChecked = !p.isChecked\n          } else {\n            p.isChecked = false\n          }\n        })\n        if(result.isChecked){\n          // uncheck the patient in the secondary list\n          patients[1].results.forEach(p => {\n            if(p.id === result.id) {\n              p.isChecked = false\n            }\n          })\n        }\n      } else {\n        if(result.isChecked) return result.isChecked = false\n        // check only if the patient is not already checked in the primary list\n        result.isChecked = !patients[0].results.some(p => p.isChecked && p.id === result.id)\n      }\n    }\n\n    const merge = async () => {\n      if(!(await alertConfirmation(\"Are you sure you want to merge these patients?\"))) return\n      try {\n        const primaryPatient = patients[0].results.find(p => p.isChecked)\n        const mergedPatient = await Patientservice.mergePatients({\n          primary: {\n            'patient_id': primaryPatient.id,\n            'doc_id': primaryPatient.docID,\n          },\n          secondary: patients[1].results.filter(p => p.isChecked).map(p => ({\n            'patient_id': p.id,\n            'doc_id': p.docID,\n          }))\n        })\n        router.push({ name: \"EMC Mastercard\", params: { patientId: mergedPatient['patient_id'] } })\n      } catch (e) {\n        toastDanger(`${e}`)\n      }\n    }\n\n    return {\n      patients,\n      enableMergeBtn,\n      searchPatient,\n      onPatient,\n      merge,\n    };\n  },\n});\n","import { render } from \"./PatientMerging.vue?vue&type=template&id=4c745dac&ts=true\"\nimport script from \"./PatientMerging.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientMerging.vue?vue&type=script&lang=ts\"\n\nimport \"./PatientMerging.vue?vue&type=style&index=0&id=4c745dac&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}