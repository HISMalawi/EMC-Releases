{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue?3f0e","webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue","webpack:///./src/apps/ART/views/reports/pepfar/ScCurrReport.vue?17e5","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/components/DataViews/DrillTableModal.vue?4406","webpack:///./src/components/DataViews/DrillTableModal.vue","webpack:///./src/components/DataViews/DrillTableModal.vue?1ade","webpack:///./src/apps/ART/services/reports/stock_report_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","subtitle","period","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","reportPrefix","_","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","ref","report","StockReportService","label","value","data","toNumString","units","tdClick","async","modalController","create","component","DrillTable","cssClass","componentProps","val","category","onRows","granular_spec","map","drug_name","present","startDate","endDate","toastWarning","getScCurrReport","index","e","toastDanger","DateSelection","onFinish","sDate","eDate","periodstr","onMounted","length","__exports__","SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","toDate","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","console","log","dismiss","_hoisted_1","key","_hoisted_2","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_his_basic_table","_component_text_skeloton","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createTextVNode","_toDisplayString","ready","rows","color","onClick","closeModal","slot","HisBasicTable","IonHeader","IonToolbar","IonContent","IonFooter","IonButton","TextSkeloton","props","String","Object","Function","watch","func","this","immediate","deep","methods","ArtReportService","constructor","super","stock","getReport","paginate","getStockReport","getJson","getStockCardReport","programID","loadTrail","getTrailDetails","drugId","transactionType","getDiscrepancyReport","groupStock","pharmacyData","pack_size","current_quantity","parseFloat","dispensed_quantity","values","drug","currentQuantity","Math","trunc","drugName","quantintyDispensed","quantityIsTabs","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","push","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-1f2c6e68.8857c800.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"Sc Curr\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 20,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate(),\n        reportPrefix: \"PEPFAR\"\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport { defineComponent, onMounted, ref } from 'vue'\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { StockReportService } from \"@/apps/ART/services/reports/stock_report_service\"\nimport { v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { DateSelection } from '@/utils/ReportDateSelectionPrompt';\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { toNumString } from \"@/utils/Strs\";\n\nexport default defineComponent({\n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable\n    },\n    setup() {\n        const reportData = ref([])\n        const period = ref('')\n        const isLoading = ref(false)\n        const report = new StockReportService()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\"\n                },\n                {\n                    label: \"ARV drug category\",\n                    ref: 'category'\n                },\n                {\n                    label: \"# of bottles (units) remaining\",\n                    ref: 'units',\n                    value: (data: any) => toNumString(data.units),\n                    tdClick: async (val: any) => {\n                        (await modalController.create({\n                            component: DrillTable,\n                            cssClass: 'custom-modal',\n                            componentProps: {\n                                title: val.data.category,\n                                columns: ['Drug', 'Quantity'],\n                                onRows: () => (val.data?.granular_spec||[]).map((data: any) => {\n                                    return [data.drug_name, toNumString(data.units)]\n                                })\n                            }\n                        })).present()\n                    }\n                }\n            ]\n        ]\n\n        /**\n         * Generates report by start date and end date\n         */\n         const generate = async () => {\n            if (!(report.startDate && report.endDate))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            try {\n                reportData.value = (await report.getScCurrReport()).map((\n                    data: any, index: number) => ({...data, index: index+1})\n                )\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n         const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                period.value = `Period (${periodstr})`\n                report.startDate = sDate\n                report.endDate = eDate\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n        */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            reportData,\n            isLoading,\n            configure,\n            generate,\n            columns,\n            period\n        }\n    }\n})\n","import { render } from \"./ScCurrReport.vue?vue&type=template&id=0a3261c4&ts=true\"\nimport script from \"./ScCurrReport.vue?vue&type=script&lang=ts\"\nexport * from \"./ScCurrReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\"\n\nconst _hoisted_1 = { key: 0 }\nconst _hoisted_2 = { key: 1 }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_his_basic_table = _resolveComponent(\"his-basic-table\")!\n  const _component_text_skeloton = _resolveComponent(\"text-skeloton\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(_toDisplayString(_ctx.title), 1)\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, null, {\n      default: _withCtx(() => [\n        (_ctx.ready)\n          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n              _createVNode(_component_his_basic_table, {\n                columns: _ctx.columns,\n                rows: _ctx.rows\n              }, null, 8, [\"columns\", \"rows\"])\n            ]))\n          : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n              _createVNode(_component_text_skeloton)\n            ]))\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              color: \"danger\",\n              onClick: _ctx.closeModal,\n              slot: \"end\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport { defineComponent, PropType } from \"vue\";\nimport HisBasicTable from \"./HisBasicTable.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport TextSkeloton from \"@/components/TextSkeleton.vue\"\nimport {\n  IonHeader, \n  IonToolbar, \n  IonContent, \n  IonFooter, \n  IonButton\n} from \"@ionic/vue\"\nexport default defineComponent({\n  components: { \n    HisBasicTable,\n    IonHeader, \n    IonToolbar, \n    IonContent, \n    IonFooter, \n    IonButton,\n    TextSkeloton\n  },\n  props: {\n    title: {\n      type: String,\n      required: true,\n    },\n    columns: {\n      type: Object as PropType<string[]>,\n      required: true,\n    },\n    onRows: {\n      type: Function,\n      required: true,\n    },\n  },\n  data: () => ({\n    rows: [] as Array<any>,\n    ready: false,\n  }),\n  watch: {\n    onRows: {\n      async handler(func: Function) {\n        if (func) {\n          this.rows = await func();\n          this.ready = true;\n        }\n      },\n      immediate: true,\n      deep: true,\n    },\n  },\n  methods: {\n    async closeModal() {\n      await modalController.dismiss({});\n    },\n  },\n});\n","import { render } from \"./DrillTableModal.vue?vue&type=template&id=0cd2f14a&ts=true\"\nimport script from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\nexport * from \"./DrillTableModal.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ArtReportService } from \"./art_report_service\";\n\nexport class StockReportService extends ArtReportService {\n    stock: Array<any>;\n    constructor() {\n        super()\n        this.stock = []\n    }   \n\n    async loadStock() {\n        this.stock = await this.getReport(`pharmacy/items`, { paginate: false })\n        // this.stock = await ArtReportService.getJson()\n    }\n    \n    getStockReport() {\n        return ArtReportService.getJson(`pharmacy/stock_report`, { paginate: false })\n    }\n\n    getStockCardReport() {\n        return this.getReport(`programs/${this.programID}/reports/stock_card`);\n    }\n\n    loadTrail() {\n        return this.getReport('pharmacy/audit_trail/grouped')\n    }\n\n    getTrailDetails(date: string, drugId: number, transactionType: string) {\n        return this.getReport('pharmacy/audit_trail', {\n            'transaction_date': date,\n            'drug_id': drugId,\n            'transaction_reason': transactionType\n        })\n    }\n\n    getScCurrReport() {\n        return this.getReport('programs/1/reports/sc_curr')\n    }\n\n    getDiscrepancyReport () {\n        return this.getReport(`programs/${this.programID}/reports/discrepancy_report`);\n    }\n\n    /**Code adapted from BHT-Core Art system */\n    groupStock() {\n        const pharmacyData: any = {};\n        for (const index in this.stock) {\n            const data = this.stock[index]\n            const drugId = data[\"drug_id\"];\n\n            if (!pharmacyData[drugId]) {\n                pharmacyData[drugId] = {\n                    'current_quantity': 0,\n                    'dispensed_quantity': 0,\n                    'pack_size': data.pack_size,\n                    'drug_name': data[\"drug_name\"] === null ? data[\"drug_legacy_name\"] : data[\"drug_name\"]\n                }\n            }\n\n            if (data.current_quantity === 0) continue;\n\n            pharmacyData[drugId][\"current_quantity\"] += parseFloat(data.current_quantity);\n            if (data.dispensed_quantity){\n                pharmacyData[drugId][\"dispensed_quantity\"] += parseFloat(data.dispensed_quantity);\n            }\n        }\n        return Object.values(pharmacyData).map((drug: any) => {\n            let currentQuantity: any = '0'\n            if(drug.pack_size == null) {\n                currentQuantity  = drug.current_quantity + '(tabs)';\n            }else {\n                currentQuantity = Math.trunc(drug.current_quantity / drug.pack_size);\n            }\n            return {\n                drugName: drug.drug_name,\n                quantintyDispensed: drug.dispensed_quantity,\n                currentQuantity,\n                quantityIsTabs: drug.pack_size === null,\n            }\n        })\n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}