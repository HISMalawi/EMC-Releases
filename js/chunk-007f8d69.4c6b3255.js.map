{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","this","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","getSessionDate","DrugOrderService","orders","dispensations","order","pageSize","params","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","$event","fieldComponent","onSubmit","Target","TargetEvent","PRESCRIPTION_GUIDELINES","regimenName","target","ARV_REGIMENS","targetEvent","ON_VALUE","regimenCode","code","includes","medicationOrders","match","regimenCodeStr","sideEffectsTable","columns","rows","tableActionSheet","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","currentRegimenStr","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","hangingPillsStatus","INTERVAL_SELECTION","hangingPills","hanging","drug","some","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","enabled","ON_BUILD","prescriptionType","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","gender","contraindications","regimenDrugs","PrescriptionService","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","drug_id","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","form","encounter","createEncounter","setNextVisitInterval","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","invalidate","onBuildOptions","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","Prescription","JSON","parse","isPlainObject","warn","getRegimenStarterpack","setCustomDrugs","regimenCategories","getPatientRegimens","r","alternative_drug_name","concept_name","buildIntervalOptions","intervals","config","getDrugEstimates","getDrugFrequency","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","validation","val","Validation","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","async","getCustomIngridients","showKeyboard","hiddenFooterBtns","size","visible","visibleOnStateChange","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","guidelines","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","AdverseEffectsCategories","super","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","getCachedConceptName","getSideEffects","getRegimens","getARVs","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","concept_id","patientWeight","contraindication","getConceptID","getObs","forEach","o","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","yes","meds","getAll","value_numeric","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","dosage","getDrugDosages","req","allSideEffects","parseFloat","packs","roundedPacks","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","Date","setDate","getDate","pack_size","tabs","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs"],"mappings":"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","file":"js/chunk-007f8d69.4c6b3255.js","sourcesContent":["import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                await this.prescription.loadHangingPills()\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const drugs = await this.prescription.getCustomIngridients()\n                        return drugs.map((drug: any ) => ({\n                            label: drug.name,\n                            value: drug.drug_id,\n                            other: { ...drug }\n                        }))\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                visibleOnStateChange: (state: Record<string, any>) => {\n                                    return state.index === 1\n                                },\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Prescription.vue?vue&type=template&id=2bacc768&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}