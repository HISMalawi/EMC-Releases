{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/clinic/ClinicDiscrepancyReport.vue","webpack:///./src/apps/ART/views/reports/clinic/ClinicDiscrepancyReport.vue?8f19","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/apps/ART/services/reports/stock_report_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["_defineComponent","__name","setup","__props","reportData","ref","period","isLoading","report","StockReportService","columns","label","value","data","toDate","verification_date","toNumString","expected_quantity","current_quantity","difference","generate","async","startDate","endDate","toastWarning","getDiscrepancyReport","e","toastDanger","configure","DateSelection","onFinish","sDate","eDate","periodstr","onMounted","length","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","IonLoading","message","v2Datatable","title","subtitle","columnData","rowsPerPage","onConfigure","onRefresh","_","__exports__","SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","console","log","modalController","dismiss","ArtReportService","constructor","super","this","stock","getReport","paginate","getStockReport","getJson","getStockCardReport","programID","loadTrail","getTrailDetails","drugId","transactionType","getScCurrReport","groupStock","pharmacyData","index","pack_size","parseFloat","dispensed_quantity","Object","values","map","drug","currentQuantity","Math","trunc","drugName","drug_name","quantintyDispensed","quantityIsTabs","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","push","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-4ee8c26d.742f3a47.js","sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { IonPage, IonLoading } from \"@ionic/vue\"\nimport { onMounted, ref } from 'vue'\nimport v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport { toDate, toNumString } from \"@/utils/Strs\";\nimport { StockReportService } from \"@/apps/ART/services/reports/stock_report_service\";\nimport { DateSelection } from \"@/utils/ReportDateSelectionPrompt\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ClinicDiscrepancyReport',\n  setup(__props) {\n\nconst reportData = ref([])\nconst period = ref('')\nconst isLoading = ref(false)\nconst report = new StockReportService()\nconst columns: Array<v2ColumnInterface[]> = [[\n  {\n    label: \"Drug Count Date\",\n    ref: 'verification_date',\n    value: (data) => toDate(data.verification_date)\n  },\n  {\n    label: \"Drug Name\",\n    ref: 'short_name',\n  },\n  {\n    label: \"Expected Count\",\n    ref: 'expected_quantity',\n    value: (data) => toNumString(data.expected_quantity)\n  },\n  {\n    label: \"Verified Count\",\n    ref: 'current_quantity',\n    value: (data) => toNumString(data.current_quantity)\n  },\n  {\n    label: \"Difference\",\n    ref: 'difference',\n    value: (data) => toNumString(data.difference)\n  },\n  {\n    label: \"Reason\",\n    ref: 'variance_reason',\n  }\n]]\n\n/**\n * Generates report by start date and end date\n */\nconst generate = async () => {\n  if (!(report.startDate && report.endDate)) {\n    return toastWarning('Start date and end date required!')\n  }\n  isLoading.value = true\n  reportData.value = []\n  try {\n    reportData.value = await report.getDiscrepancyReport();\n  } catch (e) {\n    toastDanger(\"Unable to generate report!\")\n  }\n  isLoading.value = false\n}\n\n/**\n * Loads a dialogue to allow users to configure start and end date\n */\nconst configure = () => DateSelection({\n  onFinish: (sDate: string, eDate: string, periodstr: string) => {\n    period.value = `Period (${periodstr})`\n    report.startDate = sDate\n    report.endDate = eDate\n    generate()\n  }\n})\n\n/**\n * Initialization code when the report is empty!\n*/\nonMounted(() => !reportData.value.length && configure())\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(_unref(IonLoading), {\n        \"is-open\": isLoading.value,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(v2Datatable, {\n        title: \"Clinic Discrepancy Report\",\n        subtitle: period.value,\n        columns: columns,\n        columnData: reportData.value,\n        rowsPerPage: 20,\n        onConfigure: configure,\n        onRefresh: () => generate()\n      }, null, 8, [\"subtitle\", \"columnData\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./ClinicDiscrepancyReport.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./ClinicDiscrepancyReport.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { ArtReportService } from \"./art_report_service\";\n\nexport class StockReportService extends ArtReportService {\n    stock: Array<any>;\n    constructor() {\n        super()\n        this.stock = []\n    }   \n\n    async loadStock() {\n        this.stock = await this.getReport(`pharmacy/items`, { paginate: false })\n        // this.stock = await ArtReportService.getJson()\n    }\n    \n    getStockReport() {\n        return ArtReportService.getJson(`pharmacy/stock_report`, { paginate: false })\n    }\n\n    getStockCardReport() {\n        return this.getReport(`programs/${this.programID}/reports/stock_card`);\n    }\n\n    loadTrail() {\n        return this.getReport('pharmacy/audit_trail/grouped')\n    }\n\n    getTrailDetails(date: string, drugId: number, transactionType: string) {\n        return this.getReport('pharmacy/audit_trail', {\n            'transaction_date': date,\n            'drug_id': drugId,\n            'transaction_reason': transactionType\n        })\n    }\n\n    getScCurrReport() {\n        return this.getReport('programs/1/reports/sc_curr')\n    }\n\n    getDiscrepancyReport () {\n        return this.getReport(`programs/${this.programID}/reports/discrepancy_report`);\n    }\n\n    /**Code adapted from BHT-Core Art system */\n    groupStock() {\n        const pharmacyData: any = {};\n        for (const index in this.stock) {\n            const data = this.stock[index]\n            const drugId = data[\"drug_id\"];\n\n            if (!pharmacyData[drugId]) {\n                pharmacyData[drugId] = {\n                    'current_quantity': 0,\n                    'dispensed_quantity': 0,\n                    'pack_size': data.pack_size,\n                    'drug_name': data[\"drug_name\"] === null ? data[\"drug_legacy_name\"] : data[\"drug_name\"]\n                }\n            }\n\n            if (data.current_quantity === 0) continue;\n\n            pharmacyData[drugId][\"current_quantity\"] += parseFloat(data.current_quantity);\n            if (data.dispensed_quantity){\n                pharmacyData[drugId][\"dispensed_quantity\"] += parseFloat(data.dispensed_quantity);\n            }\n        }\n        return Object.values(pharmacyData).map((drug: any) => {\n            let currentQuantity: any = '0'\n            if(drug.pack_size == null) {\n                currentQuantity  = drug.current_quantity + '(tabs)';\n            }else {\n                currentQuantity = Math.trunc(drug.current_quantity / drug.pack_size);\n            }\n            return {\n                drugName: drug.drug_name,\n                quantintyDispensed: drug.dispensed_quantity,\n                currentQuantity,\n                quantityIsTabs: drug.pack_size === null,\n            }\n        })\n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}