{"version":3,"sources":["webpack:///./src/services/drug_order_service.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue?cf0f","webpack:///./src/apps/ART/guidelines/prescription_guidelines.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue?b2e0","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/services/regimen_service.ts"],"names":["DrugOrderService","orders","this","postJson","getProgramID","dispensations","map","order","getSessionDate","patientID","getJson","pageSize","Service","drugID","date","params","patientId","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","onOnIndex","$event","fieldComponent","activeField","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","Target","FlowState","TargetEvent","PRESCRIPTION_GUIDELINES","priority","actions","alert","regimenName","infoActionSheet","name","slot","color","EXIT","target","ARV_REGIMENS","targetEvent","ON_VALUE","conditions","regimenCode","code","includes","medicationOrders","filter","i","match","length","regimenCodeStr","sideEffectsTable","columns","rows","tableActionSheet","action","CONTINUE","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","facts","optionsActionSheet","currentRegimenStr","role","modal","selection","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","state","hangingPillsStatus","INTERVAL_SELECTION","drugs","d","hangingPills","hanging","drug","some","Boolean","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","data","enabled","ON_BUILD","prescriptionType","type","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","defineComponent","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","gender","contraindications","regimenDrugs","watch","ready","handler","PrescriptionService","providerID","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","gotoPatientDashboard","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","patient","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","isEmpty","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","immediate","drug_id","deep","methods","ProgramService","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","form","createEncounter","encounter","setNextVisitInterval","value","payload","mapOrder","createDrugOrder","drugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","Store","invalidate","nextTask","onEvent","findings","matchToGuidelines","index","finding","onBuildOptions","onRegimen","label","other","toString","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","onBeforeRegimenNext","event","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","HTN_SESSION_KEY","Prescription","JSON","parse","isPlainObject","e","console","warn","getRegimenStarterpack","setCustomDrugs","push","HisDate","toStandardHisDisplayFormat","buildRegimenOptions","getPatientRegimens","regimenCategories","options","r","alternative_drug_name","concept_name","sort","buildIntervalOptions","intervals","parseInt","config","getDrugEstimates","getDrugFrequency","drugName","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","condition","validation","val","Validation","required","onload","onValue","beforeNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","getCustomIngridients","showKeyboard","hiddenFooterBtns","size","visible","visibleOnStateChange","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","__exports__","AdverseEffectsCategories","RegimenService","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","AppEncounterService","getCachedConceptName","getRegimens","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","concept_id","patientWeight","getConceptID","contraindication","getObs","obs","forEach","o","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","getFirstValueCoded","yes","meds","Object","values","getAll","pills","value_numeric","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","getDrugDosages","dosage","Promise","all","req","allSideEffects","parseFloat","packs","roundedPacks","morningTabs","eveningTabs","dose","dateObj","Date","setDate","getDate","pack_size","tabs","calculateEquivalentDosage","calculateDosage","getFirstValueText","reason","drugOrders","create","encounterID","response","saveValueTextObs"],"mappings":"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","file":"js/chunk-4184705c.9e8408e8.js","sourcesContent":["import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","/**\n * QUICK FACTS ABOUT ART REGIMENS (Malawi Clinical HIV Guidelines 2018 Version 1)\n *  - ART regimens are grouped into first and secondline\n *  - Each regimen is identified by a number. \n *    [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14]\n *  - Firstline regimens include [0, 2, 4, 5, 6, 13, 14]\n *  - Secondline regimens include [7, 8, 9, 10, 11]\n *  - Some regimens are \"phased in\" on initiation (Due to adverse reaction). As such, \n *    a starter pack is provided for atleast two weeks. Regimens that require a\n *    starter pack include [0, 2, 6]\n */\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { tableActionSheet, listActionSheet, infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\"\n\nexport enum Target {\n    ARV_REGIMENS = 'arv_regimens',\n    INTERVAL_SELECTION = 'next_visit_interval'\n}\nexport enum FlowState {\n    EXIT = 'exit',\n    CONTINUE = 'continue'\n}\nexport enum TargetEvent {\n    ON_VALUE = 'onValue',\n    ON_BUILD = 'onBuild',\n    BEFORE_NEXT = 'beforeNext',\n}\nexport const PRESCRIPTION_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not prescribe LPV regimens together with 3HP\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenName }: any) => {\n                await infoActionSheet(\n                    '3HP - LPV/r conflict',\n                    regimenName,\n                    `Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP`,\n                    [\n                        { name: 'Close', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                    )\n                    return FlowState.EXIT\n                }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: number) {\n                return [7, 8, 9, 10, 11, 12].includes(code)\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.filter(i => `${i}`.match(/3hp/i) ? true : false).length >= 1\n            }\n        }\n    },\n    \"Check for any adverse effects or contraindications associated with the regimen\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenCodeStr, sideEffectsTable }: any) => {\n                const { columns, rows } = sideEffectsTable\n                const action = await tableActionSheet(\n                    `Contraindications / Side effects for ${regimenCodeStr}`,'',\n                    columns, rows,\n                    [\n                        { name: 'Select other regimen', slot: 'start'},\n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select other regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            hasSideEffects(isTrue: boolean){\n                return isTrue\n            },\n            lastSideEffectDate(date: string, { currentDate }: any){\n                return date >= currentDate\n            }\n        }\n    },\n    \"Recommend 2nd line regimen to children under 3\": {\n        priority: 1,\n        actions: {\n            alert: async () => {\n                const action = await listActionSheet(\n                    'Recommendation',\n                    '',\n                    [\n                        \"Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)\",\n                        \"Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)\",\n                    ],\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code != 11\n            }\n        }\n    }, \n    'Provide a reason for switching regimens when patient already has one': {\n        priority: 1,\n        actions : {\n            alert: async (facts: any) => {\n                const modal = await optionsActionSheet(\n                    `Are you sure you want to replace ${facts.currentRegimenStr}?`,\n                    'Specify reason for switching regimen',\n                    [ \n                        'Policy change', \n                        'Ease of administration (pill burden, swallowing)',\n                        'Drug drug interaction', \n                        'Pregnancy intention',\n                        'Side effects', \n                        'Treatment failure', \n                        'Weight Change', \n                        'Other'\n                    ],\n                    [\n                        { name: 'Cancel', slot:'start', color: 'danger' },\n                        { name: 'Continue', slot: 'end', role: 'action' }\n                    ]\n                )\n\n                if (modal.selection && modal.action != 'Cancel') {\n                    facts.reasonForSwitch = modal.selection\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: string, { currentRegimenCode }: any){\n                return currentRegimenCode != -1 && code != currentRegimenCode\n            }\n        }\n    },\n    \"Provide 14 day starter pack for LPV regimens for children under 3 years old\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code === 11\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return [0, 2, 6].includes(code)\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Ask to reuse hanging pills if any\": {\n        priority: 5,\n        actions: {\n            alert: async (facts: any) => {\n                const action  = await infoActionSheet(\n                    'Hanging pills recommendation',\n                    'Add hanging pills?', '',\n                    [\n                        { name: 'No', slot: 'start', color: 'warning'},\n                        { name: 'Yes', slot: 'end'}\n                    ],\n                    'his-info-color'\n                )\n                if (action === 'Yes') {\n                    facts.hangingPillsStatus = 'Optimize - including hanging pills'\n                } else {\n                    facts.hangingPillsStatus = 'Exact - excluding hanging pills'\n                }\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n           drugs(d: Array<string>, { hangingPills }: any){\n                const hanging = d.map(drug => hangingPills.includes(drug))\n                return hanging.some(Boolean)\n           }\n        }\n    },\n    \"Provide warning of use of DTG regimen to women of reproductive age\" : {\n        priority: 2,\n        actions: {\n            alert: async ({regimenName}: any) => {\n                const action = await infoActionSheet(\n                    `Use of DTG or EFV in women of reproductive age`,\n                    regimenName,\n                    [\n                        'There is currently <u>no confirmation</u>',\n                        'that <b>DTG</b> is safe in <u>very early pregnancy</u>',\n                        'DTG-based regimens are therefore not used as standard 1st line regimens for',\n                        '<u>girls and women</u> who may get pregnancy'\n                    ].join(' '),\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Continue with regimen', slot: 'end', color: 'danger'}\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return code >= 12\n            },\n            isChildBearing(isBearing: boolean){\n                return isBearing\n            }\n        }\n    },\n    \"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs\" : {\n        priority: 6,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Pellets (cups) / Tabs', \n                    '',\n                    'Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?',\n                    [\n                        { name: 'Granules', slot: 'start' },\n                        { name: 'Pellets', slot:'end' },\n                        { name: 'Tabs', slot:'end' }\n                    ],\n                    'his-info-color'\n                )\n                facts.lpvType = action.toLowerCase()\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            weight(weight: number){\n                return weight >= 3 && weight <= 25\n            },\n            regimenCode(code: number){\n                return code === 11 || code === 9\n            }\n        }\n    },\n    \"Provide 14 day interval for NVP or LVP Regimen starter pack\": {\n        priority: 1,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            selectedInterval(interval: number) {\n                return interval > 14\n            },\n            starterPackNeeded(isNeeded: boolean) {\n                return isNeeded\n            },\n            regimenCode(code: number) {\n                return [0, 2, 6, 11].includes(code)\n            }\n        }\n    },\n    \"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT\" : {\n        priority: 2,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.map(i => `${i}`.match(/3hp/i) ? true : false).some(Boolean)\n            },\n            tptPrescriptionCount(count: number, {selectedInterval}: any){\n                return Math.round(selectedInterval / 30) > count\n            }\n        }\n    }\n}\n\nexport const DRUG_FREQUENCY_GUIDELINE: Record<string, GuideLineInterface> = {\n    'Rifapentine or isoniazid should be taken weekly': {\n        concept: 'Weekly (QW)',\n        priority: 1,\n        conditions: {\n            drug(d: string) {\n                return `${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    },\n    'Use daily frequency for any other drugs': {\n        concept: 'Daily (QOD)',\n        priority: 2,\n        conditions: {\n            drug(d: string) {\n                return !`${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                await this.prescription.loadHangingPills()\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const drugs = await this.prescription.getCustomIngridients()\n                        return drugs.map((drug: any ) => ({\n                            label: drug.name,\n                            value: drug.drug_id,\n                            other: { ...drug }\n                        }))\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                visibleOnStateChange: (state: Record<string, any>) => {\n                                    return state.index === 1\n                                },\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=2bacc768&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n}"],"sourceRoot":""}