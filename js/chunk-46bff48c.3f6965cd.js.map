{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/moh/MohDisaggregatedReport.vue?a535","webpack:///./src/apps/ART/views/reports/moh/MohDisaggregatedReport.vue","webpack:///./src/apps/ART/views/reports/moh/MohDisaggregatedReport.vue?2e58","webpack:///./src/apps/ART/services/reports/disaggregated_service.ts","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/ART/services/reports/moh_cohort_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","columns","headerInfoList","headerList","reportPrefix","config","showIndex","validationErrors","errors","showValidationStatus","canValidate","hasServerSideCaching","enabledPDFHorizontalPageBreak","onReportConfiguration","onPeriod","onDefaultConfiguration","onLoadDefault","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","IonPage","data","table","thTxt","thNum","REGIMENS","map","r","showStatus","rowDataRefs","dataRefLabels","aggregations","mohCohort","maleFemaleAgeGroupData","sortIndexes","created","query","$route","start_date","end_date","quarter","label","other","start","end","watch","doIt","validateReport","computed","Object","keys","this","sort","a","b","parseInt","reduce","i","concat","methods","form","rebuildCache","report","DisaggregatedReportService","MohCohortReportService","setQuarter","setStartDate","setEndDate","getDateIntervalPeriod","setRebuildOutcome","init","isInit","toastWarning","setTableRows","setFemaleRows","setMaleRows","setTotalMalesRow","setFemalePregnantRows","setFemaleBreastFeedingRows","setFemaleNotPregnantRows","getColumnLabel","col","getTotals","compareFunction","filter","accum","cur","addAggregation","gender","push","getRegimenRows","group","totals","row","getRegimenDistribution","distribution","refs","forEach","drill","getValue","prop","getTxIpt","getTxCurrTB","sortIndex","maleTD","column","columnDescription","columnName","td","isPregnant","patientID","match","includes","fnpTD","setGender","setRows","AGE_GROUPS","category","ageGroups","otherAgeGroup","txNew","txCurr","txGivenIpt","txScreenTB","setAgeGroup","getCohort","cohort","isEmpty","value","getGender","setHeaderInfoList","totalAlive","length","onclick","runTableDrill","validations","param","check","p","error","s","validateIndicators","__exports__","ageGroup","initialize","rebuildOutcome","req","temp_disaggregated","isRebuild","getReport","ArtReportService","PatientReportService","constructor","super","getBookedAppointments","date","getJson","programID","getViralLoadResults","range","getOtherOutcome","outcome","getPatientVisitTypes","getClientsDueForVl","getClientRentention","getExternalConsultationClients","getMissedAppointments","getPregnantWomen","getArchivingCandidates","CohortVar","regenerate","resourceId","id","params","ajxGet","cohortUrl","name","startDate","endDate","cache","sessionStorage","getItem","MOH_CACHE","conf","JSON","parse","values","setItem","stringify","callback","cachedValues","getCachedCohortValues","key","indicator","find","validation","indicatorValue","contents","condition"],"mappings":"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","file":"js/chunk-46bff48c.3f6965cd.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        columns: _ctx.columns,\n        headerInfoList: _ctx.headerList,\n        reportPrefix: \"MoH\",\n        config: {\n                showIndex: true\n            },\n        validationErrors: _ctx.errors,\n        showValidationStatus: _ctx.canValidate,\n        hasServerSideCaching: true,\n        enabledPDFHorizontalPageBreak: true,\n        onReportConfiguration: _ctx.onPeriod,\n        onDefaultConfiguration: _ctx.onLoadDefault\n      }, null, 8, [\"title\", \"period\", \"rows\", \"columns\", \"headerInfoList\", \"validationErrors\", \"showValidationStatus\", \"onReportConfiguration\", \"onDefaultConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { DisaggregatedReportService } from \"@/apps/ART/services/reports/disaggregated_service\"\nimport { REGIMENS } from \"@/apps/ART/services/reports/regimen_report_service\"\nimport { toastWarning } from '@/utils/Alerts'\nimport { isEmpty } from \"lodash\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IonPage } from \"@ionic/vue\"\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate, IonPage },\n    data: () => ({\n        title: 'Disaggregated report',\n        columns: [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thNum('Tx new (new on ART)'),\n                table.thNum('TX curr (receiving ART)'),\n                table.thNum('TX curr (received IPT)'),\n                table.thNum('TX curr (screened for TB)'),\n                ...(REGIMENS.map(r => table.thNum(r))),\n                table.thNum('Unknown'),\n                table.thNum('Total (regimen)')\n            ]\n        ],\n        errors: [] as string[],\n        showStatus: false as boolean,\n        rowDataRefs: [\n            'txNew', \n            'txCurr', \n            'txGivenIpt', \n            'txScreenTB', \n            ...REGIMENS,\n            'N/A', \n            'regimenTotals'\n        ],\n        dataRefLabels: {\n           'txNew': 'Tx new (new on ART)',\n           'txCurr': 'Tx curr (receiving ART)',\n           'txGivenIpt': 'TX curr (received IPT)',\n           'txScreenTB': 'TX curr (screened for TB)',\n           'N/A': 'Unknown',\n           'regimenTotals': 'Regimen Totals'\n        } as any,\n        aggregations: [] as any,\n        mohCohort: {} as any,\n        maleFemaleAgeGroupData: {} as any,\n        headerList: [] as Array<Option>,\n        canValidate: false as boolean,\n        onLoadDefault: null as any,\n        sortIndexes: {} as Record<string | number, Array<any>>\n    }),\n    async created() {\n        const { query }  = this.$route\n        /** Check for default url params for this report */\n        if (query.start_date && query.end_date && query.quarter) {\n            this.onLoadDefault = () =>\n                this.onPeriod({\n                    quarter: {\n                        label: query.quarter,\n                        other: {\n                            start: query.start_date,\n                            end: query.end_date\n                        }\n                    }\n                },{})\n        }\n    },\n    watch: {\n        async canValidate(doIt: boolean) {\n            if (doIt) await this.validateReport()\n        }\n    },\n    computed: {\n        rows(): any {\n            return Object.keys(this.sortIndexes)\n                .sort((a, b) => parseInt(a) - parseInt(b))\n                .reduce((r: any, i: any) => r.concat(this.sortIndexes[i]), [])\n        }\n    },\n    methods: {\n        async onPeriod(form: any, config: any, rebuildCache=false) {\n            this.canValidate = false\n            this.maleFemaleAgeGroupData = {}\n            this.aggregations = []\n            this.sortIndexes = {}\n            this.errors = []\n            this.report = new DisaggregatedReportService()\n            this.mohCohort = new MohCohortReportService()\n            if (form.quarter) {\n                this.mohCohort.setQuarter(form.quarter.label)\n                this.mohCohort.setStartDate(form.quarter.other.start)\n                this.mohCohort.setEndDate(form.quarter.other.end)\n                this.report.setQuarter(form.quarter.label)\n                this.report.setStartDate(form.quarter.other.start)\n                this.report.setEndDate(form.quarter.other.end)\n                this.period = form.quarter.label === 'Custom'\n                    ? this.report.getDateIntervalPeriod()\n                    : form.quarter.label\n            } else {\n                this.mohCohort.setStartDate(config.start_date)\n                this.mohCohort.setEndDate(config.end_date)\n                this.report.setStartDate(config.start_date)\n                this.report.setEndDate(config.end_date)\n                this.period = this.report.getDateIntervalPeriod()\n            }\n            this.report.setRebuildOutcome(rebuildCache)\n            const isInit = await this.report.init()\n            if (!isInit) {\n                return toastWarning('Unable to initialise report')\n            }\n            await this.setTableRows()\n            this.canValidate = true\n        },\n        async setTableRows() {\n            await this.setFemaleRows(1)\n            await this.setMaleRows(2)\n            await this.setTotalMalesRow(3)\n            await this.setFemalePregnantRows(4)\n            await this.setFemaleBreastFeedingRows(6)\n            await this.setFemaleNotPregnantRows(5)\n        },\n        getColumnLabel(col: string) {\n            return col in this.dataRefLabels ? this.dataRefLabels[col] : col\n        },\n        getTotals(compareFunction: Function){\n            return this.aggregations\n                .filter((i: any) => compareFunction(i))\n                .reduce((accum: any, cur: any) => accum.concat(cur.data), [])\n        },\n        addAggregation(col: string, gender: string, data = []) {\n            this.aggregations.push({ col, gender, data })\n        },\n        async getRegimenRows(group: string, gender: string) {\n            let totals: any = []\n            const row: any = []\n            const distribution = await this.report.getRegimenDistribution()\n            const refs = [...REGIMENS, 'N/A']\n            refs.forEach((i: any) => {\n                if (distribution[i]) totals = totals.concat(distribution[i])\n                row.push(this.drill(distribution[i], `Regimen ${i} | ${group} | ${gender}`))\n                this.addAggregation(i, gender, distribution[i])\n            })\n            row.push(this.drill(totals, `Regimen Totals | ${group} | ${gender}`))\n            this.addAggregation('regimenTotals', gender, totals)\n            return row\n        },\n        getValue(prop: string, gender: string, data: any) {\n            switch(prop) {\n                case 'tx_given_ipt':\n                    return this.report.getTxIpt()\n                case 'tx_screened_for_tb':\n                    return this.report.getTxCurrTB()\n                default:\n                    return gender in data ? data[gender][prop] : []\n            }\n        },\n        setTotalMalesRow(sortIndex: number) {\n            const maleTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Male' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data), []) \n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(columnName => \n                maleTD(columnName, `${this.getColumnLabel(columnName)} | All Male`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('Male'), ...rows]]\n        },\n        setFemaleNotPregnantRows(sortIndex: number) {\n            // Gets all pregnant females from a particular column and checks if given patient ID \n            // Is in the list\n            const isPregnant = (patientID: number, column: string) => this.aggregations\n                .filter((a: any) => a.gender.match(/fp|fbf/i) && a.col === column)\n                .reduce((accum: any, cur: any) => accum.concat(cur.data || []), [])\n                .includes(patientID)\n            // Get total sum of all females by a particular column\n            const fnpTD = (column: string, columnDescription: string) => {\n                const data = this.aggregations.filter((a: any) => a.gender === 'Female' && a.col === column)\n                    .reduce((accum: any, cur: any) => accum.concat(cur.data.filter((i: any) => !isPregnant(i, column))), [])\n                return this.drill(data, columnDescription)\n            }\n            const rows: any = this.rowDataRefs.map(column => \n                fnpTD(column, `${this.getColumnLabel(column)} | FNP`)\n            )\n            this.sortIndexes[sortIndex] = [[table.td('All'), table.td('FNP'), ...rows]]\n        },\n        setFemaleRows(sortIndex: number) {\n            this.report.setGender('female')\n            return this.setRows(sortIndex, 'F', AGE_GROUPS, 'Female')\n        },\n        setMaleRows(sortIndex: number) {\n            this.report.setGender('male')\n            return this.setRows(sortIndex, 'M', AGE_GROUPS, 'Male')\n        },\n        setFemalePregnantRows(sortIndex: number) {\n            this.report.setGender('pregnant')\n            return this.setRows(sortIndex, 'F', ['All'], 'FP', 'Pregnant')\n        },\n        setFemaleBreastFeedingRows(sortIndex: number) {\n            this.report.setGender('breastfeeding')\n            return this.setRows(sortIndex, 'F', ['All'], 'FBf', 'Breastfeeding')\n        },\n        async setRows(sortIndex: number, category: string, ageGroups: string[], gender: string, otherAgeGroup='') {\n            for(const i in ageGroups) {\n                let txNew = []\n                let txCurr= []\n                let txGivenIpt = []\n                let txScreenTB = []\n                const group = otherAgeGroup || ageGroups[i]\n                this.report.setAgeGroup(group)\n\n                if (!(group in this.maleFemaleAgeGroupData)) {\n                    const cohort = await this.report.getCohort()\n                    this.report.setRebuildOutcome(false)\n                    this.maleFemaleAgeGroupData[group] = !isEmpty(cohort) ? cohort[group] : {}\n                }\n\n                if (!isEmpty(this.maleFemaleAgeGroupData[group])) {\n                    const value = async (prop: string) => this.getValue(\n                        prop, category, this.maleFemaleAgeGroupData[group]\n                    )\n                    txNew = await value('tx_new')\n                    txCurr= await value('tx_curr')\n                    txGivenIpt = await value('tx_given_ipt')\n                    txScreenTB = await value('tx_screened_for_tb')\n                    this.addAggregation('txNew', gender, txNew)\n                    this.addAggregation('txCurr', gender, txCurr)\n                    this.addAggregation('txGivenIpt', gender, txGivenIpt)    \n                    this.addAggregation('txScreenTB', gender, txScreenTB)\n                }\n\n                switch(this.report.getGender()) {\n                    case 'breastfeeding':\n                        this.report.setAgeGroup('All')\n                        this.report.setGender('Fbf')\n                        break\n                    case 'pregnant':\n                        this.report.setAgeGroup('All')\n                        this.report.setGender('FP')\n                        break\n                }\n\n                if (!this.sortIndexes[sortIndex]) this.sortIndexes[sortIndex] = []\n\n                this.sortIndexes[sortIndex].push([\n                    table.td(ageGroups[i]),\n                    table.td(gender),\n                    this.drill(txNew, `Tx new (new on ART) | ${group} | ${gender}`),\n                    this.drill(txCurr, `Tx curr (receiving ART) | ${group} | ${gender}`),\n                    this.drill(txGivenIpt, `TX curr (received IPT) | ${group} | ${gender}`),\n                    this.drill(txScreenTB, `TX curr (screened for TB) | ${group} | ${gender}`),\n                    ...(await this.getRegimenRows(group, gender))\n                ])\n            }\n        },\n        setHeaderInfoList(totalAlive: Array<any>) {\n            this.headerList = [\n                { \n                    label: 'Total Alive and on ART', \n                    value: totalAlive.length,\n                    other: {\n                        onclick: () => this.runTableDrill(totalAlive, 'Total Alive on ART')\n                    }\n                }\n            ]\n        },\n        async validateReport() {\n            const totalAlive = this.getTotals((i: any) => i.col === 'txCurr' && i.gender.match(/male|female/i))\n            this.setHeaderInfoList(totalAlive)\n            const validations: any = {\n                'total_alive_and_on_art' : {\n                    param: totalAlive.length,\n                    check: (i: number, p: number) => i != p,\n                    error: (i: number, p: number) => `\n                        Total alive of <b>${p}</b>\n                        Does not match total alive of <b>${i}</b> on MOH report\n                    `\n                }\n            }\n            const s = this.mohCohort.validateIndicators(validations, (errors: string[]) => this.errors = errors)\n            if (s === -1) this.errors = ['Report not validated. Run the MoH cohort report for similar reporting period and then run this report']\n        }\n    }\n})\n","import { render } from \"./MohDisaggregatedReport.vue?vue&type=template&id=34b7a7c4&ts=true\"\nimport script from \"./MohDisaggregatedReport.vue?vue&type=script&lang=ts\"\nexport * from \"./MohDisaggregatedReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ArtReportService } from \"./art_report_service\";\nimport { AGE_GROUPS } from \"./patient_report_service\";\n\nexport class DisaggregatedReportService extends ArtReportService {\n    gender: string;\n    ageGroup: string;\n    initialize: boolean;\n    rebuildOutcome: boolean;\n\n    constructor() {\n        super()\n        this.gender = ''\n        this.ageGroup = AGE_GROUPS[0]\n        this.initialize = true\n        this.rebuildOutcome = true\n    }\n\n    async init() {\n        this.initialize = true\n        const req = await this.getCohort()\n        if (req && req.temp_disaggregated === 'created') {\n            this.initialize = false\n            return true\n        }\n        return false\n    }\n\n    setAgeGroup(ageGroup: string) {\n        this.ageGroup = ageGroup\n    }\n\n    setInitialization(isInit: boolean) {\n        this.initialize = isInit\n    }\n\n    setRebuildOutcome(isRebuild: boolean) {\n        this.rebuildOutcome = isRebuild\n    }\n\n    setGender(gender: string) {\n        this.gender = gender\n    }\n\n    getGender() {\n        return this.gender\n    }\n\n    getCohort() {\n        return this.getReport('cohort_disaggregated', {\n            'age_group': `${this.ageGroup}`,\n            'rebuild_outcome': `${this.rebuildOutcome}`,\n            'initialize': `${this.initialize}`\n        })\n    }\n\n    getTxIpt() {\n        return this.getReport('clients_given_ipt', { \n            'gender': this.gender, 'age_group': `${this.ageGroup}` \n        })\n    }\n\n    getTxCurrTB() {\n        return this.getReport('screened_for_tb', { \n            'gender': this.gender, 'age_group': `${this.ageGroup}` \n        })\n    }\n\n    getRegimenDistribution() {\n        return this.getReport('disaggregated_regimen_distribution', {\n            'gender': `${this.gender}`, 'age_group': `${this.ageGroup}`\n        })\n    }\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport const AGE_GROUPS = [\n    '<1 year',\n    '1-4 years', \n    '5-9 years', \n    '10-14 years', \n    '15-19 years', \n    '20-24 years', \n    '25-29 years', \n    '30-34 years', \n    '35-39 years', \n    '40-44 years', \n    '45-49 years', \n    '50-54 years',\n    '55-59 years',\n    '60-64 years',\n    '65-69 years',\n    '70-74 years',\n    '75-79 years',\n    '80-84 years',\n    '85-89 years',\n    '90 plus years'\n]\n\nexport class PatientReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    getBookedAppointments(date: string) {\n        return ArtReportService.getJson(`programs/${this.programID}/scheduled_appointments`, { date })\n    }\n\n    getViralLoadResults(range: string) {\n        return this.getReport(`/programs/${this.programID}/reports/high_vl_patients`, { range })\n    }\n\n    getOtherOutcome(outcome: string) {\n        return this.getReport('patient_outcome_list', { outcome })\n    }\n\n    getPatientVisitTypes() {\n        return this.getReport('patient_visit_types')\n    }\n\n    getClientsDueForVl() {\n        return this.getReport('clients_due_vl')\n    }\n\n    getClientRentention() {\n        return this.getReport(`/programs/${this.programID}/reports/retention`)\n    }\n\n    getExternalConsultationClients() {\n        return this.getReport(`${this.programID}/external_consultation_clients`)\n    }\n\n    getMissedAppointments() {\n        return this.getReport('missed_appointments')\n    }\n\n    getPregnantWomen() {\n        return this.getReport(`/programs/${this.programID}/reports/pregnant_patients`)\n    }\n\n    getArchivingCandidates() {\n        return ArtReportService.getJson(`programs/${this.programID}/reports/archiving_candidates`, { \n            'start_date': this.date\n        })\n    }\n}\n","import { find } from \"lodash\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport enum CohortVar {\n    MOH_CACHE = 'mohCache'\n}\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport class MohCohortReportService extends ArtReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    private cohortUrl() {\n        return `programs/${this.programID}/reports/cohort`\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    getCohortDrillDown(resourceId: string) {\n        return ArtReportService.getJson('cohort_report_drill_down', {\n            id: resourceId,\n            date: this.date,\n            'program_id': this.programID\n        })\n    }\n\n    requestCohort(params: any) {\n        return ArtReportService.ajxGet(\n            this.cohortUrl(), params\n        )\n    }\n\n    qaurterRequestParams() {\n        return { \n            name: this.quarter, \n            regenerate: this.regenerate \n        }\n    }\n\n    datePeriodRequestParams() {\n        return {\n            name: `Cohort-${this.startDate}-${this.endDate}`,\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            regenerate: this.regenerate\n        }\n    }\n\n    getCachedCohortValues() {\n        const cache = sessionStorage.getItem(CohortVar.MOH_CACHE)\n        if (cache) {\n            const conf = JSON.parse(cache)\n            if (conf.start_date === this.startDate \n                && conf.end_date === this.endDate\n                || conf.quarter === this.quarter) {\n                return conf.data\n            }\n        }\n    }\n\n    cacheCohort(values: any) {\n        sessionStorage.setItem(\n            CohortVar.MOH_CACHE, \n            JSON.stringify({\n                'start_date': this.startDate,\n                'end_date': this.endDate,\n                'quarter': this.quarter,\n                'data': values\n        }))\n    }\n\n    validateIndicators(validations: Record<string, CohortValidationInterface>, callback: Function) {\n        const cachedValues = this.getCachedCohortValues()\n        if (cachedValues) {\n            const errors = Object.keys(validations)\n                .reduce((errors: Array<any>, key: string) => {\n                    const indicator: any = find(cachedValues, { name: key })\n                    const validation: any = validations[key]\n                    const indicatorValue: any = indicator ? indicator.contents : null\n                    const param = validation.param as number\n                    const condition = validation.check(parseInt(indicatorValue), param)\n                    if (condition) errors.push(\n                        validation.error(indicatorValue, param)\n                    )\n                    return errors\n                }, [])\n            return callback(errors)\n        }\n        return -1\n    }\n}\n"],"sourceRoot":""}