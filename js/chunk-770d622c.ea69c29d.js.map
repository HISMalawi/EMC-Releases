{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Registration.vue?6729","webpack:///./src/apps/OPD/services/patient_registration_service.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue","webpack:///./src/apps/OPD/views/encounters/Registration.vue?726f"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","registrationService","watch","ready","handler","isReady","PatientVisitRegistrationService","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","createEncounter","encounter","toastWarning","resolveObs","registrationData","saveObservationList","registrationObs","nextTask","nidAvailable","nid","PatientIdentifierService","create","id","helpText","type","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","getFacilities","config","showKeyboard","isFilterDataViaApi","findIdentifierByType","yesNoUnknownOptions","appearInSummary","TT_TEXT","national_id_available","summaryMapValue","isChildBearing","__exports__"],"mappings":"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","file":"js/chunk-770d622c.ea69c29d.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientVisitRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 104, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport { PatientIdentifierService } from \"@/services/patient_identifier_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n\n            if(nidAvailable && nidAvailable['value'] === 'Yes') {\n                // 28 = Malawi National Identifier Type Id\n                await PatientIdentifierService.create(this.patient.getID(), 28, nid['value'])\n            }\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: () => getFacilities(''),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID avalable',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.findIdentifierByType('Malawi National ID') === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    })\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=c85d0b24&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}