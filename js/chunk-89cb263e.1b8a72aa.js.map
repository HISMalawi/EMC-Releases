{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?6de3","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","EstimationFieldType","getYearField","id","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","validateMinMax","minDate","min","Date","maxDate","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","isEstimate","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","AGE_ESTIMATE_FIELD","dayjs","Service","subtract","MONTH_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","StagingCategory","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","description","show","info","weightPercentile","disabled","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4","cd4Modifier","modifier","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","gender","breastFeeding","answer","pregnant","StagingService","confirmatoryTest","LocationService","getFacilities","isAdult","category","getStagingCategoryByNum","AppEncounterService","buildValueCoded","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","getFirstValueCoded","test","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","getID","getAge","initStaging","loadHivConfirmatoryTestType","getBMI","isMale","getConfirmatoryTestType","getAgeInMonths","isPedaid","calculateWeightPercentile","submitStaging","computedValues","createEncounter","encounter","stagingObservations","buildReasonForArtObs","buildWhoStageObs","derivedObservations","saveObservationList","onStagingCondition","guidelines","getAlertGuidelines","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","getRecommendedConditionGuidelines","getStagingConditions","conceptFinding","concept_id","setWhoStage","getWhoStageGuidelines","setReasonForArt","getProgramEligibilityGuidelines","notAsymptomatic","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","TT_ART_STAGING_SUMMARY","onload","title","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","Validation","anyEmpty","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","weight","TT_MULTIPLE_SELECT","onValue","buildWhoCriteriaObs","onConditionFalse","charAt","count","substring","buildValueNumber","isCd4","cd4CountIsValid","cd4_available","getDate","buildValueDate","getLocationName","buildValueText","showKeyboard","isFilterDataViaApi","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"gHAAA,wZAAO,IAAMA,EAAiB,CAC1B,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,OACX,CAAC,GAAK,OAAQ,KAELC,EAAgB,CACzB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,OACX,CAAC,QAAU,IAAK,MAEPC,EAAwB,CACjC,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,OAAQ,IAAK,UAGLC,EAAmB,CAC5B,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAK,IAAK,KAGFC,EAAU,CACnB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UACpC,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,GAAK,IAAK,KAGFC,EAAgB,CACzB,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,GAAK,IAAK,KAGFC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/B,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,MACnC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,OAGJC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGhCC,EAAY,CACrB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,IAAK,IAAK,QAGpCC,EAA4B,CACrC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEhCC,EAAoB,CAC7B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,QACnD,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UAG1CC,EAAkB,CAC3B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,QAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAAQ,W,oCC/EhD,gSAeaC,EAAiB,CAC1BR,OACA,CACI,CAAC,GAAI,YAIAS,EAAe,CACxBR,OACA,CACI,CAAC,YAIIS,EAAuB,CAChCT,OACA,CACI,CAAC,SAAU,aAINU,EAAwB,CACjCV,OACA,CACI,CAAC,OACD,CAAC,SAAU,aAINW,EAA6B,CACtCX,OACA,CACI,CAAC,YAIIY,EAAU,CACnBZ,OACA,CACI,CAAC,UAAW,UACZ,CAAC,SAAU,SAINa,EAAe,CACxBZ,OACA,CACI,CAAC,aAIIa,EAAS,CAClBZ,OACA,CACI,CAAC,MAAO,UACR,CAAC,SAAU,WACX,CAAC,GAAI,WAIAa,EAAS,CAClBZ,OACA,CACI,CAAC,GAAI,UACL,CAAC,OAAQ,OACT,CAAC,QAAS,aAOLa,EAAc,CACvB,CACIC,IAAK,MACLC,SAAUN,GAEd,CACIK,IAAK,OACLC,SAAUX,GAEd,CACIU,IAAK,MACLC,SAAUJ,GAEd,CACIG,IAAK,SACLC,SAAUH,K,sCClGNI,E,iPAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,IAAMC,EAAU,SAACC,GAAD,OAAeC,OAAQC,2BAA2BF,IAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,8GAASC,EAAT,EAASA,iBAAT,SACkBC,eACjB,6BADgC,0BAEbT,EAAQQ,IAC3B,qEACA,CACI,CAAEE,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YARpD,cACGC,EADH,yBAWe,WAAXA,EACDd,EAAUe,wBACC,mBAAXD,EACAd,EAAUgB,uBACVhB,EAAUiB,UAfb,2CAAF,sDAAE,IAkBXC,WAAY,CACRC,QADQ,SACAA,GACJ,MAAmB,iBAAZA,GAEXV,iBAJQ,SAISW,EAJT,GAIgD,IAAlBC,EAAkB,EAAlBA,YAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Dd,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,gHAASc,EAAT,EAASA,UAAWD,EAApB,EAAoBA,YAApB,SACkBX,eACjB,6BAA8B,GADE,uBAEhBT,EAAQoB,GAFQ,uCAEmCpB,EAAQqB,IAC3E,CACI,CAAEX,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aANxD,cACGC,EADH,yBASe,wBAAXA,EACDd,EAAUuB,oBACVvB,EAAUe,yBAXb,2CAAF,sDAAE,IAcXG,WAAY,CACRI,UADQ,SACEA,EADF,GACyC,IAAlBD,EAAkB,EAAlBA,YAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDhB,SAAU,EACVC,QAAS,CACLiB,UAAW,WAAF,8CAAE,oHAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,cAAeL,EAAnC,EAAmCA,YAAaM,EAAhD,EAAgDA,QAAhD,SACaC,eAAmB,gCAAD,OACFF,GADE,eAE1BzB,EAAQoB,GAFkB,uBAESpB,EAAQ0B,IACnDF,EACA,CACI,CAAEd,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAPvC,cACDC,EADC,yBAUiB,WAAjBA,EAAMhB,OACP,CAAEiB,OAAQ,EAAGC,UAAWhC,EAAUe,yBAClC,CAAEgB,MAAOD,EAAMN,UAAWQ,UAAWhC,EAAUiC,eAZ9C,2CAAF,sDAAE,IAeff,WAAY,CACRgB,UADQ,SACEC,GACN,OAAOA,M,gDC5ERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,iBAAO,CACTC,QAAS,GACTC,OAAQ,GACRC,UAAW,GACXC,YAAa,EACblB,UAAW,GACXmB,MAAO,CACHvB,YAAa,GACbM,QAAS,GACTD,cAAe,MACfD,UAAW,GACXS,WAAW,EACXZ,UAAW,GACXH,QAAS,GACTV,iBAAkB,IAEtBoC,OAAO,IAEXC,MAAO,CACJ,OAAU,CACLC,QADK,SACGC,GAAU,WACXA,EAAMC,OAAOC,YAAcC,KAAKT,WAAaM,EAAMC,OAAOC,aACzDC,KAAKT,UAAYU,SAASJ,EAAMC,OAAOC,YACvCG,OAAMC,IAAI,iBAAkB,CAAEZ,UAAWS,KAAKT,YACzCa,MAAK,SAAAC,GACF,EAAKhB,QAAUgB,EACf,EAAKC,oBAAoBF,MAAK,WAC1B,EAAKG,2BAA2BH,MAAK,WACjC,EAAKV,OAAQ,aAMrCc,WAAW,EACXC,MAAM,IAGdC,SAAU,CACNC,kBADM,WAEF,OAAOX,KAAKY,wBAGpBC,QAAS,CACLC,aADK,SACQC,GAA6B,WAAXjB,EAAW,uDAAJ,KAC5BkB,EAAc,GAmBpB,GAlBAA,EAAOnE,EAAUiC,cAAgB,SAACT,GAC9B,MAAqBA,EAAU4C,MAAM,KAArC,sBAAQC,EAAR,KACMC,EAAWC,kBAAK,EAAK9C,UAAW,CAAE4C,aAExC,OADIC,IAAU,EAAK3B,WAAa2B,EAASE,WAClCxE,EAAUiB,UAErBkD,EAAOnE,EAAUuB,qBAAuB,WAEpC,OADA,EAAKkD,QAAQC,KAAb,yDAAoE,EAAKhC,YAClE1C,EAAU2E,MAErBR,EAAOnE,EAAUgB,wBAA0B,WAEvC,OADA,EAAKyD,QAAQC,KAAb,4BAAuC,EAAKhC,YACrC1C,EAAU2E,MAErBR,EAAOnE,EAAUe,yBAA2B,WAExC,OADA,EAAK6D,uBACE5E,EAAU2E,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOjB,IAGvBS,yBAzBD,WAyByB,8KACpBmB,EAAWC,eAAkB,EAAKlC,MAAOvC,GADrB,6BAEPwE,GAFO,iDAEhBE,EAFgB,WAGhBC,EAAUH,EAASE,GAHH,OAIlBC,QAJkB,IAIlBA,GAJkB,UAIlBA,EAASzE,eAJS,QAIlB,EAAkBC,MAJA,6BAKH,EALG,gBAKsBwE,QALtB,IAKsBA,GALtB,UAKsBA,EAASzE,eAL/B,aAKsB,EAAkBC,MAAM,EAAKoC,OALnD,sBAKZqC,EALY,KAKEhB,aALF,gBAMdgB,IAAWjF,EAAU2E,KANP,6DAQlBK,QARkB,IAQlBA,GARkB,UAQlBA,EAASzE,eARS,QAQlB,EAAkBiB,UARA,yCASMwD,QATN,IASMA,GATN,UASMA,EAASzE,eATf,aASM,EAAkBiB,UAAU,EAAKoB,OATvC,QASZpB,EATY,OAUlB,EAAKyC,aAAazC,EAAUQ,UAAWR,EAAUO,OAV/B,sEAcxB0B,kBAvCD,WAuCkB,uLAEOJ,OAAMC,IAAI,kBAAmB,CAAEZ,UAAW,EAAKA,YAFtD,OAETwC,EAFS,OAGf,EAAKtC,MAAMzB,QAAU+D,EAAQ/D,QAC7B,EAAKyB,MAAMnC,iBAAmByE,EAAQ9D,UAJvB,mDAMf+D,QAAQC,MAAR,MACAC,eAAY,GAAD,cAPI,WASnB,EAAKzC,MAAMvB,YAAciE,OAAeC,iBACxC,EAAK3C,MAAMjB,QAAU2D,OAAeE,mBACpC,EAAK5C,MAAMV,UAAYoD,OAAenD,QACtC,EAAKS,MAAMtB,UAAY,EAAKkB,QAAQiD,eACpC,EAAK7C,MAAMlB,cAAgB,EAAKgE,OAAO/E,KACjC,EAAK+E,OAAO/E,KAAKgF,WAAWC,cAC5B,OACFN,OAAenD,QAhBA,kCAiBQkB,OAAMC,IAAI,aAjBlB,QAiBf,EAAK7B,UAjBU,OAkBf,EAAKmB,MAAMnB,UAAY,EAAKA,UACvBoE,MAAK,SAACC,EAAQC,GACX,IAAMC,EAAYF,EAAEzB,SAASuB,cACvBK,EAAYF,EAAE1B,SAASuB,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,KAEpEC,KAAI,SAACC,GAAU,MACRxF,EAAO,GAAH,OAAMwF,EAAE9B,UAChB,IAAK+B,qBAAO,OAACD,QAAD,IAACA,GAAD,UAACA,EAAGE,cAAJ,aAAC,EAAWC,OAAQ,OAC5B,GAAuB,UAAAH,EAAEE,cAAF,eAAUC,QAAS,GAA1C,sBAAQC,EAAR,KACA5F,GAAQ,KAAJ,OAAS4F,EAAWC,WAApB,YAAkCD,EAAWE,YAA7C,KAER,OAAO9F,KA9BA,4DAkCvB+F,SAzEK,SAyEIC,GAAuB,IAARC,EAAQ,uDAAF,GAC1B,MAAO,CACHD,QACA5E,MAAO4E,EACPC,UAGRC,gBAhFK,SAgFWC,GACZ,OAAOA,EAAMZ,KAAI,SAAAa,GAAC,MAAK,CAACJ,MAAOI,EAAGhF,MAAOgF,OAE7ChD,oBAnFK,WAoFD,mCAA6BZ,KAAKT,YAEtCkC,qBAtFK,WAuFD,OAAOzB,KAAKsB,QAAQC,KAAK,CAACsC,KAAM7D,KAAKY,yBAEzCkD,SAzFK,WA0FD,OAAOA,eAAS9D,KAAKT,UAAWS,KAAKsB,UAEzCyC,aA5FK,WA6FD,MAAO,CACH,CAAEP,MAAO,MAAO5E,MAAO,OACvB,CAAE4E,MAAO,KAAM5E,MAAO,QAG9BoF,cAlGK,SAkGSR,GAA4B,IAAbC,EAAa,uDAAF,GACpC,MAAO,CACHD,QACA5E,MAAO,GACP6E,MAAO,iCACAA,GADF,IAEDQ,OAAQjE,KAAK+D,mBAIzBG,WA5GK,SA4GMC,GACP,OAAOA,EAAQpB,KAAI,SAACqB,GAChB,MAAO,CAAEZ,MAAOY,EAAQxF,MAAOwF,OAGvCC,oBAjHK,WAkHD,MAAO,CACH,CAAEb,MAAO,MAAO5E,MAAO,OACvB,CAAE4E,MAAO,KAAM5E,MAAO,MACtB,CAAE4E,MAAO,UAAW5E,MAAO,aAGnC0F,WAxHK,SAwHMC,GAAgB,IAANC,EAAM,uDAAF,GACfP,EAAcQ,OAAOR,OAAOM,GAC7BG,QAAO,SAAC3H,GAAD,OAAYA,IAAMA,EAAEyH,MAAQA,GAAe,KAARA,MAC1CG,QAAO,SAACC,EAAYC,GACjB,IAAMzF,EAAOyF,EAAIN,IAAMM,EAAIN,IAAMM,EAQjC,OAPIC,MAAMC,QAAQ3F,GACdwF,EAAQA,EAAMI,OAAO5F,GACE,oBAATA,EACdwF,EAAMrD,KAAKnC,KAEXwF,EAAMrD,KAAKnC,GAERwF,IACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAxIK,SAwIGC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,QAAO,SAACd,GAAD,OAAYyB,EAAWzB,MAAI0B,OAAS,EACxD,MAAOC,GACL,OAAO,IAGfC,eA/IK,SA+IUzH,GACX,IACI,IAAI,IAAM6F,KAAK7F,EAAY,CACvB,IAAM0H,EAAY1H,EAAW6F,KAE7B,GAAI6B,EAAW,OAAOA,GAE5B,MAAOF,GACL,MAAO,CAACA,QC7MxB,MAAMG,EAAc,EAEL,U,kDCHT,SAAUC,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1E/G,OAAQsG,EAAKtG,OACbgH,YAAaV,EAAKU,YAClBC,YAAaX,EAAKW,YAClBC,sBAAuBZ,EAAKY,sBAC5BC,WAAYb,EAAKc,SACjBA,SAAUd,EAAKe,eACfC,UAAWhB,EAAKiB,SACf,KAAM,EAAG,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN3F5H,+BAAgB,CAC3BzB,KAAM,kBACN0B,WAAY,CAAE4H,wBACdC,MAAO,CACH,WACA,WAEJ3H,KAAM,KAAM,CACRiH,SAAU,sBAEdW,MAAO,CACHL,eAAgB,CACZM,KAAMC,UAEVZ,YAAa,CACTW,KAAME,QACNC,SAAS,GAEbb,YAAa,CACTU,KAAMI,QAEV/H,OAAQ,CACJ2H,KAAMxC,OACN6C,UAAU,GAEdd,sBAAuB,CACnBS,KAAMI,OACNC,UAAU,IAGlBzG,QAAS,CACL6F,SAASa,EAAeC,GACpBxH,KAAKyH,MAAM,WAAYF,EAAUC,IAErCX,QAAQjD,GACJ5D,KAAKyH,MAAM,UAAW7D,O,qBCnClC,MAAM8B,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,0GCGH+B,E,wJCVI,GACZ,CACIlE,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,GAEX,CACI4E,MAAO,MACP5E,MAAO,IAEX,CACI4E,MAAO,MACP5E,MAAO,IAEX,CACI4E,MAAO,MACP5E,MAAO,K,iFDRT,SAAU+I,EAAaC,EAAYpK,GAA8B,IAAhBqK,IAAgB,yDAC7DC,EAAmB,GAEzB,OADID,GAAaC,EAAiBvG,KAAK,WAChC,CACHqG,KACAG,SAAU,GAAF,OAAKvK,EAAL,SACRwK,gBAAiB,kBAAM,GACvBf,KAAMgB,OAAUC,QAChBC,OAAQ,CACJC,eAAgB,CACZ1M,OACA,CACIoM,EACA,CAAC,cAOf,SAAUO,EAAcT,EAAYpK,GACtC,MAAO,CACHoK,KACAG,SAAU,GAAF,OAAKvK,EAAL,UACRwK,gBAAiB,kBAAM,GACvBf,KAAMgB,OAAUK,UAChBnE,QAAS,kBAAMoE,IAIjB,SAAUC,EAAYZ,EAAYpK,GACpC,MAAO,CACHoK,KACAG,SAAU,GAAF,OAAKvK,EAAL,QACRyJ,KAAMgB,OAAUQ,gBAChBT,gBAAiB,kBAAM,IAIzB,SAAUU,EAA8Bd,EAAYpK,GACtD,MAAO,CACHoK,KACAG,SAAU,GAAF,OAAKvK,EAAL,qBACRyJ,KAAMgB,OAAUK,UAChBN,gBAAiB,kBAAM,GACvB7D,QAAS,iBAAO,CACZ,CAAEX,MAAO,eAAgB5E,MAAO,KAChC,CAAE4E,MAAO,gBAAiB5E,MAAO,KACjC,CAAE4E,MAAO,gBAAiB5E,MAAO,KACjC,CAAE4E,MAAO,gBAAiB5E,MAAO,KACjC,CAAE4E,MAAO,mBAAoB5E,MAAO,QAK1C,SAAU+J,EAAoBf,EAAYpK,GAC5C,MAAO,CACHoK,KACAG,SAAU,GAAF,OAAKvK,EAAL,iBACRyJ,KAAMgB,OAAUW,UAChBZ,gBAAiB,kBAAM,GACvBG,OAAQ,CACJU,OAAQxM,SAKpB,SAASyM,EAAkBC,GACvB,OAAO9I,SAAS8I,GAAK,GAAd,WAAuBA,GAAMA,E,SAGzBC,E,oGAAf,WAA8BC,EAAWC,EAA2BC,GAApE,qGACQD,EAAME,aADd,iCAE2BF,EAAME,aAAaH,GAF9C,UAEcI,EAFd,QAGYA,EAHZ,mBAIuCA,EAAKpI,MAAM,KAJlD,sBAImBqI,EAJnB,KAIyBC,EAJzB,KAIgCC,EAJhC,UAKmBL,EALnB,OAMqB,SANrB,OAQqB,UARrB,QAUqB,QAVrB,iDAO2BG,GAAQ,IAPnC,iCAS2BrJ,SAASsJ,IAAU,IAT9C,iCAW2BtJ,SAASuJ,IAAQ,IAX5C,iCAeW,IAfX,4C,wBAkBA,SAASzM,EAAEsM,GACP,OAAOrM,OAAQC,2BAA2BoM,GAG9C,SAASI,EAAeJ,EAAcH,EAA2BD,EAAWvI,GACxE,GAAIwI,EAAMQ,QAAS,CACf,IAAMC,EAAMT,EAAMQ,QAAQT,EAAMvI,GAChC,GAAI,IAAIkJ,KAAKP,GAAQ,IAAIO,KAAKD,GAC1B,MAAO,CAAC,GAAD,OAAI5M,EAAEsM,GAAN,yCAA4CtM,EAAE4M,KAG7D,GAAIT,EAAMW,QAAS,CACf,IAAMC,EAAMZ,EAAMW,QAAQZ,EAAMvI,GAChC,GAAIoJ,GAAO,IAAIF,KAAKP,GAAQ,IAAIO,KAAKE,GACjC,MAAO,CAAC,GAAD,OAAI/M,EAAEsM,GAAN,yCAA4CtM,EAAE+M,MAY3D,SAAUC,EAAmBb,GAAqC,IAChEc,EAAW,GACXC,EAAY,GACZC,EAAa,GACbC,EAAW,GAETC,EAAS,QAAH,OAAWlB,EAAMtB,IACvByC,EAAU,SAAH,OAAYnB,EAAMtB,IACzB0C,EAAQ,OAAH,OAAUpB,EAAMtB,IACrB2C,EAAgB,gBAAH,OAAmBrB,EAAMtB,IACtC4C,EAAqB,qBAAH,OAAwBtB,EAAMtB,IAEhD0B,EAAO3B,EAAayC,EAAQlB,EAAMnB,SAAUmB,EAAMuB,WAAWC,cAC7DnB,EAAQlB,EAAcgC,EAASnB,EAAMnB,UACrCyB,EAAMhB,EAAY8B,EAAOpB,EAAMnB,UAE/B4C,EAAchC,EAAoB4B,EAAerB,EAAMnB,UACvD6C,EAAmBlC,EAA8B8B,EAAoBtB,EAAMnB,UAE3E8C,EAAsE,mBAA1C3B,EAAMuB,WAAWK,sBAC5C5B,EAAMuB,WAAWK,qBAElBC,EAAoB,SAACC,GACvB,QAAIA,EAAEZ,IAAWY,EAAEZ,GAAQxL,OACnB,CAAC,WAAWqM,SAASD,EAAEZ,GAAQxL,WAIhCsK,EAAMzD,WAAYyD,EAAMzD,UAAUuF,KAQvCE,EAAoB,SAACtM,EAAYuM,GACnC,IAAMC,EAAQ,CACV,CAAEnE,KAAM,OAAQrI,MAAOqL,EAAW7C,QAAS,QAC3C,CAAEH,KAAM,QAASrI,MAAOsL,EAAY9C,QAAS,MAC7C,CAAEH,KAAM,MAAOrI,MAAOuL,EAAU/C,QAAS,OAE7C,OAAOgE,EAAMzG,QAAO,SAAC0G,EAAiBC,GAClC,IAAMC,EAAK,CAAC,UAAMC,EAAW,UAAW,IAcxC,OAbIL,IAASG,EAAMrE,KACXsE,EAAGN,SAASrM,GACZyM,EAAW9J,KAAK+J,EAAMlE,SAEtBiE,EAAW9J,KAAK3C,GAGhB2M,EAAGN,SAASK,EAAM1M,OAClByM,EAAW9J,KAAK+J,EAAMlE,SAEtBiE,EAAW9J,KAAK+J,EAAM1M,OAGvByM,IACR,IAAII,KAAK,MAGU,oBAAfvC,EAAMwC,OAAqBpC,EAAKoC,KAAOxC,EAAMwC,MAGxDpC,EAAKqC,sBAAwB,SAACvM,GAAD,gBAAkBkK,EAAKvB,SAAvB,aAAoCmD,EAAiB,OAAC9L,QAAD,IAACA,OAAD,EAACA,EAAMoE,MAAO,QAAnE,MAE7B8F,EAAKsC,QAAU1C,EAAMtB,GAErB0B,EAAKuC,OAAS,SAACC,GAAD,OAAe7B,EAAY6B,EAAElN,MAAM4D,YAEjD8G,EAAKnB,OAAL,iCAAmBmB,EAAKnB,QAAWe,EAAMf,QAEzCmB,EAAKF,aAAe,SAAC4B,GAAD,OAAYhC,EAAegC,EAAG9B,EAAO,SAEzDI,EAAK7D,UAAY,SAACuF,GAAD,OAAY9B,EAAMzD,WAC7ByD,EAAMzD,UAAUuF,IAGtB1B,EAAKyC,WAAa,SAACD,EAAWd,EAAQgB,GAClC,GAAI9C,EAAM5B,UAAY2E,OAAoB3E,SAASwE,GAC/C,MAAO,CAAC,wBAEZ,IAAMxC,EAAOwC,EAAIA,EAAElN,MAAQ,GAC3B,IAAKsK,EAAMuB,WAAWC,cACfpB,EAAK9G,WAAW0J,MAAM,YACzB,MAAO,CAAC,kCAGZ,GAAI5C,IAAS,CAAC,WAAW2B,SAAS3B,IAC3B6C,MAAM7C,IACNA,EAAO,KACV,MAAO,CAAC,gBAGZ,GAAIA,GAAiC,oBAAlBJ,EAAMQ,QAAwB,CAC7C,IAAM0C,EAAUpP,OAAQqP,QAAQnD,EAAMQ,QAAQsB,EAAGgB,IACjD,GAAI/L,SAASqJ,GAAe8C,EACxB,MAAO,CAAC,WAAD,OAAY9C,EAAZ,yCAAiD8C,IAIhE,GAAI9C,GAAiC,oBAAlBJ,EAAMW,QAAwB,CAC7C,IAAMC,EAAMZ,EAAMW,QAAQmB,EAAGgB,GAC7B,GAAIlC,GAAOR,EAAOtM,OAAQqP,QAAQvC,GAC9B,MAAO,CAAC,WAAD,OAAYR,EAAZ,oCAA4CtM,OAAQqP,QAAQvC,KAI3E,OAAO,MAOXR,EAAKgD,gBAAkB,iBAAO,CAC1B9I,MAAO0F,EAAMqD,cAAgBrD,EAAMnB,SACnCnJ,MAAOoL,EAAWjN,EAAEiN,GAAY,YAKpCV,EAAKtB,gBAAkB,SAACwE,EAAQC,GAAT,OAAyBA,IAAQvD,EAAMtB,IAO9D0B,EAAKoD,cAAgB,SAACC,GAClB,GAAI3C,EAAU,CACV,MAAwBA,EAAS/I,MAAM,KAAvC,sBAAUsI,GAAV,WAAiBC,EAAjB,KAEA,OADAQ,EAAW,GAAH,OAAM2C,EAAI/N,MAAV,YAAmB2K,EAAnB,YAA4BC,GAC7BN,EAAM0D,aAAa5C,GAAU,GAExC,GAAI2C,GAAqB,YAAdA,EAAI/N,MAEX,OADAoL,EAAW,GACJd,EAAM0D,aAAa,WAAW,IAK7CrD,EAAMoC,sBAAwB,SAACvM,GAAD,gBAAkBmK,EAAMxB,SAAxB,aAAqCmD,EAAiB,OAAC9L,QAAD,IAACA,OAAD,EAACA,EAAMoE,MAAO,SAApE,MAE9B+F,EAAMqC,QAAU1C,EAAMtB,GAEtB2B,EAAMsC,OAAS,SAACC,GAAD,OAAe5B,EAAapB,EAAkBgD,EAAElN,MAAM4D,aAErE+G,EAAM9D,UAAY,SAACuF,GAAD,OAAaD,EAAkBC,IAEjDzB,EAAMwC,WAAa,SAACD,GAAD,OAAeG,OAAoB3E,SAASwE,IAE/DvC,EAAMH,aAAe,SAAC4B,GAAD,OAAYhC,EAAegC,EAAG9B,EAAO,UAGtD2B,IACAtB,EAAMpF,QAAU,0CAAUoE,GAAV,CAAwB,CAAE/E,MAAO,UAAW5E,MAAO,eASvE2K,EAAMmD,cAAgB,SAACC,EAAa3B,GAEhC,GAAI,UAAG2B,EAAI/N,OAAQsN,MAAM,YAErB,OADAlC,EAAW,GAAH,OAAMgB,EAAEZ,GAAQxL,MAAhB,UACDsK,EAAM0D,aAAa5C,GAAU,GAGxC,GAAIA,EAAU,CACV,MAAuBA,EAAS/I,MAAM,KAAtC,sBAAOqI,EAAP,KAAgBE,GAAhB,WACMD,EAAQT,EAAkB,GAAD,OAAI6D,EAAI/N,QAEvC,OADAoL,EAAW,GAAH,OAAMV,EAAN,YAAcC,EAAd,YAAuBC,GACxBN,EAAM0D,aAAa5C,GAAU,KAI5CR,EAAIoC,QAAU1C,EAAMtB,GAEpB4B,EAAImC,sBAAwB,SAACvM,GAAD,gBAAkBoK,EAAIzB,SAAtB,aAAmCmD,EAAiB,OAAC9L,QAAD,IAACA,OAAD,EAACA,EAAMoE,MAAO,OAAlE,MAE5BgG,EAAI/D,UAAY,SAACuF,GAAD,OAAa,UAAGA,EAAEX,GAASzL,OAAQsN,MAAM,aAAenB,EAAkBC,IAE1FxB,EAAIuC,WAAc,SAACD,EAAWd,EAAQgB,GAClC,OAAIC,OAAoB3E,SAASwE,GACtB,CAAC,4BAELrC,EAAeO,EAAUd,EAAO8B,EAAGgB,IAG9CxC,EAAIJ,aAAe,SAAC4B,GAAD,OAAYhC,EAAegC,EAAG9B,EAAO,QAExDM,EAAIkD,cAAgB,SAACZ,GACjB,IAAMe,IAAa,UAAGf,EAAElN,OAAQsN,MAAM,YAItC,OAFA/B,EAAW0C,EAAa,KAAQ/D,EAAkB,GAAD,OAAIgD,EAAElN,QACvDoL,EAAW,GAAH,OAAMC,EAAN,YAAmBC,EAAnB,YAAiCC,GAClCjB,EAAM0D,aAAa5C,EAAU6C,IAGxCrD,EAAIqC,OAAS,SAAC9O,EAAQgM,EAAQiC,EAAQgB,GAC9B9C,EAAM2C,QAAQ3C,EAAM2C,OAAO9O,EAAGgM,EAAGiC,EAAGgB,IAG5CxC,EAAIsD,WAAa,SAAChB,EAAQd,GACtB,OAAQ9B,EAAM4D,YAER5D,EAAM4D,WAAW9C,EAAUgB,IAGrCxB,EAAIrB,OAAS,CAGTmB,KAAM,SAAC0B,GAAD,OAAYA,EAAEZ,GAAQxL,OAC5B2K,MAAO,SAACyB,GAAD,OAAYA,EAAEX,GAASzL,QAI7BiM,IAAoBrB,EAAIrB,OAAO4E,gBAAkB,IAEtD,IAAMC,EAAyB,SAAChC,EAAQiC,GACpC,IAAMlP,EAAa,CACK,YAApBiN,EAAEZ,GAAQxL,OACVsK,EAAMzD,WAAYyD,EAAMzD,UAAUuF,GAClC9B,EAAMuB,WAAWyC,sBAAwBD,GAE7C,OAAOlP,EAAWoP,MAAMhG,UAiE5B,OA7DAwD,EAAYiB,QAAU1C,EAAMtB,GAE5B+C,EAAYoB,WAAa,SAACD,EAAWd,EAAQgB,GACzC,GAAIF,GAAKA,EAAElN,MAAQ,IACf,MAAO,CAAC,4DAEZ,GAAIuN,MAAMlM,SAAS6L,EAAElN,MAAM4D,aACvB,MAAO,CAAC,+BAEZ,IAAM4K,EAAmB,qCACzB,OAAItB,EAAElN,MAAM4D,WAAW0J,MAAMkB,GAGtB3D,EAAeO,EAAUd,EAAO8B,EAAGgB,GAF/B,CAAC,6BAKhBrB,EAAYlF,UAAY,SAACwD,GAAD,OAAe+D,EACnC/D,EAAMvB,EAAoB2F,qBAG9B1C,EAAY+B,cAAgB,SAACC,GACzB,IAAMrD,EAAOgE,IAAMC,OAAQnL,kBACtBoL,SAASb,EAAI/N,MAAiB,SAC9B0K,OAEL,OADAU,EAAW,GAAH,OAAMV,EAAN,UACDJ,EAAM0D,aAAa5C,GAAU,IAGxCW,EAAYmC,WAAa,SAAChB,EAAQd,GAC9B,OAAQ9B,EAAM4D,YAER5D,EAAM4D,WAAW9C,EAAUgB,IAIrCJ,EAAiBgB,QAAU1C,EAAMtB,GAEjCgD,EAAiBmB,WAAa,SAACD,EAAWd,EAAQgB,GAC9C,OAAIC,OAAoB3E,SAASwE,GACtB,CAAC,6BAELrC,EAAeO,EAAUd,EAAO8B,EAAGgB,IAG9CpB,EAAiBnF,UAAY,SAACwD,GAAD,OAAe+D,EACxC/D,EAAMvB,EAAoB+F,uBAG9B7C,EAAiB8B,cAAgB,SAACC,GAI9B,OAHA3C,EAAWsD,IAAMC,OAAQnL,kBACpBoL,SAASb,EAAI/N,MAAiB,OAC9B8O,OAAOC,QACLzE,EAAM0D,aAAa5C,GAAU,IAGxCY,EAAiBkC,WAAa,SAACN,EAAQxB,GACnC,OAAQ9B,EAAM4D,YAER5D,EAAM4D,WAAW9C,EAAUgB,IAG9B,CACH1B,EACAC,EACAC,EACAmB,EACAC,IA3bR,SAAYlD,GACRA,6CACAA,yDAFJ,CAAYA,MAAmB,M,sCEK1BkG,E,wSCXQC,EAA+D,CACxE,iCAAkC,CAC9BC,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,yDAA0D,CACtDD,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRiQ,aAAc,SAACC,GAAD,MAA+B,uBAAXA,KAG1C,iCAAkC,CAC9BH,QAAS,sBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,iCAAkC,CAC9BD,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,iCAAkC,CAC9BD,QAAS,oBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,MAKzBG,EAA+D,CACxE,mCAAoC,CAChCJ,QAAS,oBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,yDAA0D,CACtDD,QAAS,oBACT3Q,SAAU,EACVY,WAAY,CACRiQ,aAAc,SAACC,GAAD,MAA+B,sBAAXA,KAG1C,uCAAwC,CACpCH,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,mCAAoC,CAChCD,QAAS,oBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,mCAAoC,CAChCD,QAAS,mBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,MAKzBI,EAA6E,CACtF,+EAAgF,CAC5EhR,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,WAAOoC,GAAP,iGAA4B2O,eAAkB,oBAAD,OAAqB3O,EAAM4O,IAA3B,+CAA6E,CAC7HC,gBAAiB,8BACjBC,eAAgB,eAFb,mFAAF,sDAAE,IAKXxQ,WAAY,CACRyQ,kBADQ,SACW/I,GACf,MAAqB,gEAAdA,GAEX4I,IAAI,SAACA,GAAD,OAAiBA,EAAM,QAGnC,mDAAoD,CAChDlR,SAAU,EACVC,QAAS,CACLC,MAAO,WAAF,8CAAE,WAAOoC,GAAP,uGAC4B2O,eAAkB,0CAA2C,CACxFE,gBAAiB,oBACjBC,eAAgB,kBAHjB,UACGE,EADH,QAKAA,EALA,wBAMChP,EAAMsO,MAAQ,EACdtO,EAAMiP,mBAAqB,GAC3BjP,EAAMkP,qBAAuB,GAC7BlP,EAAMmP,oBAAsB,GAC5BnP,EAAMoP,mBAAqB,GAV5B,mBAWQ,GAXR,kCAaI,GAbJ,4CAAF,sDAAE,IAgBX9Q,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,+BAAdA,GAEXsI,MAAO,SAACA,GAAD,OAAmBA,GAAS,MAKlCe,EAA2E,CACpF,+DAAiE,CAC7D3R,SAAU,EACVC,QAAS,CACL2R,WAAW,GAEfC,YAAa,CACTtR,MAAO,SACPuR,KAAM,SACNC,KAAM,SAACzP,GAAD,qDAAwDA,EAAM0P,oBAExEpR,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,2IAAdA,GAEX0J,iBAJQ,SAISA,GACb,OAAOA,EAAmB,MAItC,0FAA2F,CACvFhS,SAAU,EACVC,QAAS,CACL2R,WAAW,GAEfC,YAAa,CACTtR,MAAO,SACPuR,KAAM,SACNC,KAAM,SAACzP,GAAD,+CAAkDA,EAAM0P,oBAElEpR,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,4HAAdA,GAEX0J,iBAJQ,SAISA,GACb,OAAOA,GAAoB,IAAMA,GAAoB,MAIjE,6EAA8E,CAC1EhS,SAAU,EACVC,QAAS,CACL2R,WAAW,EACXK,UAAU,GAEdJ,YAAa,CACTtR,MAAO,YACPuR,KAAM,SACNC,KAAM,iBAAM,wDAEhBnR,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,4HAAdA,GAEXiJ,mBAJQ,SAIW3Q,GACf,OAAOA,EAAWkN,SAAS,8IAM9BoE,EAA2E,CACpF,iCAAkC,CAC9BlS,SAAU,EACVC,QAAS,CACL2R,WAAW,GAEfC,YAAa,CACTtR,MAAO,SACPuR,KAAM,SACNC,KAAM,SAACzP,GAAD,uCAA0CA,EAAM4O,OAE1DtQ,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,gEAAdA,GAEX4I,IAAK,SAACA,GAAD,OAAiBA,EAAM,MAGpC,wCAAyC,CACrClR,SAAU,EACVC,QAAS,CACL2R,WAAW,GAEfC,YAAa,CACTtR,MAAO,UACPuR,KAAM,YACNC,KAAM,SAACzP,GAAD,uBAA0BA,EAAM4O,IAAhC,2BAEVtQ,WAAY,CACRyQ,kBAAmB,SAAC/I,GAAD,MAAqC,uEAAdA,GAC1C4I,IAAK,SAACA,GAAD,OAAiBA,GAAO,IAAQA,GAAO,QAGpD,gEAAiE,CAC7DlR,SAAU,EACVC,QAAS,CACL2R,WAAW,EACXK,UAAU,GAEdJ,YAAa,CACTtR,MAAO,YACPuR,KAAM,SACNC,KAAM,iBAAM,4CAEhBnR,WAAY,CACRyQ,kBADQ,SACU/I,GACd,MAAqB,uEAAdA,GAEXiJ,mBAJQ,SAIW3Q,GACf,OAAOA,EAAWkN,SAAS,mEAM9BqE,EAA4D,CACrE,yBAA0B,CACtBxB,QAAS,oBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,yBAA0B,CACtBD,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,8FAA+F,CAC3FD,QAAS,sBACT3Q,SAAU,EACVY,WAAY,CACRwR,YADQ,SACIC,GACR,OAAOA,EAAM,IAEjBd,mBAAoB,SAAC3Q,GACjB,IAAM0R,EAAiBC,OAAeC,sBAAsB,kBAC5D,IAAK,IAAMC,KAAiBH,EACxB,GAAI1R,EAAWkN,SAAS2E,GAAgB,OAAO,EAEnD,OAAO,GAEXC,SAXQ,SAWCA,GACL,MAAoB,mBAAbA,KAInB,uFAAwF,CACpF/B,QAAS,oCACT3Q,SAAU,EACVY,WAAY,CACRwR,YAAa,SAACC,GAAD,OAAiBA,EAAM,IACpCK,SAAU,SAACA,GAAD,MAAmC,sCAAbA,KAGxC,uCAAwC,CACpC/B,QAAS,eACT3Q,SAAU,EACVY,WAAY,CACRwR,YAAa,SAACC,GAAD,OAAiBA,EAAM,MAG5C,qEAAsE,CAClE1B,QAAS,sCACT3Q,SAAU,EACVY,WAAY,CACRwR,YADQ,SACIC,GACR,OAAOA,GAAO,IAAMA,GAAO,IAE/BM,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAElBC,YAPQ,SAOIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,GAE/BjC,MAVQ,SAUFA,GACF,OAAOA,GAAS,KAI5B,gFAAiF,CAC7ED,QAAS,sCACT3Q,SAAU,EACVY,WAAY,CACR+R,IADQ,SACJA,GACA,OAAOA,GAAO,KAElBC,YAJQ,SAIIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,GAE/BjC,MAPQ,SAOFA,GACF,OAAOA,GAAS,KAI5B,sGAAuG,CACnGD,QAAS,sCACT3Q,SAAU,EACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,GAAQ,cAEnBmG,IAJQ,SAIJA,GACA,OAAOA,EAAM,GAEjBM,IAPQ,SAOJA,GACA,OAAOA,GAAO,KAElBC,YAVQ,SAUIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,KAIvC,6DAA8D,CAC1DlC,QAAS,eACT3Q,SAAU,GACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,GAAQ,cAEnBmG,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAI1B,qEAAsE,CAClE1B,QAAS,eACT3Q,SAAU,GACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAAmBA,GAAS,MAKlCkC,EAA4D,CACrE,yBAA0B,CACtBnC,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,iDAAkD,CAC9CD,QAAS,qBACT3Q,SAAU,EACVY,WAAY,CACR2Q,mBAAoB,SAAC3Q,GACjB,IAAMmS,EAAaR,OAAeC,sBAAsB,+BAClDQ,EAAQD,EAAWvL,QAAO,SAACyL,EAAOC,GAAR,OAAiBtS,EAAWkN,SAASoF,EAAK7S,MAAQ4S,EAAQ,EAAI,IAAG,GACjG,OAAOD,GAAS,KAI5B,yBAA0B,CACtBrC,QAAS,sBACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAA6B,IAAVA,KAGlC,2CAA4C,CACxCD,QAAS,gCACT3Q,SAAU,EACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,EAAO,cAElByG,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAElBC,YAPQ,SAOIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,KAIvC,0CAA2C,CACvClC,QAAS,gCACT3Q,SAAU,EACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,GAAQ,cAEnByG,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAElBC,YAPQ,SAOIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,KAIvC,0CAA2C,CACvClC,QAAS,gCACT3Q,SAAU,EACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,GAAQ,cAEnByG,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAElBC,YAPQ,SAOIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,KAIvC,0CAA2C,CACvClC,QAAS,gCACT3Q,SAAU,EACVY,WAAY,CACRsL,KADQ,SACHA,GACD,OAAOA,GAAQ,cAEnByG,IAJQ,SAIJA,GACA,OAAOA,GAAO,KAElBC,YAPQ,SAOIC,GACR,MAAoB,MAAbA,GAAiC,MAAbA,KAIvC,+BAAgC,CAC5BlC,QAAS,gBACT3Q,SAAU,EACVY,WAAY,CACRuS,OADQ,SACDA,GACH,MAAkB,MAAXA,GAEXC,cAJQ,SAIMC,GACV,MAAmB,QAAXA,GAEZzC,MAAO,SAACA,GAAD,OAAmBA,GAAS,KAG3C,yBAA0B,CACtBD,QAAS,mBACT3Q,SAAU,EACVY,WAAY,CACRuS,OADQ,SACDA,GACH,MAAkB,MAAXA,GAEXG,SAJQ,SAICD,GACL,MAAkB,QAAXA,GAEXzC,MAPQ,SAOFA,GACF,OAAOA,GAAS,KAI5B,qEAAsE,CAClED,QAAS,eACT3Q,SAAU,EACVY,WAAY,CACRgQ,MAAO,SAACA,GAAD,OAAmBA,GAAS,ODhd/C,SAAKH,GACDA,+CACAA,+CACAA,+CACAA,+CACAA,iDACAA,iDACAA,iDACAA,kDARJ,CAAKA,MAAe,KAWb,IAAM8C,EAAb,wDAGI,WAAYnR,EAAmBiQ,EAAahQ,GAAkB,oCAC1D,cAAMD,EAAW,GAAIC,GACrB,EAAKgQ,IAAMA,EACX,EAAKmB,iBAAmB,KAHkC,EAHlE,8CASI,WAAY,OAAO3Q,KAAKwP,KAAO,KATnC,sBAWI,WAAa,OAAOxP,KAAKwP,KAAO,KAXpC,oBAaI,SAAOA,GACHxP,KAAKwP,IAAMA,IAdnB,2BAiBI,WAAwB,IAAT9K,EAAS,uDAAF,GAAM,OAAOkM,OAAgBC,cAAc,CAACrT,KAAMkH,MAjB5E,qCAmBI,WAA4B,OAAO1E,KAAK2Q,mBAnB5C,6BAqBI,SAAgB/R,GACZ,IACI,QAAOA,EAAMsN,MAAM,sBACtB,MAAM3G,GACH,OAAO,KAzBnB,gCA6BI,WACI,OAAO4I,IA9Bf,mCAiCI,WACI,OAAOnO,KAAK8Q,UAAYjD,EAA2BK,IAlC3D,6CAqCI,WACI,OAAOlO,KAAK8Q,UAAYb,EAAuBX,IAtCvD,+CAyCI,WACI,OAAOtP,KAAK8Q,UAAYzB,EAAsCP,IA1CtE,kCA6CI,SAAqBf,GACjB,IAAMgD,EAAW/Q,KAAKgR,wBAAwBjD,GAC9C,OAAOkD,OAAoBtB,sBAAsBoB,KA/CzD,8BAkDI,SAAiBhD,GACb,OAAO/N,KAAKkR,gBAAgB,YAAanD,KAnDjD,iCAsDI,SAAoBtI,GAChB,OAAOzF,KAAKkR,gBAAgB,8BAA+BzL,KAvDnE,kCA0DI,SAAqBwI,GACjB,OAAOjO,KAAKkR,gBAAgB,6BAA8BjD,KA3DlE,qCA8DY,SAAwBkD,GAC5B,OAAOA,GACH,KAAK,EACD,OAAOnR,KAAK8Q,UAAYlD,EAAgBwD,cAAgBxD,EAAgByD,eAC5E,KAAK,EACD,OAAOrR,KAAK8Q,UAAYlD,EAAgB0D,cAAgB1D,EAAgB2D,eAC5E,KAAK,EACD,OAAOvR,KAAK8Q,UAAYlD,EAAgB4D,cAAgB5D,EAAgB6D,eAC5E,KAAK,EACD,OAAOzR,KAAK8Q,UAAYlD,EAAgB8D,cAAgB9D,EAAgB+D,eAC5E,QACI,MAAO,MAzEvB,kGA6EI,oHACuBV,OAAoBW,mBACnC5R,KAAKT,UAAW,8BAFxB,OACUsS,EADV,OAIQA,IAAM7R,KAAK2Q,iBAAmBkB,GAJtC,gDA7EJ,8DAAoCZ,Q,gGEVrBhS,+BAAgB,CAC3B6S,OAAQ,CAACC,QACT3S,KAAM,iBAAO,CACT4S,QAAS,GACTC,wBAAwB,EACxBC,sBAAsB,EACtBC,OAAQ,GACRC,aAAe,CACX5C,KAAM,EACNnB,KAAM,EACNiC,OAAQ,GACRvC,OAAQ,EACR+B,KAAM,EACNzG,KAAM,GACNgJ,gBAAgB,EAChBC,mBAAoB,GACpBzD,mBAAoB,GACpBF,qBAAsB,GACtBC,oBAAqB,GACrBZ,aAAc,GACd6B,SAAU,GACVY,SAAU,GACVF,cAAe,GACf/B,kBAAmB,GACnBE,mBAAoB,GACpBS,kBAAmB,EACnBI,aAAc,EACdQ,YAAa,GACbwC,SAAU,MAGlB5S,MAAO,CACHD,MAAQ,CACJE,QADI,SACIkM,GACAA,IACA9L,KAAKgS,QAAU,IAAItB,EAAe1Q,KAAKX,QAAQmT,QAASxS,KAAKX,QAAQoT,SAAUzS,KAAKR,cAG5FgB,WAAW,IAGnBK,QAAS,CACC6R,YADD,SACarT,GAAY,wKACpB,EAAK2S,QAAQW,8BADO,uBAENtT,EAAQuT,SAFF,UAE1B,EAAKT,OAFqB,OAG1B,EAAKC,aAAa5C,IAAMnQ,EAAQoT,SAChC,EAAKL,aAAa/D,IAAM,EAAK8D,OAAO,SACpC,EAAKC,aAAa/I,KAAOqH,EAAetO,iBACxC,EAAKgQ,aAAa9B,OAASjR,EAAQwT,SAAW,IAAM,IACpD,EAAKT,aAAavC,SAAW,EAAKmC,QAAQc,0BAC1C,EAAKV,aAAa7C,YAAclQ,EAAQ0T,iBACxC,EAAKX,aAAaC,eAAiBhT,EAAQgT,kBAEvC,EAAKL,QAAQgB,WAXW,CAAF,iCAYqB3T,EAAQ4T,4BAZ7B,QAYtB,EAAKb,aAAajD,iBAZI,sDAexB+D,cAhBD,SAgBeC,GAAmB,oLACX,EAAKnB,QAAQoB,kBADF,UAC7BC,EAD6B,OAG9BA,EAHgC,CAAF,oBAGb,qCAHa,uBAKD,EAAK/O,WAAW6O,EAAgB,WAL/B,cAK7BG,EAL6B,iBAMDrO,QAAQC,IAAI,CAC1C,EAAKqO,uBAAwB,EAAKC,qBAPH,eAM7BC,EAN6B,iBAUjB,EAAKzB,QAAQ0B,oBAAb,yBACXJ,GADW,eACaG,KAXI,WAU7BlP,EAV6B,OAc9BA,EAdgC,CAAF,qBAcnB,sCAdmB,+CAgBjCoP,mBAhCD,YAgCqC,6KAAfnQ,EAAe,EAAfA,MACvB,EAAK4O,aAAa5D,kBAAoBhL,EAEhCoQ,EAAc,EAAK5B,QAAQ6B,qBAC3BnS,EAAWC,eAAkB,EAAKyQ,aAAcwB,IAElD3Q,qBAAQvB,GAN4B,CAAF,yCAO3B,GAP2B,UASlC,UAAAA,EAAS,UAAT,UAAatE,SAAb,UAAwBsE,EAAS,UAAjC,QAAwB,EAAatE,QAAQC,MATX,2CAUjBqE,EAAS,UAVQ,aAUjB,EAAatE,QAAQC,MAAM,EAAK+U,cAVf,cAU5B0B,EAV4B,2BAW3BA,GAX2B,kCAa/B,GAb+B,+CAe1CjD,cA/CK,WA+CkB,IAATnM,EAAS,uDAAF,GACjB,OAAOmM,eAAcnM,IAEzBqP,mBAlDK,WAmDD,IAAMhW,EAAa,CACfiC,KAAKoS,aAAaE,mBAClBtS,KAAKoS,aAAavD,mBAClB7O,KAAKoS,aAAazD,qBAClB3O,KAAKoS,aAAaxD,qBAEtB5O,KAAKoS,aAAarE,MAAQhQ,EAAW4G,QACjC,SAACoJ,EAAOhQ,EAAsBiW,GAA9B,OACI/Q,qBAAQlF,GAAcgQ,EAAQiG,EAAW,IAC3C,GACNhU,KAAKoS,aAAa1D,mBAAqB3Q,EAAW4G,QAC9C,SAACC,EAAOC,GAAR,OAAgBD,EAAMI,OAAOH,KAAM,KAG3C0O,qBAjEK,WAkED,OAAOvT,KAAKgS,QAAQuB,qBAAqBvT,KAAKoS,aAAapE,eAE/DwF,iBApEK,WAqED,OAAOxT,KAAKgS,QAAQwB,iBAAiBxT,KAAKoS,aAAaG,WAE3D0B,oBAvEK,SAuEelG,GAAqD,WAAtCmG,EAAsC,uDAAnB,GAC5CN,EAAa5T,KAAKgS,QAAQmC,oCAEhC,OAAOnU,KAAKgS,QAAQoC,qBAAqBrG,GAAOhL,KAAI,SAAC+K,GACjD,IACIkB,EADAI,GAAW,EAEXL,EAAYmF,EAAmBjJ,SAAS6C,EAAQtQ,MACpD,EAAK4U,aAAa5D,kBAAoBV,EAAQtQ,KAE9C,IAAMkE,EAAWC,eAAkB,EAAKyQ,aAAcwB,GAEtD,IAAK3Q,qBAAQvB,GAAW,SACd2S,EAAiB3S,EAAS,GAChC,OAAI2S,QAAJ,IAAIA,GAAJ,UAAIA,EAAgBjX,eAApB,OAAI,EAAyB2R,YACzBA,GAAY,GAEhB,OAAIsF,QAAJ,IAAIA,GAAJ,UAAIA,EAAgBjX,eAApB,OAAI,EAAyBgS,WACzBA,GAAW,GAEfJ,EAAcqF,EAAerF,YAEjC,MAAO,CACHxL,MAAOsK,EAAQtQ,KACfoB,MAAOkP,EAAQwG,WACfvF,YACAK,WACAJ,mBAIZuF,YArGK,WAqGM,MACDX,EAAa5T,KAAKgS,QAAQwC,wBAC1B9S,EAAWC,eAAkB3B,KAAKoS,aAAcwB,GACtD5T,KAAKoS,aAAaG,UAAW,UAAA7Q,EAAS,UAAT,eAAaoM,UAAW,IAEzD2G,gBA1GK,WA0GU,MACLb,EAAa5T,KAAKgS,QAAQ0C,kCAC1BhT,EAAWC,eAAkB3B,KAAKoS,aAAcwB,GACtD5T,KAAKoS,aAAapE,cAAe,UAAAtM,EAAS,UAAT,eAAaoM,UAAW,IAE7D6G,gBA/GK,SA+GW3J,GACZ,IAAM4J,EAAY5J,EAAE6J,mBACpB,GAAID,EAAW,CACX,IAAME,EAAgBF,EAAUlQ,QAAO,SAACd,GACpC,OAAOA,EAAEJ,MAAM0I,MAAM,kBAAoBtI,EAAEmL,aAE/C,OAAO9L,qBAAQ6R,GAEnB,OAAO,GAEXC,iBAzHK,SAyHY/J,GACb,MAAI,wBAAyBA,IAClBA,EAAEgK,qBAAuD,QAAhChK,EAAEgK,oBAAoBpW,QAI9DqW,WA/HK,SA+HMjK,GAEP,QAAIhL,KAAK+U,iBAAiB/J,IAGnBhL,KAAKkS,sBAEhBgD,uBAtIK,WAsI8C,WAA5BnN,EAA4B,uDAAnB,UAC5B,MAAO,CACHH,GAAI,UACJG,WACAd,KAAMgB,OAAUkN,uBAChB1P,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IACvCoK,OAAQ,WACJ,EAAKX,kBACL,EAAKF,eAETpQ,QAAS,kBACL,CACIX,MAAO,YACP5E,MAAO,EAAKwT,aAAaG,SACzB9O,MAAO,CACHwD,KAAM,kBAGd,CACIzD,MAAO,4BACP5E,MAAO,EAAKwT,aAAapE,aACzBvK,MAAO,CACHwD,KAAM,mBAZT,sBAeF,EAAKmL,aAAa1D,mBAAmB3L,KAAI,SAACa,GAAD,MAAgB,CAAEJ,MAAOI,EAAGhF,MAAOgF,SAEnFuE,OAAQ,CACJkN,MAAO,qCACPC,iBAAkB,CACd,YAKhBC,YAzKK,WA0KD,MAAgD,QAAzC7E,EAAe8E,uBAE1BC,iBA5KK,WA4KW,WACZ,OACI,CACI7N,GAAI,mBACJG,SAAU,2BACVd,KAAMgB,OAAUyN,mBAChB3J,WAAY,SAACD,GAAD,OAAY6J,OAAWC,SAAS9J,IAC5CQ,gBAAiB,SAACvP,GAAD,MAAgB,CAC7ByG,MAAOzG,EAAEyG,MACT5E,MAAO7B,EAAE6B,QAEb8N,cAAe,SAACtN,EAAqB4L,GACjC,IAAIzG,EAAM,GAgBV,OAbI,EAAKgR,gBAAkB,EAAKR,iBAAiB/J,KAC7C,EAAKoH,aAAa,YAAc,MAChC7N,EAAIhD,KAAK,EAAKyQ,QAAQd,gBAAgB,sBAAuB,SAEjE3M,EAAMA,EAAIS,OAAO5F,EAAK2D,KAAI,SAAAhG,GACtB,IAAS6B,EAAiB7B,EAAjB6B,MAAO6E,EAAU1G,EAAV0G,MAEVoS,EAAuCpS,EAAMoS,OAInD,OAFA,EAAKzD,aAAayD,GAAU,UAAGjX,GAAQsN,MAAM,QAAU,MAAQ,KAExD,EAAK8F,QAAQd,gBAAgBzN,EAAMqK,QAASlP,OAEhD,CACH2F,MACAC,IAAK,YAGbL,QAAS,SAAC6G,GACN,GAAK/H,qBAAQ+H,EAAE8K,kBAER,CACH,IAAM3R,EAAU,GAsBhB,OApBK,EAAKoR,gBAAiB,EAAKR,iBAAiB/J,IAC7C7G,EAAQ5C,KAAK,CACTiC,MAAO,YACP5E,MAAO,GACP6E,MAAO,CACHQ,OAAQ,EAAKF,eACb+J,QAAS,sBACT+H,OAAQ,cAIpB1R,EAAQ5C,KAAK,CACTiC,MAAO,iBACP5E,MAAO,GACP6E,MAAO,CACHQ,OAAQ,EAAKF,eACb+J,QAAS,4BACT+H,OAAQ,mBAGT1R,EAxBP,OAAO6G,EAAE8K,kBA2BjBrQ,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAM,EAAKoH,aAAaC,iBAEnE,CACIzK,GAAI,uBACJG,SAAU,iBACVd,KAAMgB,OAAU8N,gBAChB5R,QAAS,WAAF,8CAAE,oHACc,EAAK9E,QAAQ2W,mBAD3B,cACD/R,EADC,OAELA,EAASA,EAAOlB,KAAI,SAAChG,GAAD,MAAa,CAC7BkZ,EAAGjZ,OAAQC,2BAA2BF,EAAEsM,MACxC6M,EAAGnZ,EAAEoZ,WAJJ,kBAME,CACH,CACI3S,MAAO,qBACP5E,MAAO,eACP6E,MAAO,CACHQ,SACAuL,IAAK,EAAKnQ,QAAQoT,SAClBpE,IAAK,EAAK8D,WAbjB,2CAAF,qDAAE,GAkBThK,OAAQ,CACJmN,iBAAkB,CACd,UAGR7P,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAM,EAAKiH,yBAEtD,CACIrK,GAAI,qBACJG,SAAU,qBACVd,KAAMgB,OAAUmO,mBAChBjS,QAAS,kBAAM,EAAK8P,oBAAoB,EAAG,EAAK7B,aAAaxD,sBAC7DyH,QAAS,SAACvK,GAAD,OAAe,EAAK6H,mBAAmB7H,IAChDY,cAAe,SAAC3P,GACZ,MAAO,CACHyH,IAAK,UACLD,IAAKxH,EAAEgG,KAAI,SAAAa,GAAC,OAAI,EAAKoO,QAAQsE,oBAAoB1S,EAAEJ,YAG3DqI,OAAQ,SAAC9O,GACL,EAAKqV,aAAaxD,oBAAsB7R,EAAEgG,KAAI,SAAAa,GAAC,OAAIA,EAAEJ,SACrD,EAAKuQ,sBAETwC,iBAAkB,WACd,EAAKnE,aAAaxD,oBAAsB,GACxC,EAAKmF,sBAETtO,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAM,EAAK2J,gBAAgB3J,KAEtE,CACIpD,GAAI,qBACJG,SAAU,qBACVd,KAAMgB,OAAUmO,mBAChBjS,QAAS,kBAAM,EAAK8P,oBAAoB,EAAG,EAAK7B,aAAazD,uBAC7D0H,QAAS,SAACvK,GAAD,OAAe,EAAK6H,mBAAmB7H,IAChDY,cAAe,SAAC3P,GACZ,MAAO,CACHyH,IAAK,UACLD,IAAKxH,EAAEgG,KAAI,SAAAa,GAAC,OAAI,EAAKoO,QAAQsE,oBAAoB1S,EAAEJ,YAG3DqI,OAAQ,SAAC9O,GACL,EAAKqV,aAAazD,qBAAuB5R,EAAEgG,KAAI,SAAAa,GAAC,OAAIA,EAAEJ,SACtD,EAAKuQ,sBAETwC,iBAAkB,WACd,EAAKnE,aAAazD,qBAAuB,GACzC,EAAKoF,sBAETtO,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAM,EAAK2J,gBAAgB3J,KAEtE,CACIpD,GAAI,qBACJG,SAAU,qBACVd,KAAMgB,OAAUmO,mBAChBjS,QAAS,kBAAM,EAAK8P,oBAAoB,EAAG,EAAK7B,aAAavD,qBAC7DwH,QAAS,SAACvK,GAAD,OAAe,EAAK6H,mBAAmB7H,IAChDY,cAAe,SAAC3P,GACZ,MAAO,CACHyH,IAAK,UACLD,IAAKxH,EAAEgG,KAAI,SAAAa,GAAC,OAAI,EAAKoO,QAAQsE,oBAAoB1S,EAAEJ,YAG3DqI,OAAQ,SAAC9O,GACL,EAAKqV,aAAavD,mBAAqB9R,EAAEgG,KAAI,SAAAa,GAAC,OAAIA,EAAEJ,SACpD,EAAKuQ,sBAETwC,iBAAkB,WACd,EAAKnE,aAAavD,mBAAqB,GACvC,EAAKkF,sBAETtO,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAM,EAAK2J,gBAAgB3J,KAEtE,CACIpD,GAAI,qBACJG,SAAU,qBACVd,KAAMgB,OAAUmO,mBAChBrK,WAAY,SAACY,GACT,GAAI1J,qBAAQ0J,IAAQ1J,qBAAQ,EAAKmP,aAAa1D,oBAC1C,MAAO,CAAC,iDAEhBvK,QAAS,kBAAM,EAAK8P,oBAAoB,EAAG,EAAK7B,aAAaE,qBAC7D+D,QAAS,SAACvK,GAAD,OAAe,EAAK6H,mBAAmB7H,IAChDY,cAAe,SAAC3P,GACZ,IAAMqC,EAAOrC,EAAEgG,KAAI,SAAAa,GAAC,OAAIA,EAAEJ,SAG1B,OAFA,EAAK4O,aAAaE,mBAAqBlT,EACvC,EAAK2U,qBACE,CACHvP,IAAK,UACLD,IAAKnF,EAAK2D,KAAI,SAAAa,GAAC,OAAI,EAAKoO,QAAQsE,oBAAoB1S,QAG5D6B,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,KAE3C,CACIpD,GAAI,gBACJG,SAAU,sCACVd,KAAMgB,OAAUK,UAChB7C,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IACvCe,WAAY,SAACY,GAAD,OAAcgJ,OAAWrO,SAASqF,IAC9CxI,QAAS,kBAAM,EAAKJ,iBAExB,CACI6D,GAAI,YACJG,SAAU,YACVd,KAAMgB,OAAUC,QAChBwE,cAAe,SAAC3P,GACZ,IAAM6B,EAAQ7B,EAAE6B,MAAM4D,WAChBwN,EAAWpR,EAAM4X,OAAO,GACxBC,EAAQxW,SAASrB,EAAM8X,UAAU,IACvC,MAAO,CACHlS,IAAK,UACLwL,WACAyG,QACAlS,IAAK,EAAKyN,QAAQ2E,iBACd,YAAaF,EAAOzG,KAIhCnE,OAAQ,SAAC9O,EAAQgM,EAAQiC,EAAQxD,GAC7B,MAA4BA,EAAa,aAAjCiP,EAAR,EAAQA,MAAOzG,EAAf,EAAeA,SACf,EAAKoC,aAAatC,IAAM2G,EACxB,EAAKrE,aAAarC,YAAcC,GAEpCuG,iBAAkB,WACd,EAAKnE,aAAatC,KAAO,EACzB,EAAKsC,aAAarC,YAAc,IAEpChE,WAAY,SAACY,GACT,IAAMiK,EAAQ,kBAAM,EAAK5E,QAAQ6E,gBAAgBlK,EAAI/N,QACrD,OAAO,EAAK4G,eAAe,CACvB,kBAAMmQ,OAAWrO,SAASqF,IAC1B,kBAAOiK,IAAoE,KAA1D,CAAC,2DAG1BzO,OAAQ,CACJC,eAAgB,CACZ5M,OACA,CACI,CAAC,UAAW,aAIxBiK,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAgC,QAA1BA,EAAE8L,cAAclY,SApOrE,sBAsOOmL,eAAmB,CAClBnC,GAAI,kBACJG,SAAU,cACVT,UAAU,EACVoC,QAAS,kBAAM,EAAKrK,QAAQiD,gBAC5BuH,QAAS,kBAAM,EAAKmI,QAAQ+E,WAC5BtR,UAAW,SAACuF,GAAD,OAAa,EAAKiK,WAAWjK,IAAgC,QAA1BA,EAAE8L,cAAclY,OAC9D6L,WAAY,CACRC,cAAc,GAElBkC,aAAc,SAACvD,EAAcwD,GACzB,MAAO,CACHxD,OACA7E,IAAK,UACLqI,aACAtI,IAAK,EAAKyN,QAAQgF,eAAe,qBAAsB3N,MAGhErJ,KAAKgS,QAAQ+E,YAxPpB,CAyPI,CACInP,GAAI,WACJG,SAAU,eACVd,KAAMgB,OAAUK,UAChBc,aAAc,kBAAMsH,EAAeuG,mBACnCvK,cAAe,gBAAGlJ,EAAH,EAAGA,MAAH,MAAwB,CACnCgB,IAAK,UACLD,IAAK,EAAKyN,QAAQkF,eAAe,qBAAsB1T,KAE3DuI,WAAY,SAACY,GAAD,OAAcgJ,OAAWrO,SAASqF,IAC9CxI,QAAS,SAACqI,GAAD,IAAI9H,EAAJ,uDAAW,GAAX,OAAkB,EAAKmM,cAAcnM,IAC9CyD,OAAQ,CACJgP,cAAc,EACdC,oBAAoB,GAExB3R,UAAW,SAACuF,GAAD,OAAY,EAAKiK,WAAWjK,IAAgC,QAA1BA,EAAE8L,cAAclY,cC3ejF,MAAM8G,EAAc,EAEL,U,8YCDR,SAAemL,IAAtB,+B,8DAAO,yHAA6BnM,EAA7B,+BAAoC,GAApC,SACsBkM,OAAgBC,cAAc,CAACrT,KAAMkH,IAD3D,cACG2S,EADH,yBAEIA,EAAW3S,QAAO,SAACsG,GAAD,OAAa/H,qBAAQ+H,MACzCjI,KAAI,SAACuU,GAAD,MAAoB,CACrB9T,MAAO8T,EAAS9Z,KAChBoB,MAAO0Y,EAASC,YAChB9T,MAAO6T,OANZ,2C,wBAUA,SAAeE,IAAtB,+B,8DAAO,yHAAgC9S,EAAhC,+BAAuC,GAAvC,SACsBkM,OAAgB6G,QAAQ,CAAC,YAAe/S,IAD9D,cACG2S,EADH,yBAEIA,EAAWtU,KAAI,SAACuU,GAAD,MAAoB,CAClC9T,MAAO8T,EACP1Y,MAAO0Y,OAJZ,2C,wBAQA,SAAeI,IAAtB,+B,8DAAO,yHAAgChT,EAAhC,+BAAuC,GAAvC,SACiBkM,OAAgBC,cAAc,CAC9CrT,KAAMkH,EACNF,IAAK,4BAHN,cACGmT,EADH,yBAMIA,EAAM5U,KAAI,SAAC6U,GAAD,MAAgB,CAC7BpU,MAAOoU,EAAKpa,KACZoB,MAAOgZ,EAAKpa,KACZiG,MAAOmU,OATR,2C,wBAaA,SAAeC,IAAtB,+B,8DAAO,oHACmBjH,OAAgBiH,uBADnC,cACGC,EADH,yBAEIA,EAAQ/U,KAAI,SAACgV,GAAD,MAAkB,CACjCvU,MAAOuU,EAAOva,KACdoB,MAAOmZ,EAAOva,KACdiG,MAAOsU,OALR,2C,wBASA,SAAeC,IAAtB,+B,8DAAO,oHACmBpH,OAAgBoH,aADnC,cACGC,EADH,yBAEIA,EAAQlV,KAAI,SAACmV,GAAD,MAAkB,CACjC1U,MAAO0U,EAAO1a,KACdoB,MAAOsZ,EAAOC,UACd1U,MAAOyU,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAA4BC,GAA5B,uGACqBzH,OAAgBwH,aAAaC,GADlD,cACGC,EADH,yBAEIA,EAAUvV,KAAI,SAACwV,GAAD,MAAoB,CACrC/U,MAAO+U,EAAS/a,KAChBoB,MAAO2Z,EAASC,YAChB/U,MAAO8U,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAAyCC,GAAzC,4GAA6Dlb,EAA7D,+BAAkE,GAAlE,SACeoT,OAAgB6H,0BAA0BC,EAAYlb,GADrE,cACGmb,EADH,yBAEIA,EAAI5V,KAAI,SAAC6V,GAAD,MAAc,CACzBpV,MAAOoV,EAAGpb,KACVoB,MAAOga,EAAGC,yBACVpV,MAAOmV,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAA2BC,GAA3B,4GAA2Dvb,EAA3D,+BAAgE,GAAhE,SACoBoT,OAAgBkI,YAAYC,EAAwBvb,GADxE,cACGwb,EADH,yBAEIA,EAASjW,KAAI,SAACkW,GAAD,MAAmB,CACnCzV,MAAOyV,EAAQzb,KACfoB,MAAOqa,EAAQC,WACfzV,MAAOwV,OALR,2C","file":"js/chunk-89cb263e.1b8a72aa.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = (v: Option) => {\n        const isEstimate = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = isEstimate ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return field.computeValue(fullDate, isEstimate)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = (val: Option) => {\n        const year = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return field.computeValue(fullDate, true)\n    }\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    ) \n\n    durationEstimate.computedValue = (val: Option) => {\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return field.computeValue(fullDate, true)\n    }\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA POLYMERASE CHAIN REACTION',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA POLYMERASE CHAIN REACTION\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 11,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            date(date: string) {\n                return date < '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}