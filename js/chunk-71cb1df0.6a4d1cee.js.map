{"version":3,"sources":["webpack:///./src/apps/CxCa/views/reports/pepfar/CCTypeOfTreatment.vue?8350","webpack:///./src/apps/CxCa/views/reports/pepfar/CCTypeOfTreatment.vue","webpack:///./src/apps/CxCa/views/reports/pepfar/CCTypeOfTreatment.vue?0345","webpack:///./src/apps/CxCa/services/reports/cxca_report_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","rows","fields","columns","period","onReportConfiguration","init","_","defineComponent","components","ReportTemplate","IonPage","mixins","ReportMixin","data","reportService","table","thTxt","created","this","getDateDurationFields","methods","config","CxCaReportService","setStartDate","start_date","setEndDate","end_date","getPepfarReport","buildRows","map","d","td","age_group","length","__exports__","endDate","startDate","date","Service","getSessionDate","programID","getProgramID","reportName","getReport","HisDate","toStandardHisDisplayFormat","url","params","getJson","buildRequest","payload","minDuration","quarters","year","getCurrentYear","i","push","name","start","end"],"mappings":"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","file":"js/chunk-71cb1df0.6a4d1cee.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        period: _ctx.period,\n        onReportConfiguration: _ctx.init\n      }, null, 8, [\"title\", \"rows\", \"fields\", \"columns\", \"period\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/views/reports/BaseTableReport.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport ReportMixin from '@/apps/ART/views/reports/ReportMixin.vue'\nimport { border } from '@/apps/OPD/utils/table'\nimport { IonPage } from \"@ionic/vue\";\nimport { CxCaReportService } from '@/apps/CxCa/services/reports/cxca_report_service'\nexport default defineComponent({\n\n  components: { ReportTemplate, IonPage },\n  mixins: [ReportMixin],\n  data: () => ({\n    title: 'CC Type of Treatment',\n    rows: [] as RowInterface[], \n    reportService: {} as any,\n    columns: [\n      [\n        table.thTxt('Fine Age'),\n        table.thTxt('CXCA_TX_Cryotherapy'),\n        table.thTxt('CXCA_TX_Thermocoagulation'),\n        table.thTxt('CXCA_TX_LEEP'),\n      ]\n    ] as ColumnInterface[][],\n  }),\n  created(){\n    this.fields = this.getDateDurationFields()\n  },\n  methods: {\n    async init(_: any, config: any){\n      this.reportService = new CxCaReportService()\n      this.reportService.setStartDate(config.start_date)\n      this.reportService.setEndDate(config.end_date)\n      const data = await this.reportService.getPepfarReport('CC Type of Treatment');\n      this.rows = this.buildRows(data)\n      \n    },\n    buildRows(data: any): RowInterface[] {\n      return data.map((d: any) => ([\n        table.td(d.age_group),\n        table.td(d['cryotherapy'].length),\n        table.td(d['thermocoagulation'].length),\n        table.td(d['leep'].length), \n\n      ]))\n    },\n  },\n})\n","import { render } from \"./CCTypeOfTreatment.vue?vue&type=template&id=ad2f49a6&ts=true\"\nimport script from \"./CCTypeOfTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CCTypeOfTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\n\n\nexport const AGE_GROUPS = [\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\n\nexport class CxCaReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPepfarReport(reportName: string) {\n        return this.getReport('pepfar_cxca', {'report_name': reportName})\n    }\n    getClinicReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    \n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n   \n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}