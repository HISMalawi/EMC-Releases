{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Adherence.vue?99ca","webpack:///./src/apps/ART/views/encounters/Adherence.vue","webpack:///./src/apps/ART/views/encounters/Adherence.vue?e98d","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?7f4b"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","fields","onFinishAction","onSubmit","cancelDestinationPath","cancelDestination","defineComponent","mixins","AdherenceMixinVue","watch","ready","handler","getAdherenceFields","immediate","methods","saveAdherence","nextTask","__exports__","AdherenceService","patientID","providerID","lastDrugs","lastReceiptDate","date","Date","this","setDate","getDate","d","HisDate","toStandardHisFormat","AppEncounterService","getJson","drugs","reduce","receiptDate","drug","order","start_date","htnDrugs","BPManagementService","htnDrugReferences","map","drug_id","filter","includes","isEmpty","orderId","pillCount","buildValueNumber","drugId","adherence","getConceptID","concept","getSessionDate","given","pills","expected","Math","round","equivalentDailyDose","startDate","frequency","timeUnit","daysGone","calcTimeElapsed","parseFloat","toString","date1","dayjs","diff","actual","exp","EncounterMixinVue","data","drugObs","askReasonForPoorAdherence","calculationAgreementObs","createEncounter","Promise","all","saveObservationList","obs","toastWarning","buildAdherenceReport","lastVisit","getReceiptDate","daysElapsed","timeElapse","toStandardHisDisplayFormat","rowColors","indexes","class","cellColors","columns","rows","forEach","index","formatFrequency","expectedPills","calcPillsExpected","calculateAdherence","quantity","pillsBrought","adherenceStatus","isAdherenceGood","unAccountedDoses","calculateUnaccountedOrMissed","push","name","equivalent_daily_dose","row","match","label","value","other","calculateExpected","checkDrugsBefore","id","helpText","type","FieldType","TT_ADHERENCE_INPUT","init","loadPreviousDrugs","condition","receivedDrugsBefore","validation","val","Validation","required","empty","i","some","Boolean","unload","buildAdherenceObs","order_id","buildPillCountObs","options","fdata","pills_brought","getLastDrugs","TT_TABLE_VIEWER","config","hiddenFooterBtns","TT_SELECT","buildValueCoded"],"mappings":"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","file":"js/chunk-242290d5.b68d47b3.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from 'vue'\nimport AdherenceMixinVue from './AdherenceMixin.vue'\nexport default defineComponent({\n    mixins: [AdherenceMixinVue],\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (ready) {\n                    this.fields = this.getAdherenceFields()\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit() {\n            await this.saveAdherence()\n            this.nextTask()\n        }\n    }\n})\n","import { render } from \"./Adherence.vue?vue&type=template&id=071c48e6&ts=true\"\nimport script from \"./Adherence.vue?vue&type=script&lang=ts\"\nexport * from \"./Adherence.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs() {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )      \n        if (drugs) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n               !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        return dayjs(this.date).diff(date1, timeUnit)\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs()\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}