{"version":3,"sources":["webpack:///./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","$event","DrugCmsService","Service","constructor","params","getJson","keyword","HisStandardForm","drugs","selectedDrugs","barcode","stockService","items","this","prepDrugs","f","postItems","toastSuccess","$router","push","toastDanger","getFields","id","helpText","FieldType","TT_SELECT","validation","val","Validation","options","label","value","condition","transfer_origination","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","TT_BARCODE","hiddenFooterBtns","onValue","async","TT_INFINITE_SCROLL_MULTIPLE_SELECT","requireNext","d","search","formatDrugs","unload","footerBtns","slot","onClick","allDrugs","getDrugs","pagenate","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","c","currentFieldContext","drugsToStr","map","b","join","drugsWithoutBatches","drug","entries","tins","expiry","batchNumber","every","partialBatches","e","score","some","isEmpty","partialDrugs","toastWarning","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","short_name","pack_size","toNumString","HisDate","toStandardHisDisplayFormat","other","formdata","location","transfer_location","forEach","el","element","drug_inventory_id","parseInt","date","code","listData","l","isChecked","created","StockService","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"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","file":"js/chunk-428a91f2.326d42cf.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.activeField=''))\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\nimport { toNumString } from \"@/utils/Strs\";\nimport { DrugCmsService } from \"@/services/drug_cms_service\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"transfer_origination\",\n          helpText: \"Select where stock came from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"DHA\",\n              value: \"DHA\",\n            },\n            {\n              label: \"Other location\",\n              value: \"Other location\",\n            },\n          ],\n        },\n        {\n          id: \"transfer_location\",\n          helpText: \"Location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.transfer_origination.value === \"Other location\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n          condition: (val: any) => val.transfer_origination.value === \"DHA\"\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (_: any, filter='a') => {\n            const d = await DrugCmsService.search(filter || \"a\");\n            this.drugs = this.formatDrugs(d)\n            return this.drugs\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: async () => {\n                  const allDrugs = await DrugCmsService.getDrugs({ pagenate: false})\n                  this.drugs = this.formatDrugs(allDrugs)\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                return score >= 1 && score <= 2\n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"adherence_report\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Batch number\",\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.short_name,\n          d.pack_size,\n          toNumString(d.tins),\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      const location = formdata.transfer_origination.value === \"DHA\" ? null : formdata.transfer_location.value;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          'location_id': location,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drug_inventory_id,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.pack_size) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n              'product_code': element.code,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs(drugs: Array<any>) {\n      return drugs.map((drug: any) => {\n        return {\n          label: `${drug.short_name} (${drug.code})`,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=e910cb12&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}