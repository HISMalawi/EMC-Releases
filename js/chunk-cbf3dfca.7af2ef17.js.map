{"version":3,"sources":["webpack:///./src/apps/RADIOLOGY/services/radiology_examination_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?c102","webpack:///./src/apps/RADIOLOGY/services/radiology_internal_sections_service.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?2064"],"names":["RadiologyExaminationService","patientID","providerID","AppEncounterService","getJson","this","params","postJson","accessionNumber","service","PrintoutService","printLbl","id","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","split","username","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","RadiologyInternalSectionService","Service","mixins","EncounterMixinVue","IonPage","examinationOptions","detailedExaminationOptions","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","getTestsOptions","getListOfRadiologyTests","concept_id","validateAmount","val","match","computedValues","createEncounter","saveObservationList","v","order","createOrder","getEncounterID","res","accession_number","printExamination","tests","selectedTest","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","buildValueCoded","encounterID","beforeNext","selectedExamID","f","list_of_radiology_test","buildValueText","field","PersonFieldHelper","getFacilityLocationField","referral_type","referralSections","getInternalSections","s","config","showKeyboard","footerBtns","onClick","c","toastWarning","filtered","some","toLowerCase","alertConfirmation","createInternalSection","listData","paying","TT_TEXT","payment_type","TT_NUMBER","receipt_number","buildValueNumber","invoice_number"],"mappings":"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","file":"js/chunk-cbf3dfca.7af2ef17.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { PrintoutService } from \"@/services/printout_service\"\n\nexport class RadiologyExaminationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 121, providerID) \n    }\n\n    \n    static getListOfRadiologyTests(id: string | number) {\n        return super.getJson('radiology_set', { id })\n    }\n    \n    getPatientExaminations() {\n        return AppEncounterService.getJson('radiology/examinations', {\n            'patient_id': this.patientID\n        })\n    }\n\n    createOrder(params: any) {\n        return AppEncounterService.postJson('orders/radiology', params)\n    }\n\n    printExamination(accessionNumber: string) {\n        const service = new PrintoutService()\n        return service.printLbl(`orders/radiology?accession_number=${accessionNumber}`)\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { Service } from \"@/services/service\"\n\nexport class RadiologyInternalSectionService extends Service {\n    constructor() {\n        super()\n    }\n\n    static getInternalSections() {\n        return super.getJson('internal_sections')\n    }\n\n    static createInternalSection(name: string) {\n        return super.postJson('internal_sections', { name })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            await this.service.saveObservationList((await this.resolveObs(computedValues)))\n            for(const v of Object.values(computedValues) as any) {\n                if (typeof v.order === 'function') {\n                    const res = await this.service.createOrder(v.order(this.service.getEncounterID()))\n                    if (typeof res === 'object' && res.accession_number) {\n                        this.service.printExamination(res.accession_number)\n                    }\n                }\n            }\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value),\n                        order: (encounterID: number) => {\n                            const data: any = {\n                                'encounter_id': encounterID,\n                                'concept_id': v.value\n                            } \n                            if (this.providerID != -1) {\n                                data['provider_id'] = this.providerID\n                            }\n                            return data\n                        }\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: s.name\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter)\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=7b7a8c9a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}