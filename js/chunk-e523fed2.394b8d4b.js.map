{"version":3,"sources":["webpack:///./src/apps/ART/services/reports/moh_cohort_service.ts","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/reports/pepfar/TxCurrMMD.vue"],"names":["CohortVar","MohCohortReportService","regenerate","this","programID","resourceId","ArtReportService","getJson","id","date","params","ajxGet","cohortUrl","name","quarter","startDate","endDate","cache","sessionStorage","getItem","MOH_CACHE","conf","JSON","parse","start_date","end_date","data","values","setItem","stringify","validations","callback","cachedValues","getCachedCohortValues","errors","Object","keys","reduce","key","indicator","find","validation","indicatorValue","contents","param","condition","check","parseInt","push","error","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","period","rows","fields","columns","reportPrefix","config","showIndex","validationErrors","showValidationStatus","showStatus","headerInfoList","onReportConfiguration","onPeriod","_","defineComponent","mixins","ReportMixin","components","ReportTemplate","cohort","totals","Set","table","thTxt","thNum","mohCohort","canValidate","watch","doIt","validateReport","created","getDateDurationFields","methods","clear","report","TxReportService","setStartDate","setEndDate","getDateIntervalPeriod","initArvRefillPeriod","setRows","setHeaderInfoList","getValues","patients","context","underThreeMonths","betweenThreeAndFiveMonths","overSixMonths","patientId","pDays","prescribed_days","add","drill","minAge","maxAge","males","females","i","AGE_GROUPS","group","min","max","split","res","getTxCurrMMDReport","td","label","value","size","other","onclick","runTableDrill","Array","from","p","s","validateIndicators","__exports__"],"mappings":"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","file":"js/chunk-e523fed2.394b8d4b.js","sourcesContent":["import { find } from \"lodash\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport enum CohortVar {\n    MOH_CACHE = 'mohCache'\n}\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport class MohCohortReportService extends ArtReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    private cohortUrl() {\n        return `programs/${this.programID}/reports/cohort`\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    getCohortDrillDown(resourceId: string) {\n        return ArtReportService.getJson('cohort_report_drill_down', {\n            id: resourceId,\n            date: this.date,\n            'program_id': this.programID\n        })\n    }\n\n    requestCohort(params: any) {\n        return ArtReportService.ajxGet(\n            this.cohortUrl(), params\n        )\n    }\n\n    qaurterRequestParams() {\n        return { \n            name: this.quarter, \n            regenerate: this.regenerate \n        }\n    }\n\n    datePeriodRequestParams() {\n        return {\n            name: `Cohort-${this.startDate}-${this.endDate}`,\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            regenerate: this.regenerate\n        }\n    }\n\n    getCachedCohortValues() {\n        const cache = sessionStorage.getItem(CohortVar.MOH_CACHE)\n        if (cache) {\n            const conf = JSON.parse(cache)\n            if (conf.start_date === this.startDate \n                && conf.end_date === this.endDate\n                || conf.quarter === this.quarter) {\n                return conf.data\n            }\n        }\n    }\n\n    cacheCohort(values: any) {\n        sessionStorage.setItem(\n            CohortVar.MOH_CACHE, \n            JSON.stringify({\n                'start_date': this.startDate,\n                'end_date': this.endDate,\n                'quarter': this.quarter,\n                'data': values\n        }))\n    }\n\n    validateIndicators(validations: Record<string, CohortValidationInterface>, callback: Function) {\n        const cachedValues = this.getCachedCohortValues()\n        if (cachedValues) {\n            const errors = Object.keys(validations)\n                .reduce((errors: Array<any>, key: string) => {\n                    const indicator: any = find(cachedValues, { name: key })\n                    const validation: any = validations[key]\n                    const indicatorValue: any = indicator ? indicator.contents : null\n                    const param = validation.param as number\n                    const condition = validation.check(parseInt(indicatorValue), param)\n                    if (condition) errors.push(\n                        validation.error(indicatorValue, param)\n                    )\n                    return errors\n                }, [])\n            return callback(errors)\n        }\n        return -1\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        period: _ctx.period,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        reportPrefix: \"PEPFAR\",\n        config: {\n                showIndex: true\n            },\n        validationErrors: _ctx.errors,\n        showValidationStatus: _ctx.showStatus,\n        headerInfoList: _ctx.headerInfoList,\n        onReportConfiguration: _ctx.onPeriod\n      }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"validationErrors\", \"showValidationStatus\", \"headerInfoList\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { TxReportService } from '@/apps/ART/services/reports/tx_report_service'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'TX Curr MMD Report',\n        cohort: {} as any,\n        rows: [] as Array<any>,\n        totals: new Set(),\n        errors: [] as string[],\n        showStatus: false as boolean,\n        columns:  [\n            [\n                table.thTxt('Age group'),\n                table.thTxt('Gender'),\n                table.thNum('# of clients on <3 months of ARVs'),\n                table.thNum('# of clients on 3 - 5 months of ARVs'),\n                table.thNum('# of clients on >= 6 months of ARVs')\n            ]\n        ],\n        headerInfoList: [] as Array<Option>,\n        mohCohort: {} as any,\n        canValidate: false as boolean\n    }),\n    watch: {\n        async canValidate(doIt: boolean) {\n            if (doIt) await this.validateReport()\n        }\n    },\n    created() {\n        this.fields = this.getDateDurationFields()\n    },\n    methods: {\n        async onPeriod(_: any, config: any) {\n            this.canValidate = false\n            this.totals.clear()\n            this.errors = []\n            this.showStatus = false\n            this.rows = []\n            this.report = new TxReportService()\n            this.mohCohort = new MohCohortReportService()\n            this.mohCohort.setStartDate(config.start_date)\n            this.mohCohort.setEndDate(config.end_date)\n            this.report.setStartDate(config.start_date)\n            this.report.setEndDate(config.end_date)\n            this.period = this.report.getDateIntervalPeriod()\n            this.report.initArvRefillPeriod(true)\n            await this.setRows()\n            this.canValidate = true\n            this.showStatus = true\n            this.setHeaderInfoList()\n        },\n        getValues(patients: Record<string, Array<any>>, context: string) {\n            const underThreeMonths: Array<any> = []\n            const betweenThreeAndFiveMonths: Array<any> = []\n            const overSixMonths: Array<any> = []\n\n            for (const patientId in patients) {\n                const data: any = patients[patientId]\n                const pDays = data.prescribed_days\n                this.totals.add(patientId)\n\n                if(pDays < 90) {\n                    underThreeMonths.push(patientId)\n                }\n\n                if (pDays >= 90 && pDays <= 150) {\n                    betweenThreeAndFiveMonths.push(patientId)\n                }\n\n                if (pDays > 150) {\n                    overSixMonths.push(patientId)\n                }\n            }\n            return [\n                this.drill(underThreeMonths, `# of clients on < 3 months of ARVs (${context})`),\n                this.drill(betweenThreeAndFiveMonths, `# of clients on 3 - 5 months of ARVs (${context})`),\n                this.drill(overSixMonths, `# of clients on  >= 6 months of ARVs (${context})`)\n            ]\n        },\n        async setRows() {\n            let minAge = 0\n            let maxAge = 0\n            const males = []\n            const females = []\n\n            for(const i in AGE_GROUPS) {\n                const group = AGE_GROUPS[i]\n                if (group === '<1 year') {\n                    minAge = 0\n                    maxAge = 0\n                } else if (group === '90 plus years') {\n                    minAge = 90\n                    maxAge = 1000\n                } else {\n                    const [min, max] = group.split('-')\n                    minAge = parseInt(min)\n                    maxAge = parseInt(max)\n                }\n                const res = await this.report.getTxCurrMMDReport(minAge, maxAge)\n                this.report.initArvRefillPeriod(false)\n                if (res) {\n                    females.push([\n                        table.td(group),\n                        table.td('Female'),\n                        ...this.getValues(res['Female'], `${group} Female`)\n                    ])\n                    males.push([\n                        table.td(group),\n                        table.td('Male'),\n                        ...this.getValues(res['Male'], `${group} Male`)\n                    ])\n                } else {\n                    females.push([\n                        table.td(group), \n                        table.td('Female'), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0)\n                    ])\n                    males.push([\n                        table.td(group), \n                        table.td('Male'), \n                        table.td(0), \n                        table.td(0), \n                        table.td(0)\n                    ])\n                }\n                this.rows = [...females, ...males]\n            }\n        },\n        setHeaderInfoList() {\n            this.headerInfoList = [\n                { \n                    label: 'Total clients', \n                    value: this.totals.size,\n                    other: {\n                        onclick: () => this.runTableDrill(Array.from(this.totals), 'Total Clients')\n                    }\n                }\n            ]\n        },\n        validateReport() {\n            const validations: any = {\n                'total_alive_and_on_art': {\n                    param: this.totals.size,\n                    check: (i: number, p: number) => p > i,\n                    error: (i: number, p: number) => `\n                        MoH cohort Alive and on ART clients <b>(${i})</b> is not\n                        matching with total TX MMD clients <b>(${p})</b>.\n                    `\n                }\n            }\n            const s = this.mohCohort.validateIndicators(validations, (errors: string[]) => this.errors = errors)\n            if (s === -1) this.errors = ['Report not validated. Run the MoH cohort report for similar reporting period and then run this report']\n        }\n    }\n})\n","import { render } from \"./TxCurrMMD.vue?vue&type=template&id=61303cd6&ts=true\"\nimport script from \"./TxCurrMMD.vue?vue&type=script&lang=ts\"\nexport * from \"./TxCurrMMD.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}