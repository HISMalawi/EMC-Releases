System.register(["./index-legacy-2bdI6aeZ.js","./dynamic-import-helper-legacy-BhGHTWZn.js","./HisStandardForm-legacy-lMXEnQxA.js","./HisKeypad-legacy-u28jWxW5.js","./TouchScreenForm-legacy-H8a4O6o5.js","./ToolbarMediumCard-legacy-EA1aA9jU.js","./Transformers-legacy-PbfCTy2a.js","./ViewPort-legacy-AULqwBLs.js","./BaseKeyboard-legacy-EPPfL8N-.js","./KbLayouts-legacy-NQmKRJpJ.js","./KbHandler-legacy-YpKYWvgQ.js","./overlays-33ae3ea0-legacy-mcssBBSM.js"],(function(i,e){"use strict";var t,n,a,s,r,l,o,m,c,d,u,g,h,f,p,v,b,N,F,y,_,D;return{setters:[i=>{t=i.S,n=i.cl,a=i.P,s=i.ae,r=i.d,l=i.R,o=i.t,m=i.aN,c=i.ab,d=i.q,u=i.O,g=i.H,h=i.V,f=i.n,p=i.p,v=i._,b=i.r,N=i.o,F=i.c},i=>{y=i.F},i=>{_=i.H},i=>{D=i.H},null,null,null,null,null,null,null,null],execute:function(){class e extends t{patientID;activePrefix;dormantPrefix;constructor(){super(),this.patientID=0,this.activePrefix="",this.dormantPrefix=""}getActivePrx(){return this.activePrefix}getDormantPrx(){return this.dormantPrefix}getPatientID(){return this.patientID}setPatientID(i){this.patientID=i}formatNumber(i){const e=i.search(this.activePrefix)>=0?this.activePrefix:i.search(this.dormantPrefix)>=0?this.dormantPrefix:"";return e?i.substring(e.length,i.length):i}async loadFilingPrefix(){const i=await n.filingNumberPrefix();if(i){const[e,t]=i.split(",");this.activePrefix=e,this.dormantPrefix=t}}isActiveFilingNum(i){return!!i.match(new RegExp(this.activePrefix,"i"))}isDormantFilingNum(i){return!!i.match(new RegExp(this.dormantPrefix,"i"))}async assignFilingNumber(){return t.postJson(`patients/${this.patientID}/filing_number`,{})}async getFilingNumber(i){const e=`${this.activePrefix}${i}`,n=await t.getJson("search/patients/by_identifier",{type_id:17,identifier:e});return n?n.map((i=>{const t=new a(i);return{identifier:e,patient_id:t.getID(),given_name:t.getGivenName(),family_name:t.getFamilyName(),state:"N/A",appointment_date:""}})):[]}archiveFilingNumber(){return t.getJson("archive_active_filing_number",{patient_id:this.patientID})}archivePatient(i,e){return t.postJson("swap_active_number",{primary_patient_id:this.patientID,secondary_patient_id:i,identifier:e})}getArchivingCandidates(i=0,e=10){return t.getJson("archiving_candidates",{page:i,page_size:e})}getPastFilingNumbers(){return t.getJson(`patients/${this.patientID}/past_filing_numbers`)}printFilingNumber(){return(new s).printLbl(`patients/${this.patientID}/labels/filing_number`)}}const w=r({components:{HisStandardForm:_},data:()=>({service:{},patient:{},fieldComponent:"",fields:[],nextWorkflowRouteName:"",filingNumberAssignment:{}}),watch:{$route:{async handler({query:i,params:t}){if(t&&t.patient_id&&(this.service=new e,this.service.setPatientID(t.patient_id),this.patient=await this.getPatient(t.patient_id),await this.service.loadFilingPrefix()),i){if(this.fields=[this.getFilingNumberField(),this.getCandidateSelectionField(),this.getFilingNumberHistoryField()],"true"===i.archive)return void(await this.archiveFilingNumber());"true"===i.assign&&await this.onAssignFilingNumber(),"true"===i.trail&&(this.fieldComponent="view_filing_history"),i.next_workflow_task&&(this.nextWorkflowRouteName=i.next_workflow_task)}},immediate:!0,deep:!0}},methods:{toFID(i){return this.service.formatNumber(i)},async onAssignFilingNumber(){const i=await this.newFilingNumber();i?(this.filingNumberAssignment=i,this.fieldComponent="filing_number_management",l.invalidate("ACTIVE_PATIENT")):(this.fieldComponent="select_candidate_to_swap",o("Out of filing numbers, Please select eligible candidate"))},async newFilingNumber(){const i={primary:{label:"Dormant → Active",value:this.patient.name,other:{activeNumber:this.patient.filingID?this.toFID(this.patient.filingID):"N/A",dormantNumber:"N/A"}},archived:{label:"Active → Dormant",value:"N/A",other:{activeNumber:"N/A",dormantNumber:"N/A"}}};if(this.service.isActiveFilingNum(this.patient.filingID))return i;await this.presentLoading();const e=await this.service.assignFilingNumber();if(m.dismiss(),!c.isEmpty(e)){if(i.primary.other={activeNumber:this.toFID(e.new_identifier.identifier),dormantNumber:this.service.isDormantFilingNum(this.patient.filingID)?this.toFID(this.patient.filingID):"N/A"},!c.isEmpty(e.archived_identifier)){const t=await this.getPatient(e.archived_identifier.patient_id);i.archived={label:"Active → Dormant",value:t.name,other:{activeNumber:this.toFID(e.archived_identifier.identifier),dormantNumber:this.toFID(e.new_identifier.identifier)}}}return i}},async swapExistingFilingNumbers(i){const e=await this.service.archivePatient(i.patient_id,i.identifier);if(e)return{primary:{label:"Dormant → Active",value:this.patient.name,other:{activeNumber:this.toFID(e.active_number),dormantNumber:this.toFID(this.patient.filingID)||"N/A"}},archived:{label:"Active → Dormant",value:`${i.given_name} ${i.family_name}`,other:{patientID:i.patient_id,activeNumber:this.toFID(e.dormant_number),dormantNumber:this.toFID(e.active_number)}}}},async presentLoading(i="Please wait..."){const e=await m.create({message:i,backdropDismiss:!1});await e.present()},async getPatient(i){const e=await a.findByID(i);if(e){const i=new a(e);return{id:i.getID(),filingID:i.getFilingNumber(),name:`${i.getGivenName()} ${i.getFamilyName()}`}}return{}},async archiveFilingNumber(){await this.presentLoading("Archiving filing number");try{await this.service.archiveFilingNumber(),await this.service.printFilingNumber(),l.invalidate("ACTIVE_PATIENT")}catch(i){d(`${i}`)}await m.dismiss(),this.$router.back()},async filingNumberSearchKeypad(){const i=await u.create({component:D,backdropDismiss:!1,cssClass:"keypad-modal",componentProps:{title:"Find Active number",strictNumbers:!1,onKeyPress:()=>{}}});await i.present();const{data:e}=await i.onDidDismiss();return e},async getArchivingCandidates(i=0){const e=await this.service.getArchivingCandidates(i);return this.formatCandidateOptions(e)},formatCandidateOptions(i){return i.map((i=>({label:`${i.given_name} ${i.family_name} (${i.state})`,value:i.identifier,other:{data:i,list:[{label:"Filing #",value:this.toFID(i.identifier),style:{color:"green",fontWeight:"bold"}},{label:"Given name",value:i.given_name},{label:"Family name",value:i.family_name},{label:"Outcome",value:i.state.match(/trans/i)?"TO":i.state.match(/stop/i)?"Tx stopped":i.state},{label:"LAD",value:g.toStandardHisDisplayFormat(i.appointment_date)}]}})))},getFilingNumberHistoryField(){return{id:"view_filing_history",type:y.TT_TABLE_VIEWER,helpText:"Filing Number Trail",condition:()=>!1,options:async()=>[{label:"Filing Number Trail",value:"Trail",other:{columns:["Status","Filing #","Date Created","Date voided"],rows:(await this.service.getPastFilingNumbers()).map((i=>{const e=0===i.voided;return[e?"Active":"Voided",this.toFID(i.identifier),g.toStandardHisDisplayFormat(i.date_created),e?"N/A":g.toStandardHisDisplayFormat(i.date_voided)]}))}}],config:{toolbarInfo:[{label:"Current filing #",value:this.toFID(this.patient.filingID)},{label:"Status",value:this.service.isActiveFilingNum(this.patient.filingID)?"Active":this.service.isDormantFilingNum(this.patient.filingID)?"Dormant":"N/A"}],hiddenFooterBtns:["Clear","Next","Back","Finish"],footerBtns:[{name:"Get filing #",slot:"end",state:{visible:{default:()=>this.service.isDormantFilingNum(this.patient.filingID)}},onClick:async()=>await this.onAssignFilingNumber()}]}}},getCandidateSelectionField(){let i={},e=0,t="",n=[];return{id:"select_candidate_to_swap",type:y.TT_CARD_SELECTOR,helpText:"Filing Number (Archive)",condition:()=>!1,validation:i=>h.required(i),onload:e=>i=e,onValue:async i=>{if(i&&await f(`Do you want to archive ${i.value}`)){const e=await this.swapExistingFilingNumbers(i.other.data);if(e)return this.filingNumberAssignment=e,this.fieldComponent="filing_number_management",!0}return!1},options:()=>this.getArchivingCandidates(),config:{hiddenFooterBtns:["Clear","Back","Finish","Next"],footerBtns:[{name:"Reset",slot:"end",color:"warning",state:{visible:{default:()=>!!t}},onClick:()=>{t="",i.listData=n,n=[]}},{name:"Specify",slot:"end",color:"success",onClick:async()=>{if(t=await this.filingNumberSearchKeypad(),t){const e=await this.service.getFilingNumber(t);n=[...i.listData],i.listData=this.formatCandidateOptions(e)}}},{name:"Previous batch",slot:"end",state:{visible:{default:()=>!t},disabled:{default:()=>e<=0}},onClick:async()=>{e-=1,i.listData=await this.getArchivingCandidates(e)}},{name:"Next batch",slot:"end",state:{visible:{default:()=>!t},disabled:{default:()=>i.listData&&i.listData.length<=1}},onClick:async()=>{e+=1,i.listData=await this.getArchivingCandidates(e)}}]}}},getFilingNumberField(){return{id:"filing_number_management",type:y.TT_FILING_NUMBER_VIEW,helpText:"Filing Number Management",onload:async()=>await this.service.printFilingNumber(),condition:()=>!1,options:()=>[this.filingNumberAssignment.primary,this.filingNumberAssignment.archived],config:{hiddenFooterBtns:["Cancel","Clear","Next"],footerBtns:[{name:"Print #",slot:"start",onClick:async()=>this.service.printFilingNumber()},{name:"Print Dormant#",slot:"start",state:{visible:{default:()=>!!this.filingNumberAssignment?.archived?.other?.patientID}},onClick:async()=>{const i=new e;i.setPatientID(this.filingNumberAssignment.archived.other.patientID),await i.printFilingNumber()}},{name:"Continue",color:"success",slot:"end",onClick:()=>p(this.patient.id,this.$router,this.$route)}]}}}}});i("default",v(w,[["render",function(i,e,t,n,a,s){const r=b("his-standard-form");return N(),F(r,{skipSummary:!0,activeField:i.fieldComponent,onOnIndex:e[0]||(e[0]=e=>i.fieldComponent=""),fields:i.fields},null,8,["activeField","fields"])}]]))}}}));
