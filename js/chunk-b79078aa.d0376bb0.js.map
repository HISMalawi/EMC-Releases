{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointment","watch","ready","handler","this","AppointmentService","patientID","providerID","getAppointmentField","immediate","methods","_","computedData","createEncounter","saveObservationList","resolveObs","printer","PatientPrintoutService","appsThatDoNotPrint","includes","App","getActiveApp","applicationName","printVisitSummaryLbl","nextTask","d","date","HisDate","toStandardHisDisplayFormat","exists","strOne","strTwo","RegExp","test","clinicDays","clinicHolidays","appointmentLimit","nextAppointment","drugRunoutDate","dateAppointments","weekDays","id","helpText","type","FieldType","TT_DATE_PICKER","init","async","res","getNextAppointment","appointment_date","drugs_run_out_date","e","console","warn","delayPromise","alertConfirmation","gotoPatientDashboard","limitRes","ART_GLOBAL_PROP","parseInt","onValue","undefined","getDailiyAppointments","Array","isArray","length","header","cancelBtnLabel","confirmBtnLabel","isEmpty","patient","getAge","adultClinicDays","peadsClinicDays","dayjs","day","validation","val","Validation","required","defaultValue","computedValue","buildValueDate","config","hiddenFooterBtns","minDate","maxDate","supValue","infoItems","label","value","__exports__","AppEncounterService","constructor","super","programID","getProgramID","getJson","paginate"],"mappings":"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","file":"js/chunk-b79078aa.d0376bb0.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport ART_GLOBAL_PROP from \"@/apps/ART/art_global_props\"\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointment: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.fields = [\n            this.getAppointmentField()\n          ]\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.appointment.createEncounter()\n      await this.appointment.saveObservationList(\n        (await this.resolveObs(computedData))\n      )\n      const printer = new PatientPrintoutService(this.patientID);\n      // TODO: remove the program checks here\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      if(!appsThatDoNotPrint.includes(`${App.getActiveApp()?.applicationName}`)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    getAppointmentField(): Field {\n      const d = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n      const exists = (strOne: string, strTwo: string) => new RegExp(strOne, 'i').test(`${strTwo}`)\n      let clinicDays = ''\n      let clinicHolidays = ''\n      let appointmentLimit = -1\n      let nextAppointment = this.appointment.date\n      let drugRunoutDate: string | null = null\n      const dateAppointments: Record<string, number> = {}\n      const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n      return {\n        id: \"set_appointment\",\n        helpText: \"Appointments booking\",\n        type: FieldType.TT_DATE_PICKER,\n        init: async () => {\n          try {\n            const res = await this.appointment.getNextAppointment()\n            nextAppointment = res.appointment_date\n            drugRunoutDate = res.drugs_run_out_date\n          } catch(e) {\n            console.warn(e)\n            await delayPromise(400)\n            if (!(await alertConfirmation('Next appointment/drug-runout date is not available, do you want to proceed anyway?'))) {\n              this.gotoPatientDashboard()\n              return true\n            }\n          }\n          const limitRes = (await ART_GLOBAL_PROP.appointmentLimit());\n          appointmentLimit = limitRes ? parseInt(limitRes) : 0\n          return true\n        },\n        onValue: async (date: string) => {\n          if (dateAppointments[date] === undefined) {\n            const res = await AppointmentService.getDailiyAppointments(date)\n            dateAppointments[date] = Array.isArray(res) ? res.length : 0\n          }\n          if (appointmentLimit >= 1 && dateAppointments[date] >= appointmentLimit) {\n            if((await alertConfirmation(\n              `${dateAppointments[date]} clients were booked on ${d(date)}`, \n              {\n                header: `APPOINTMENT LIMIT (${appointmentLimit}) REACHED`,\n                cancelBtnLabel: \"Proceed\",\n                confirmBtnLabel: \"New date\"\n              }\n            ))) return false;\n          }\n          // Check clinic holidays\n          if (isEmpty(clinicHolidays)) {\n            clinicHolidays = await ART_GLOBAL_PROP.clinicHolidays()\n          }\n          if(exists(date, clinicHolidays)) {\n            if (!(await alertConfirmation(`${d(date)} is a clinic holiday, do you want to set an appointment?`))) \n              return false;\n          }\n          //Check clinic days\n          if (isEmpty(clinicDays)) {\n            clinicDays = this.patient.getAge() >= 18\n              ? (await ART_GLOBAL_PROP.adultClinicDays())\n              : (await ART_GLOBAL_PROP.peadsClinicDays())\n          }\n          if(!exists(weekDays[dayjs(date).day()], clinicDays)){\n            if(!(await alertConfirmation(`${d(date)} is not a clinic day. Do you want to proceed with this date?`))) \n              return false;\n          }\n          return true\n        },\n        validation: (val: any) => Validation.required(val),\n        defaultValue: () => nextAppointment,\n        computedValue: (date: string) => {\n          return [\n            this.appointment.buildValueDate('Appointment date', date),\n            this.appointment.buildValueDate('Estimated date', nextAppointment)\n          ]\n        },\n        config: {\n          hiddenFooterBtns: [\n            'Clear'\n          ],\n          minDate: () => this.appointment.date,\n          maxDate: () => drugRunoutDate,\n          supValue: (date: string) => `${dateAppointments[date]}`,\n          infoItems: (date: string) => {\n            return [\n              { \n                label: 'Medication Run out Date',\n                value: drugRunoutDate ? d(drugRunoutDate) : 'Not available'\n              },\n              {\n                label: 'User set appointment date',\n                value: d(date)\n              },\n              {\n                label: 'Appointments',\n                value: dateAppointments[date]\n              },\n              {\n                label: 'Appointment limit (per/day)',\n                value: appointmentLimit\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=746dc022&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}"],"sourceRoot":""}