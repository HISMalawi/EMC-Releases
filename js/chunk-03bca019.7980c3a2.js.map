{"version":3,"sources":["webpack:///./src/views/GuardianRegistration.vue?1a99","webpack:///./src/services/relations_service.ts","webpack:///./src/views/GuardianRegistration.vue","webpack:///./src/views/GuardianRegistration.vue?f058","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","cancelDestinationPath","patientData","id","RelationsService","patientID","relationID","reason","Service","void","guardianID","curRelationID","newRelationTypeID","voidRelation","createRelation","patientA","patientB","relationType","defineComponent","components","HisStandardForm","data","guardianData","fieldAction","form","redirectURL","currentAddressAttributes","homeAddressAttributes","watch","handler","params","query","patient_id","Patientservice","findByID","patient","PersonFieldHelper","mapPersonData","person","edit_guardian","getFields","source","immediate","deep","methods","push","this","guardianSelection","guardianIndex","scanGuardian","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","relationsField","computedData","isEditMode","reg","PatientRegistrationService","setPersonID","updatePerson","PersonField","resolvePerson","Object","keys","forEach","i","date","relation","amendRelation","relationship_id","relations","other","relationship_type_id","isSameAsPatient","toastWarning","isRegistrationMode","guardian","registerGuardian","getPersonID","$router","name","$route","nextTask","isSearchMode","includes","canEdit","groups","defaultCondition","mandatoryCondition","birthdate","gender","HisDate","toStandardHisDisplayFormat","birth_date","given_name","family_name","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","validation","v","Validation","required","options","RelationshipService","getRelationships","relationship","isEmpty","map","r","label","b_is_to_a","value","person_id","details","delayPromise","infoActionSheet","slot","color","action","back","config","footerBtns","onClick","getDefaultVal","fieldID","e","TT_TABLE_VIEWER","f","select_guardian","editButton","attribute","rows","cell_phone_number","home_district","home_traditional_authority","home_village","current_district","current_traditional_authority","landmark","overrideDefaultFooterBtns","nextBtn","popVoidReason","hiddenFooterBtns","getGivenNameField","defaultValue","getFamilyNameField","getGenderField","dob","getDobConfig","generateDateFields","home","getHomeRegionField","district","getHomeDistrictField","ta","getHomeTaField","home_region","match","village","getHomeVillageField","region","getCurrentRegionField","currentDistrict","getCurrentDistrictField","currentTA","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","landmarks","getLandmarkFields","proxyID","TT_RELATION_SELECTION","val","onload","context","cdata","getRelations","relationships","description","TT_BARCODE","requireNext","onValue","findByNpid","searchResults","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","search","patients","item","getPersonAttributeOptions","state","disabled","default","_","results","__exports__","PersonAttributeService","constructor","super","attributes","postJson","personId","personID","personAttributes","createPerson","createPersonAttributes","createPatient","printPatient","PersonService","update","create","ProgramService","index","PatientPrintoutService","printNidLbl","callback","size","optionsActionSheet","role","modal","selection"],"mappings":"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","file":"js/chunk-03bca019.7980c3a2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    cancelDestinationPath: `/patient/dashboard/${_ctx.patientData.id}`\n  }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { Service } from \"./service\";\n\nexport class RelationsService extends Service {\n    constructor() {\n        super()\n    }\n\n    static voidRelation(patientID: number, relationID: number, reason: string) {\n\t\treturn Service.void(`people/${patientID}/relationships/${relationID}`, { reason })\n\t}\n\n    static async amendRelation(patientID: number, guardianID: number, curRelationID: number, newRelationTypeID: number) {\n        await RelationsService.voidRelation(patientID, curRelationID,\n            'Updating guardian relationship'\n        )\n        return RelationsService.createRelation(\n            patientID, guardianID, newRelationTypeID\n        )\n    }\n\n    static getRelations() {\n        return super.getJson('types/relationships')\n    }\n\n    static createRelation(patientA: number, patientB: number, relationType: number) {\n        return super.postJson(`people/${patientA}/relationships`, {\n            'relationship_type_id': relationType,\n            'relation_id': patientB\n        })\n    }\n}\n","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { RelationsService } from \"@/services/relations_service\"\nimport { isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { RelationshipService } from \"@/services/relationship_service\";\nimport PersonFieldHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    patientData: {} as any,\n    guardianData: {} as any,\n    fieldAction: '' as 'Scan' | 'Search' | 'Registration' | 'edit',\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    form: {} as Record<string, Option> | Record<string, null>,\n    redirectURL: '' as string,\n    activeField: '' as string,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[]\n  }),\n  watch: {\n    '$route': {\n        async handler({params, query}: any) {\n            if (params.patient_id) {\n                const patient = await Patientservice.findByID(params.patient_id)\n                if (patient) {\n                    this.patientData = PersonFieldHelper.mapPersonData(patient.person)\n                    if (query.edit_guardian) {\n                        this.fieldAction = 'edit'\n                    }\n                    this.fields = this.getFields()\n                }\n            }\n            if(query.source) this.redirectURL = query.source\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.guardianSelection())\n        fields.push(this.guardianIndex())\n        fields.push(this.scanGuardian())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.relationsField())\n        return fields\n    },\n    async onFinish(form: any, computedData: any) {\n        if (this.isEditMode()) {\n            if (this.activeField != 'relations') {\n                const reg = new PatientRegistrationService()\n                reg.setPersonID(this.guardianData.id)\n                await reg.updatePerson(PersonField.resolvePerson(computedData))\n                // Patch updated values\n                Object.keys(computedData).forEach((i: string) => {\n                    if (i in this.guardianData) {\n                        this.guardianData[i] = computedData[i]?.date || computedData[i].person\n                    }\n                })\n            } else {\n                if (this.guardianData?.relation) {\n                    const relation = await RelationsService.amendRelation(\n                        this.patientData.id,\n                        this.guardianData.id,\n                        this.guardianData.relation.relationship_id,\n                        form.relations.other.relationship_type_id\n                    )\n                    if (relation) {\n                        this.guardianData.relation = relation\n                    }\n                }\n            }\n            this.fieldComponent = 'guardian_index'\n        } else {\n            if(this.isSameAsPatient(computedData)) {\n                toastWarning(\"Guardian cannot be the same patient\")\n            } else {\n                let guardianID = -1\n                if (this.isRegistrationMode()) {\n                    const guardian: any = new PatientRegistrationService()\n                    await guardian.registerGuardian(PersonField.resolvePerson(computedData))\n                    guardianID = guardian.getPersonID()\n                } else {\n                    guardianID = this.guardianData.id\n                }\n                await RelationsService.createRelation(\n                    this.patientData.id, guardianID, form.relations.other.relationship_type_id\n                )\n                if(this.redirectURL) this.$router.push({name: this.redirectURL})\n                else if (this.$route.query.edit_guardian) this.fieldComponent = 'select_guardian'\n                else await nextTask(this.patientData.id, this.$router, this.$route)\n            }   \n        }\n    },\n    isEditMode() {\n        return this.fieldAction === 'edit'\n    },\n    isSearchMode() {\n        return ['Search', 'Registration'].includes(this.fieldAction)\n    },\n    isRegistrationMode() {\n        return this.fieldAction === 'Registration'\n    },\n    canEdit(groups: Array<string|number>, defaultCondition=true, mandatoryCondition=true) {\n        if (this.isEditMode()) {\n            return groups.includes(this.activeField) && mandatoryCondition\n        }\n        return defaultCondition\n    },\n    isSameAsPatient(guardian: any) {\n        let birthdate = ''\n        let name = ''\n        let gender = ''\n\n        if(this.isRegistrationMode()) {\n            birthdate = HisDate.toStandardHisDisplayFormat(guardian.birth_date.date)\n            name = guardian.given_name.person && guardian.family_name.person\n            gender = guardian.gender.person\n        } else {\n            birthdate = this.guardianData.birth_date\n            name = this.guardianData.name\n            gender = this.guardianData.gender  \n        }\n\n        return (name.toLowerCase() === this.patientData.name.toLowerCase()) \n            && (birthdate === this.patientData.birth_date)\n            && (gender === this.patientData.gender)\n    },\n    guardianSelection(): Field {\n        return {\n            id: 'select_guardian',\n            helpText: 'Select guardian to edit/view',\n            type: FieldType.TT_SELECT,\n            condition: () => this.isEditMode(),\n            validation: (v: Option) => Validation.required(v),\n            options: async () => {\n                const relationship = await RelationshipService.getRelationships(this.patientData.id)\n                if (!isEmpty(relationship)) {\n                    return relationship.map((r: any) => {\n                        const guardian = PersonField.mapPersonData(r.relation)\n                        return {\n                            label: `${guardian.name} (${r.type.b_is_to_a})`, \n                            value: r.relation.person_id, \n                            other: {\n                                relations: r, \n                                details: guardian \n                            }\n                        }\n                    })\n                } else {\n                    await delayPromise(450)\n                    const action = await infoActionSheet(\n                        'Patient has no guardians', '',\n                        'Select option to proceed',\n                        [\n                            {\n                                name: 'Cancel',\n                                slot: 'start',\n                                color: 'danger'\n                            },\n                            {\n                                name: 'Register new',\n                                slot: 'start',\n                                color: 'success'\n                            }\n                        ]\n                    )\n                    if (action === 'Register new') {\n                        this.guardianData = {}\n                        this.fieldAction = 'Registration'\n                        this.fieldComponent = 'scan'\n                    } else {\n                        this.$router.back()\n                    }\n                }\n                return []\n            },\n            config: {\n                footerBtns: [\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        color: 'primary',\n                        onClick: () => {\n                            this.guardianData = {}\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'scan'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    getDefaultVal(fieldID: string | number) {\n        try {\n            return this.guardianData[fieldID]\n        } catch (e) {\n            return ''\n        }\n    },\n    guardianIndex(): Field {\n        return {\n            id: 'guardian_index',\n            helpText: 'Guardian details',\n            type: FieldType.TT_TABLE_VIEWER,\n            condition: (f: any) => f.select_guardian.value, \n            options: (f: any) => {\n                if (this.guardianData && this.guardianData.id != f.select_guardian.value) {\n                    this.guardianData = {\n                        ...f.select_guardian.other.details,\n                        relation: f.select_guardian.other.relations\n                    }\n                }\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const rows = [\n                    ['Given Name', this.guardianData.given_name, editButton('given_name')],\n                    ['Family Name', this.guardianData.family_name, editButton('family_name')],\n                    ['Gender', this.guardianData.gender, editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.guardianData.birth_date), editButton('year_birth_date')],\n                    ['Cell Phone Number', this.guardianData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.guardianData.home_district, editButton('home_region')],\n                    ['Home TA', this.guardianData.home_traditional_authority, editButton('home_region')],\n                    ['Home Village', this.guardianData.home_village,  editButton('home_region')],\n                    ['Current district', this.guardianData.current_district, editButton('current_region')],\n                    ['Current T/A', this.guardianData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.guardianData.landmark, editButton('default_landmarks')],\n                    ['Relation', this.guardianData.relation.type.b_is_to_a, editButton('relations')]\n                ]\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows\n                    }\n                }]\n            },\n            config : {\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Finish',\n                        slot: 'end',\n                        color: 'success',\n                        onClick: () => this.fieldComponent = 'select_guardian'\n                    }\n                },\n                footerBtns: [\n                    {\n                        name: 'Void Relation',\n                        slot: 'start',\n                        color: 'danger',\n                        onClick: async () => {\n                            popVoidReason(async (reason: string) => {\n                                await RelationsService.voidRelation(\n                                    this.patientData.id, \n                                    this.guardianData.relation.relationship_id,\n                                    reason\n                                )\n                                this.fieldComponent = 'select_guardian'\n                            })\n                        }\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Back']\n            }\n        }\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.helpText = 'Guardian First name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.helpText = 'Guardian Last name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    genderField(): Field {\n        const gender: Field = PersonField.getGenderField()\n        gender.defaultValue = () => this.getDefaultVal(gender.id)\n        gender.condition = () => this.canEdit([gender.id], this.isSearchMode())\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dob =PersonField.getDobConfig()\n        dob.defaultValue = () => this.getDefaultVal('birth_date')\n        dob.condition = () => this.canEdit([\n            'year_birth_date', \n            'month_birth_date', \n            'day_birth_date'\n            ], \n            this.isRegistrationMode()\n        ) \n        return generateDateFields(dob)\n    },\n    homeRegionField(): Field {\n        const home: Field = PersonField.getHomeRegionField()\n        home.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return home\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return district\n    },\n    homeTAField(): Field {\n        const ta: Field =  PersonField.getHomeTaField()\n        ta.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return ta\n    },\n    homeVillageField(): Field {\n        const village: Field = PersonField.getHomeVillageField()\n        village.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return village\n    },\n    currentRegionField(): Field {\n        const region: Field = PersonField.getCurrentRegionField()\n        region.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return region\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.canEdit([cellPhone.id], this.isRegistrationMode())\n        return cellPhone \n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        const id = landmarks[0].proxyID || landmarks[0].id\n        landmarks[0].defaultValue =  () => this.getDefaultVal(id)\n        landmarks[0].condition = () => this.canEdit([id], this.isRegistrationMode())\n        return landmarks\n    },\n    relationsField(): Field {\n        return {\n            id: 'relations',\n            helpText: 'Select relationship type',\n            type: FieldType.TT_RELATION_SELECTION,\n            defaultValue: () => this.getDefaultVal('relations'),\n            validation: (val: Option) => Validation.required(val),\n            condition: () => this.canEdit(['relations']),\n            onload: (context: any) => {\n                context.patient = this.patientData\n                if (this.isRegistrationMode()) {\n                    const person = PersonField.resolvePerson(context.cdata)\n                    context.guardian = {\n                        'name': `${person.given_name} ${person.family_name}`,\n                        'birth_date': HisDate.toStandardHisDisplayFormat(person.birthdate),\n                        'home_address': `${person.home_district} ${person.home_traditional_authority}`\n                    }\n                } else {\n                    context.guardian = this.guardianData\n                }\n            },\n            options: async() => {\n                const relationships = await RelationsService.getRelations()\n                return relationships.map((r: any) => ({\n                    label: r.b_is_to_a, \n                    value: r.description, \n                    other: r\n                }))\n            },\n            config: {\n                hiddenFooterBtns: [\n                  'Clear'\n                ]\n            }\n        }\n    },\n    scanGuardian(): Field {\n        return {\n            id: 'scan',\n            helpText: 'Scan or Register Guardian',\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: () => !this.isEditMode(),\n            onValue: async (id: string) => {\n                const searchResults = await Patientservice.findByNpid(id)\n                if (!isEmpty(searchResults)) {\n                    this.guardianData = PersonFieldHelper.mapPersonData(searchResults[0].person)\n                    this.fieldComponent = 'relations'\n                    this.fieldAction = 'Scan'\n                }\n                return false\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns : [\n                    {\n                        name: 'Find or Register Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            dynamicHelpText: (f: any) => {\n                return `Search results for \n                \"${f.given_name.value} ${f.family_name.value} | ${f.gender.label}\"\n                `\n            },\n            appearInSummary: () => false,\n            condition: () => this.isSearchMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                const patients = await Patientservice.search({\n                    'given_name': form.given_name.value, \n                    'family_name': form.family_name.value, \n                    'gender': form.gender.value, \n                });\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'year_birth_date'\n                        }\n                    },\n                    {\n                        name: 'Continue Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.guardianData = PersonFieldHelper.mapPersonData(\n                                form.results.other.person.person\n                            )\n                            this.fieldComponent = 'relations'\n                            this.fieldAction = 'Search'\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./GuardianRegistration.vue?vue&type=template&id=0334418a&ts=true\"\nimport script from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n"],"sourceRoot":""}