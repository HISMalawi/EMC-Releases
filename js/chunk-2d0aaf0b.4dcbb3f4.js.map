{"version":3,"sources":["webpack:///./src/apps/ART/views/FilingNumberManagement.vue?86ad","webpack:///./src/apps/ART/services/filing_number_service.ts","webpack:///./src/apps/ART/views/FilingNumberManagement.vue","webpack:///./src/apps/ART/views/FilingNumberManagement.vue?6675"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","skipSummary","activeField","fieldComponent","onOnIndex","$event","fields","patientID","activePrefix","dormantPrefix","this","num","prefix","search","substring","length","filingNumberPrefix","prx","split","filingNumber","match","RegExp","postJson","identifier","getJson","res","map","person","patient","getID","getGivenName","getFamilyName","secondaryPatient","page","pageSize","printer","printLbl","components","HisStandardForm","data","service","nextWorkflowRouteName","filingNumberAssignment","watch","handler","query","params","patient_id","setPatientID","getPatient","loadFilingPrefix","getFilingNumberField","getCandidateSelectionField","getFilingNumberHistoryField","archive","archiveFilingNumber","assign","onAssignFilingNumber","trail","next_workflow_task","immediate","deep","methods","toFID","filingID","formatNumber","newFilingNumber","assigned","assignment","primary","label","value","name","other","activeNumber","dormantNumber","archived","isActiveFilingNum","presentLoading","assignFilingNumber","dismiss","new_identifier","isDormantFilingNum","archived_identifier","swapExistingFilingNumbers","candidate","archivePatient","swapped","active_number","given_name","family_name","dormant_number","message","create","backdropDismiss","loading","present","findByID","_patient","id","getFilingNumber","printFilingNumber","$router","back","filingNumberSearchKeypad","component","cssClass","componentProps","title","strictNumbers","onKeyPress","modal","onDidDismiss","getArchivingCandidates","pageNumber","candidates","formatCandidateOptions","state","list","style","color","fontWeight","toStandardHisDisplayFormat","appointment_date","type","TT_TABLE_VIEWER","helpText","condition","options","columns","getPastFilingNumbers","rows","d","isActive","voided","date_created","date_voided","config","toolbarInfo","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","selectorInstance","filingNumbeSearchTerm","filingOptionsBackup","TT_CARD_SELECTOR","validation","val","required","onload","instance","onValue","ok","listData","filingNumbers","disabled","TT_FILING_NUMBER_VIEW","dormantPatient","$route","__exports__"],"mappings":"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","file":"js/chunk-2d0aaf0b.4dcbb3f4.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    fields: _ctx.fields\n  }, null, 8, [\"activeField\", \"fields\"]))\n}","import { Service } from \"@/services/service\";\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport ART_PROP from \"../art_global_props\";\n\nexport class FilingNumberService extends Service {\n    patientID: number;\n    activePrefix: string;\n    dormantPrefix: string;\n\n    constructor() {\n        super()\n        this.patientID = 0\n        this.activePrefix = ''\n        this.dormantPrefix = ''\n    }\n\n    getActivePrx() {\n        return this.activePrefix\n    }\n\n    getDormantPrx() {\n        return this.dormantPrefix\n    }\n\n    getPatientID() {\n        return this.patientID\n    }\n\n    setPatientID(patientID: number) {\n        this.patientID = patientID\n    }\n\n    formatNumber(num: string) {\n        const prefix = num.search(this.activePrefix) >= 0 \n            ? this.activePrefix\n            : num.search(this.dormantPrefix) >= 0 \n            ? this.dormantPrefix\n            : ''\n        return prefix ? num.substring(prefix.length, num.length) : num\n    }\n\n    async loadFilingPrefix() {\n        const prx = await ART_PROP.filingNumberPrefix()\n        if (prx) {\n            const [activePrefix, dormantPrefix] = prx.split(',')\n            this.activePrefix = activePrefix\n            this.dormantPrefix = dormantPrefix\n        }\n    }\n\n    isActiveFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.activePrefix, 'i'))\n            ? true\n            : false\n    }\n\n    isDormantFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.dormantPrefix, 'i'))\n            ? true\n            : false\n    }\n\n    async assignFilingNumber() {\n        return Service.postJson(`patients/${this.patientID}/filing_number`, {})\n    }\n\n    async getFilingNumber(filingNumber: string) {\n        const identifier = `${this.activePrefix}${filingNumber}`\n        const res = await Service.getJson(`search/patients/by_identifier`, {\n            'type_id': 17, \n            'identifier': identifier\n        })\n        if (res) {\n            return res.map((person: any) => {\n                const patient = new Patientservice(person)\n                return {\n                    identifier,\n                    'patient_id': patient.getID(),\n                    'given_name': patient.getGivenName(),\n                    'family_name': patient.getFamilyName(),\n                    'state': 'N/A',\n                    'appointment_date': ''\n                }\n            })\n        }\n        return []\n    }\n\n    archiveFilingNumber() {\n        return Service.getJson(`archive_active_filing_number`, {\n            'patient_id': this.patientID\n        })\n    }\n\n    archivePatient(secondaryPatient: number, identifier: string | number) {\n        return Service.postJson('swap_active_number', {\n            'primary_patient_id': this.patientID,\n            'secondary_patient_id': secondaryPatient,\n            identifier\n        })\n    }\n\n    getArchivingCandidates(page=0, pageSize=10) {\n        return Service.getJson(`archiving_candidates`, {\n            page,'page_size': pageSize\n        })\n    }\n\n    getPastFilingNumbers() {\n        return Service.getJson(`patients/${this.patientID}/past_filing_numbers`)\n    }\n\n    printFilingNumber() {\n        const printer = new PrintoutService()\n        return printer.printLbl(`patients/${this.patientID}/labels/filing_number`) \n    }\n}","\nimport { defineComponent } from 'vue'\nimport { isEmpty } from 'lodash';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { loadingController, modalController } from \"@ionic/vue\"\nimport { Patientservice } from '@/services/patient_service';\nimport { FilingNumberService } from '@/apps/ART/services/filing_number_service'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { alertConfirmation, toastDanger, toastWarning  } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport Keypad from \"@/components/Keyboard/HisKeypad.vue\"\nimport { nextTask } from '@/utils/WorkflowTaskHelper';\n\n/**\n * Manages filing number assignment\n * Can view filing number trail\n * Can swap filing numbers between candidates\n */\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        service: {} as any,\n        patient: {} as any,\n        fieldComponent: '' as string,\n        fields: [] as Array<Field>,\n        nextWorkflowRouteName: '' as string,\n        filingNumberAssignment: {} as Record<string, Option>,\n    }),\n    watch: {\n        /**\n         * Initiates service and Detects parameters \n         * in the url and switch to appropriate actions\n         */\n        '$route': {\n            async handler({query, params}: any) {\n                if (params && params.patient_id) {\n                    this.service = new FilingNumberService()\n                    this.service.setPatientID(params.patient_id)\n                    this.patient = await this.getPatient(params.patient_id)\n                    await this.service.loadFilingPrefix()\n                }\n                if (query) {\n                    this.fields = [\n                        this.getFilingNumberField(),\n                        this.getCandidateSelectionField(),\n                        this.getFilingNumberHistoryField()\n                    ]\n                    if (query.archive === \"true\") {\n                        await this.archiveFilingNumber()\n                        return \n                    }\n                    if (query.assign === \"true\") {\n                        await this.onAssignFilingNumber()\n                    }\n                    if (query.trail === \"true\") {\n                       this.fieldComponent = 'view_filing_history'\n                    }\n                    if (query.next_workflow_task) {\n                        this.nextWorkflowRouteName = query.next_workflow_task\n                    }\n                }             \n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        /**\n         * Helper method for formatting filing numbers \n         * for display purposes only!\n         */\n        toFID(filingID: string) {\n            return this.service.formatNumber(filingID)\n        },\n        async onAssignFilingNumber() {\n            const assigned = await this.newFilingNumber()\n            if (assigned) {\n                this.filingNumberAssignment = assigned\n                this.fieldComponent = 'filing_number_management'\n            } else {\n                this.fieldComponent = 'select_candidate_to_swap'\n                toastWarning('Out of filing numbers, Please select eligible candidate')\n            }\n        },\n        /**\n         * Assigns and creates filing number assignment object\n         */\n        async newFilingNumber(): Promise<Record<string, Option> | undefined> {\n            const assignment: Record<string, Option> = {\n                primary: {\n                    label: 'Dormant → Active',\n                    value: this.patient.name,\n                    other: {\n                        activeNumber: this.patient.filingID \n                            ? this.toFID(this.patient.filingID)\n                            : 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                },\n                archived:  {\n                    label: 'Active → Dormant',\n                    value: 'N/A',\n                    other: {\n                        activeNumber: 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                }\n            }\n            /**\n             * Do assign a new filing number if the patient already\n             * has one\n             */\n            if (this.service.isActiveFilingNum(this.patient.filingID)) {\n                return assignment\n            }\n\n            await this.presentLoading()\n\n            const assigned = await this.service.assignFilingNumber()\n\n            loadingController.dismiss()\n\n            if (isEmpty(assigned)) return\n\n            assignment.primary.other = {\n                activeNumber: this.toFID(\n                    assigned.new_identifier.identifier\n                ),\n                dormantNumber: this.service\n                    .isDormantFilingNum(this.patient.filingID) \n                    ? this.toFID(this.patient.filingID)\n                    : 'N/A'\n            }\n\n            if (!isEmpty(assigned.archived_identifier)) {\n                const patient = await this.getPatient(\n                    assigned.archived_identifier.patient_id\n                )\n                assignment.archived = {\n                    label: 'Active → Dormant',\n                    value: patient.name,\n                    other: {\n                        activeNumber: this.toFID(\n                            assigned.archived_identifier.identifier\n                        ), \n                        dormantNumber: this.toFID(\n                            assigned.new_identifier.identifier\n                        )\n                    }\n                }\n            }\n            return assignment\n        },\n        /**\n         * Swap filing numbers between an active candidate with a dormant candidate\n        */\n        async swapExistingFilingNumbers(candidate: any) {\n            const swapped = await this.service.archivePatient(\n               candidate.patient_id, candidate.identifier\n            )\n            if (swapped) {\n                return {\n                    primary: {\n                        label: 'Dormant → Active',\n                        value: this.patient.name,\n                        other: {\n                            activeNumber: this.toFID(swapped.active_number), \n                            dormantNumber: this.toFID(this.patient.filingID) || 'N/A'\n                        }\n                    },\n                    archived:  {\n                        label: 'Active → Dormant',\n                        value: `${candidate.given_name} ${candidate.family_name}`,\n                        other: {\n                            patientID: candidate.patient_id,\n                            activeNumber: this.toFID(swapped.dormant_number), \n                            dormantNumber:this.toFID(swapped.active_number)\n                        }\n                    }\n                }\n            }\n        },\n        async presentLoading(message=\"Please wait...\") {\n            const loading = await loadingController.create({\n                message, backdropDismiss: false\n            })\n            await loading.present()\n        },\n        async getPatient(patientID: number): Promise<Record<string, number | string>> {\n            const patient = await Patientservice.findByID(patientID)\n            if (patient) {\n                const _patient = new Patientservice(patient)\n                return {\n                    id: _patient.getID(),\n                    filingID: _patient.getFilingNumber(),\n                    name: `${_patient.getGivenName()} ${_patient.getFamilyName()}`\n                }\n            }\n            return {}\n        },\n        /**\n         * Archives currrent patient and routes to the previous page view\n         */\n        async archiveFilingNumber() {\n            await this.presentLoading('Archiving filing number')\n            try {\n                await this.service.archiveFilingNumber()\n                await this.service.printFilingNumber()\n            }catch(e) {\n                toastDanger(e)\n            }\n            await loadingController.dismiss()\n            this.$router.back()\n        },\n        async filingNumberSearchKeypad() {\n            const modal = await modalController.create({\n                component: Keypad,\n                backdropDismiss: false,\n                cssClass: 'keypad-modal',\n                componentProps: {\n                    title: 'Find Active number',\n                    strictNumbers: false,\n                    onKeyPress: () => {\n                        //TODO: do nothing!\n                    }\n                }\n            })\n            await modal.present()\n            const { data } = await modal.onDidDismiss()\n            return data\n        },\n        async getArchivingCandidates(pageNumber=0): Promise<Option[]> {\n            const candidates = await this.service.getArchivingCandidates(pageNumber)\n            return this.formatCandidateOptions(candidates)\n        },\n        /**\n         * Converts array of objects with candidates to a list options array\n         */\n        formatCandidateOptions(candidates: Array<any>): Option[] {\n            return candidates.map((candidate: any) => ({\n                label: `${candidate.given_name} ${candidate.family_name} (${candidate.state})`,\n                value: candidate.identifier,\n                other: {\n                    data: candidate,\n                    list: [\n                        {\n                            label: 'Filing #',\n                            value: this.toFID(candidate.identifier),\n                            style: {\n                                color: 'green', \n                                fontWeight: 'bold'\n                            }\n                        },\n                        {\n                            label: 'Given name',\n                            value: candidate.given_name\n                        },\n                        {\n                            label: 'Family name',\n                            value: candidate.family_name\n                        },\n                        {\n                            label: 'Outcome',\n                            value: candidate.state.match(/trans/i)\n                                ? 'TO'\n                                : candidate.state.match(/stop/i) \n                                ? 'Tx stopped'\n                                : candidate.state\n                        },\n                        {\n                            label: 'LAD',\n                            value: HisDate.toStandardHisDisplayFormat(\n                                candidate.appointment_date\n                            )\n                        }\n                    ]   \n                }\n            }))\n        },\n        /*\n        * Form field that a table of all filing numbers assigned to a patient\n         */\n        getFilingNumberHistoryField(): Field {\n            return {\n                id: 'view_filing_history',\n                type: FieldType.TT_TABLE_VIEWER,\n                helpText: 'Filing Number Trail',\n                condition: () => false,\n                options: async () => {\n                    const columns = ['Status', 'Filing #', 'Date Created', 'Date voided']\n                    const data = await this.service.getPastFilingNumbers()\n                    const rows = data.map((d: any) => {\n                        const isActive = d.voided === 0\n                        return [\n                            isActive ? 'Active' : 'Voided',\n                            this.toFID(d.identifier),\n                            HisDate.toStandardHisDisplayFormat(d.date_created),\n                            !isActive ? HisDate.toStandardHisDisplayFormat(d.date_voided): 'N/A'\n                        ]\n                    })\n                    return [\n                        {\n                            label: 'Filing Number Trail',\n                            value: 'Trail',\n                            other: { columns, rows }\n                        }\n                    ]\n                },\n                config: {\n                    toolbarInfo: [\n                        {\n                            label: 'Current filing #',\n                            value: this.toFID(this.patient.filingID)\n                        },\n                        {\n                            label: 'Status',\n                            value: this.service.isActiveFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Active'\n                            : this.service.isDormantFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Dormant'\n                            :\n                            'N/A'\n                        }\n                    ],\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Next',\n                        'Back',\n                        'Finish'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Navigate to get new filing number if they have dormant one.\n                         */\n                        {\n                            name: 'Get filing #',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => this.service.isDormantFilingNum(\n                                        this.patient.filingID\n                                    )\n                                }\n                            },\n                            onClick: async () => await this.onAssignFilingNumber()\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * A form field that displays a list of patients with filing numbers\n         * to swap with\n         */\n        getCandidateSelectionField(): Field {\n            // Keeps track of the component object that's presented on the screen\n            let selectorInstance: any = {}\n            // Candidate list is paginated, tracking page here\n            let pageNumber = 0\n            let filingNumbeSearchTerm = ''\n            // Restore point for archived candidates\n            let filingOptionsBackup: Option[] = []\n\n            return {\n                id: 'select_candidate_to_swap',\n                type: FieldType.TT_CARD_SELECTOR,\n                helpText: 'Filing Number (Archive)',\n                condition: () => false,\n                validation: (val: Option) => Validation.required(val),\n                onload: (instance: any) => selectorInstance = instance,\n                onValue: async (val: Option) => {\n                    if(val) {\n                        const ok = await alertConfirmation(`Do you want to archive ${val.value}`)\n                        if (ok) {\n                            const swapped = await this.swapExistingFilingNumbers(\n                                val.other.data\n                            )\n                            if (swapped) {\n                                this.filingNumberAssignment = swapped\n                                this.fieldComponent = 'filing_number_management'\n                                return true\n                            }                     \n                        }\n                    }\n                    return false\n                },\n                options: () => this.getArchivingCandidates(),\n                config: {\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Back',\n                        'Finish',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Resets listData to previous state after a search term was triggerred.\n                         * Note: Only visible when users searches filing numbers\n                         */\n                        {\n                            name: 'Reset',\n                            slot: 'end',\n                            color: 'warning',\n                            state: {\n                                visible: {\n                                    default: () => filingNumbeSearchTerm ? true : false \n                                }\n                            },\n                            onClick: () => {\n                                // Clear values and restore previous listData prior to search \n                                // results\n                                filingNumbeSearchTerm = ''\n                                selectorInstance.listData = filingOptionsBackup\n                                filingOptionsBackup = []\n                            }\n                        },\n                        /**\n                         * Loads a key pad for searching for a filing candidate\n                         */\n                        {\n                            name: 'Specify',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async () => {\n                                filingNumbeSearchTerm = await this.filingNumberSearchKeypad()\n                                if (filingNumbeSearchTerm) {\n                                    const filingNumbers = await this.service.getFilingNumber(\n                                        filingNumbeSearchTerm\n                                    )\n                                    // Create a restore point for archived candidates\n                                    filingOptionsBackup = [...selectorInstance.listData]\n                                    selectorInstance.listData = this.formatCandidateOptions(filingNumbers)\n                                }\n                            }\n                        },\n                        /**\n                         * List pagination button that decrements the page number.\n                         * Note: this button will only appear when no filing number were manually searched.\n                         * It will also appear when pageNumber is greater than 1\n                         */\n                        {\n                            name: 'Previous batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => pageNumber <= 0 \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber -= 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        },\n                        /**\n                         * List pagination button that increments the page number.\n                         * Note: this button will only appear when no filing number were manually searched\n                         * and if the list has 10 or more items\n                         */\n                        {\n                            name: 'Next batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => (\n                                        selectorInstance.listData \n                                        && selectorInstance.listData.length <= 1\n                                    ) \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber += 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * Form field that displays new filing number assigned to a\n         * Patient\n         */\n        getFilingNumberField(): Field {\n            return {\n                id: \"filing_number_management\",\n                type: FieldType.TT_FILING_NUMBER_VIEW,\n                helpText: \"Filing Number Management\",\n                onload: async () => await this.service.printFilingNumber(),\n                condition: () => false,\n                options: () => [ \n                    this.filingNumberAssignment.primary, \n                    this.filingNumberAssignment.archived \n                ],\n                config: {\n                    hiddenFooterBtns: [\n                        'Cancel',\n                        'Clear',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Print #',\n                            slot: 'start',\n                            onClick: async () => this.service.printFilingNumber()\n                        },\n                        {\n                            name: 'Print Dormant#',\n                            slot: 'start',\n                            state: {\n                                visible: {\n                                    default: () => this.filingNumberAssignment\n                                        ?.archived\n                                        ?.other\n                                        ?.patientID ? true : false\n                                }\n                            },\n                            onClick: async () => {\n                                const dormantPatient = new FilingNumberService()\n                                dormantPatient.setPatientID(\n                                    this.filingNumberAssignment\n                                    .archived\n                                    .other\n                                    .patientID\n                                )\n                                await dormantPatient.printFilingNumber()\n                            }\n                        },\n                        {\n                            name: 'Continue',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => nextTask(this.patient.id, this.$router, this.$route)\n                        }\n                    ]\n                }\n            }\n        }\n    }\n})\n","import { render } from \"./FilingNumberManagement.vue?vue&type=template&id=bec642ba&ts=true\"\nimport script from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}