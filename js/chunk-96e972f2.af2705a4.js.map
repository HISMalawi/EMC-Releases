{"version":3,"sources":["webpack:///./src/apps/RADIOLOGY/services/radiology_examination_service.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?c102","webpack:///./src/apps/RADIOLOGY/services/radiology_internal_sections_service.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?2064"],"names":["RadiologyExaminationService","patientID","providerID","AppEncounterService","getJson","this","params","postJson","accessionNumber","service","PrintoutService","printLbl","id","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","RadiologyInternalSectionService","name","Service","defineComponent","mixins","EncounterMixinVue","components","IonPage","HisStandardForm","data","examinationOptions","detailedExaminationOptions","watch","ready","handler","push","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","immediate","methods","getTestsOptions","getListOfRadiologyTests","map","e","label","value","concept_id","validateAmount","val","match","computedValues","createEncounter","resolveObs","saveObservationList","Object","values","v","order","createOrder","getEncounterID","res","accession_number","printExamination","gotoPatientDashboard","tests","selectedTest","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","obs","buildValueCoded","encounterID","beforeNext","options","isEmpty","selectedExamID","condition","f","list_of_radiology_test","buildValueText","mapStrToOptions","field","PersonFieldHelper","getFacilityLocationField","referral_type","referralSections","getInternalSections","s","config","showKeyboard","footerBtns","slot","color","onClick","c","filter","length","toastWarning","filtered","some","i","toLowerCase","alertConfirmation","createInternalSection","listData","toastDanger","yesNoOptions","paying","TT_TEXT","payment_type","validateSeries","TT_NUMBER","receipt_number","buildValueNumber","invoice_number","__exports__"],"mappings":"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","file":"js/chunk-96e972f2.af2705a4.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { PrintoutService } from \"@/services/printout_service\"\n\nexport class RadiologyExaminationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 121, providerID) \n    }\n\n    \n    static getListOfRadiologyTests(id: string | number) {\n        return super.getJson('radiology_set', { id })\n    }\n    \n    getPatientExaminations() {\n        return AppEncounterService.getJson('radiology/examinations', {\n            'patient_id': this.patientID\n        })\n    }\n\n    createOrder(params: any) {\n        return AppEncounterService.postJson('orders/radiology', params)\n    }\n\n    printExamination(accessionNumber: string) {\n        const service = new PrintoutService()\n        return service.printLbl(`orders/radiology?accession_number=${accessionNumber}`)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { Service } from \"@/services/service\"\n\nexport class RadiologyInternalSectionService extends Service {\n    constructor() {\n        super()\n    }\n\n    static getInternalSections() {\n        return super.getJson('internal_sections')\n    }\n\n    static createInternalSection(name: string) {\n        return super.postJson('internal_sections', { name })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            await this.service.saveObservationList((await this.resolveObs(computedValues)))\n            for(const v of Object.values(computedValues) as any) {\n                if (typeof v.order === 'function') {\n                    const res = await this.service.createOrder(v.order(this.service.getEncounterID()))\n                    if (typeof res === 'object' && res.accession_number) {\n                        this.service.printExamination(res.accession_number)\n                    }\n                }\n            }\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value),\n                        order: (encounterID: number) => {\n                            const data: any = {\n                                'encounter_id': encounterID,\n                                'concept_id': v.value\n                            } \n                            if (this.providerID != -1) {\n                                data['provider_id'] = this.providerID\n                            }\n                            return data\n                        }\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: s.name\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter)\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=7b7a8c9a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}