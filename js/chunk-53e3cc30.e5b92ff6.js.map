{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Appointment.vue?6b8a","webpack:///./src/apps/ART/views/encounters/Appointment.vue","webpack:///./src/apps/ART/views/encounters/Appointment.vue?9d72","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./node_modules/eslint-loader/index.js"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","appointmentDate","medicationRunOutDate","appointment","app","App","getActiveApp","watch","ready","handler","AppointmentService","patientID","providerID","init","immediate","methods","formData","computedData","createEncounter","encounter","toastWarning","resolveObs","appointmentObs","buildValueDate","systemDateObs","push","saveObservationList","obs","toastSuccess","printer","PatientPrintoutService","appsThatDoNotPrint","includes","applicationName","printVisitSummaryLbl","nextTask","getNextAppointment","appointments","appointment_date","drugs_run_out_date","getFields","gotoPatientDashboard","id","helpText","type","FieldType","TT_APPOINTMENTS_ENTRY","validation","val","Validation","required","computedValue","d","tag","value","config","patientAge","this","patient","getAge","hiddenFooterBtns","options","label","other","runOutDate","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","split","username","provider","find","person_id","$router","EXIT","findings","matchToGuidelines","index","finding","status","program","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","yesNoUnknownOptions","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","e","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","AppEncounterService","constructor","super","programID","getProgramID","getJson","date","paginate"],"mappings":"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","file":"js/chunk-53e3cc30.e5b92ff6.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue';\nimport {AppointmentService} from '@/apps/ART/services/appointment_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    appointmentDate: \"\" as any,\n    medicationRunOutDate: \"\" as any,\n    appointment: {} as any,\n    app: App.getActiveApp() as AppInterface,\n    \n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n          this.appointment = new AppointmentService(this.patientID, this.providerID)\n          this.init()\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computedData: any) {\n      const encounter = await this.appointment.createEncounter()\n\n      if (!encounter) return toastWarning('Unable to create encounter')\n\n      const appointmentObs = await this.resolveObs(computedData, 'obs');\n      const systemDateObs = await this.appointment.buildValueDate('Estimated date', this.appointmentDate);\n      appointmentObs.push(systemDateObs);\n\n      const obs = await this.appointment.saveObservationList(appointmentObs)\n\n      if (!obs) return toastWarning('Unable to create Obs')\n\n      toastSuccess('Encounter created')\n      const printer = new PatientPrintoutService(this.patientID);\n      const appsThatDoNotPrint = ['CxCa', 'ANC']\n      if(!appsThatDoNotPrint.includes(this.app.applicationName)) {\n        await printer.printVisitSummaryLbl();\n      }\n      this.nextTask()\n    },\n    async init() {\n      try {\n        const appointments = await this.appointment.getNextAppointment();\n        this.appointmentDate = appointments.appointment_date;\n        this.medicationRunOutDate = appointments.drugs_run_out_date; \n        this.fields = this.getFields();\n      } catch(e) {\n        toastWarning('Next appointment is not available')\n        this.gotoPatientDashboard()\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"set_appointment\",\n          helpText: \"Appointments booking\",\n          type: FieldType.TT_APPOINTMENTS_ENTRY,\n          validation: (val: any) => Validation.required(val),\n          computedValue: (d: Option) => {\n            return {\n              tag: 'obs',\n              obs: this.appointment.buildValueDate('Appointment date', d.value)\n            }\n          },\n          config: {\n            patientAge: this.patient.getAge(),\n            hiddenFooterBtns: [\n              'Clear'\n            ]\n          },\n          options: () =>  {return [{\n            label: \"\",\n            value: \"\",\n            other: {\n             runOutDate : this.medicationRunOutDate,\n             appointmentDate: this.appointmentDate\n            }\n          }]},\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./Appointment.vue?vue&type=template&id=c828e410&ts=true\"\nimport script from \"./Appointment.vue?vue&type=script&lang=ts\"\nexport * from \"./Appointment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AppointmentService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 7, providerID);\n  }\n\n  async getNextAppointment() {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/patients/${this.patientID}/next_appointment_date`, {date: this.date})\n  }\n  static async getDailiyAppointments(date: any) {\n    const programID = AppEncounterService.getProgramID();\n    return AppEncounterService.getJson(`/programs/${programID}/booked_appointments`, {date: date, paginate: false})\n  }\n\n}"],"sourceRoot":""}