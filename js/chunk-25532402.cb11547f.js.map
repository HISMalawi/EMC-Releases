{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/apps/ART/views/encounters/Vitals.vue","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/utils/GuidelineEngine.ts"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","onOnskip","$event","mixins","EncounterMixinVue","app","HisApp","getActiveApp","age","gender","hasBPinfo","finalHeightValue","recentHeight","recentHeightObsID","HTNEnabled","optionWhiteList","hasHTNObs","vitals","weightForHeight","medianWeightandHeight","canEditHeight","this","init","VitalsService","getAge","getGender","getFields","getOptions","modifier","icon","visible","o","includes","canCheckWeightHeight","canCheckBp","encounter","createEncounter","toastWarning","buildObs","observations","saveObservationList","toastSuccess","mapObs","sanitizeVitals","element","on_htn_medication","buildValueText","splitBP","forEach","bpSystolic","bpDiastolic","getBMI","weight","getVal","height","currentWeightPercentile","parseFloat","toFixed","currentHeightPercentile","currentHeightRounded","Math","floor","medianWeightHeight","weightForHeightPercentile","isNaN","BMI","BMIService","calculateBMI","val","key","j","async","buildValueNumber","validateVitals","l","checkRequiredVitals","v","validateAll","id","helpText","FieldType","TT_SELECT","applicationName","getAll","validation","Validation","TT_VITALS_ENTRY","query","vital_options","lastHeight","getRecentHeightObs","patientAgeAtPrevRecordedHeight","dayjs","diff","getMedianWeightHeight","getWeightForHeightValues","beforeNext","heightOption","enteredHeight","prevHeight","prevHeightBtnTxt","newHeightBtnTxt","alertConfirmation","voidObs","config","hiddenFooterBtns","onUpdateAlertStatus","weightOption","result","onChangeOption","activeItem","errs","validator","AppEncounterService","constructor","super","isNotEmptyandNumber","vital","match","isNotEmptyandFloat","checkMinMax","min","max","mergeErrors","errors","holder","isValidBPReading","isValidBP","emptyErrors","minErrors","isCondition","ignored","undefined","prop","every","sortByRelevance","guidelines","target","targetEvent","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-25532402.cb11547f.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { alertConfirmation, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { BMIService } from \"@/services/bmi_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisApp from \"@/apps/app_lib\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport dayjs from \"dayjs\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    app: HisApp.getActiveApp() as any,\n    activeField: \"\",\n    age: null as any,\n    gender: null as any,\n    hasBPinfo: false,\n    finalHeightValue: null as number | null,\n    recentHeight: null,\n    recentHeightObsID: -1,\n    HTNEnabled: false,\n    optionWhiteList: [] as string[],\n    hasHTNObs: false,\n    vitals: {} as any,\n    weightForHeight: {} as any,\n    medianWeightandHeight: {} as any,\n    canEditHeight: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(ready) {\n        if (ready) this.init()\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    init() {\n      this.vitals = new VitalsService(this.patientID, this.providerID);\n      this.age = this.patient.getAge();\n      this.gender = this.patient.getGender();\n      this.fields = this.getFields();\n    },\n    getOptions() {\n      const recentHeight = this.recentHeight && this.age > 18 ? this.recentHeight : \"\";\n      const options = [\n        {\n          label: \"Weight\",\n          value: \"\",\n          other: {\n            modifier: \"KG\",\n            icon: \"weight\",\n            required: true,\n          },\n        },\n        {\n          label: \"Height\",\n          value: `${recentHeight}`,\n          other: {\n            modifier: \"CM\",\n            icon: \"height\",\n            recentHeight: this.recentHeight,\n            visible: this.canEditHeight,\n            required: this.canEditHeight\n          },\n        },\n        { label: \"BP\", value: \"\", other: { modifier: \"mmHG\", icon: \"bp\" } },\n        {\n          label: \"Temp\",\n          value: \"\",\n          other: { modifier: \"°C\", icon: \"temp\" },\n        },\n        {\n          label: \"SP02\",\n          value: \"\",\n          other: { modifier: \"%\", icon: \"spo2\" },\n        },\n        {\n          label: \"Pulse\",\n          value: \"\",\n          other: { modifier: \"BPM\", icon: \"pulse-rate\" },\n        },\n        {\n          label: \"Age\",\n          value: this.age,\n          other: { modifier: \"Years old\", icon: \"\", visible: false },\n        }\n      ]\n\n      if (!isEmpty(this.optionWhiteList)) {\n        return options.filter((o: any) => this.optionWhiteList.includes(o.label))\n          .map((o: any) => {\n            o.other.required = true\n            return o\n          })\n      }\n      return options\n    },\n    canCheckWeightHeight() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('Height') \n        && this.optionWhiteList.includes('Weight')\n    },\n    canCheckBp() {\n      return isEmpty(this.optionWhiteList) || this.optionWhiteList.includes('BP')\n    },\n    async onFinish(formData: any) {\n      const encounter = await this.vitals.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create treatment encounter\");\n\n      const obs = await this.buildObs(formData);\n      const observations = await this.vitals.saveObservationList(obs);\n\n      if (!observations) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async buildObs(formData: any) {\n      const observations: any = await this.mapObs(\n        this.sanitizeVitals(formData.vitals).filter(\n          (element) => element.label !== \"BP\"\n        ).map((e: any) => {\n          if (e.label === 'Height' && e.other.visible && this.finalHeightValue) {\n            e.value = this.finalHeightValue\n          }\n          return e\n        })\n      );\n      if (this.HTNEnabled && !this.hasHTNObs && formData.on_htn_medication) {\n        const obs = await this.vitals.buildValueText(\n          \"Treatment status\",\n          formData.on_htn_medication.value\n        );\n        observations.push(obs);\n      }\n      return observations;\n    },\n    splitBP(formData: Option[]) {\n      const p: Option[] = [];\n      formData.forEach((element) => {\n        if (element.label === \"BP\") {\n          const value = `${element.value}`.split(\"/\");\n          const bpSystolic = value[0];\n          const bpDiastolic = value[1];\n\n          p.push({ label: \"Systolic\", value: bpSystolic });\n          p.push({ label: \"Diastolic\", value: bpDiastolic });\n        }\n      });\n      return p;\n    },\n    getBMI(formData: Option[]) {\n      const weight = this.getVal(formData, \"Weight\");\n      const height = this.getVal(formData, \"Height\");\n      const obs: any = [];\n      if (this.age <= 14) {\n        const currentWeightPercentile = (\n          (weight / parseFloat(this.medianWeightandHeight[\"weight\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightPercentile = (\n          (height / parseFloat(this.medianWeightandHeight[\"height\"])) *\n          100\n        ).toFixed(0);\n        const currentHeightRounded =\n          (height % Math.floor(height) < 0.5 ? 0 : 0.5) + Math.floor(height);\n        const medianWeightHeight =\n          this.weightForHeight[currentHeightRounded.toFixed(1)];\n        const weightForHeightPercentile = (\n          (weight / medianWeightHeight) *\n          100\n        ).toFixed(0);\n        if(!isNaN(parseFloat(weightForHeightPercentile))) {\n          obs.push({\n            label: \"Weight for height percent of median\",\n            value: weightForHeightPercentile,\n          });\n        }\n        obs.push({\n          label: \"Weight for age percent of median\",\n          value: currentWeightPercentile,\n        });\n        obs.push({\n          label: \"Height for age percent of median\",\n          value: currentHeightPercentile,\n        });\n      } else {\n        const BMI = BMIService.calculateBMI(weight, height);\n        obs.push({ label: \"BMI\", value: BMI });\n      }\n      return obs;\n    },\n    getVal(formData: Option[], val: string): number {\n      const value = formData.filter((key: any) => key.label === val);\n      return value[0].value === \"\" ? 0 : parseFloat(`${value[0].value}`);\n    },\n    async mapObs(vitals: any) {\n      const j = vitals.map(async (element: any) => {\n        const obs = await this.vitals.buildValueNumber(\n          element.label,\n          element.value\n        );\n        return obs;\n      });\n      return Promise.all(j);\n    },\n    validateVitals(vitals: any) {\n      const l = this.checkRequiredVitals(vitals);\n      if (l.length > 0) {\n        return l.map((val) => {\n          return [`${val.label} can not be empty`];\n        });\n      }\n      const v = this.sanitizeVitals(vitals);\n      return this.vitals.validateAll(v);\n    },\n    sanitizeVitals(vitals: Array<Option>) {\n      let p = vitals.filter((element) => {\n        if (element.label === \"Height\" && element.other.required == false) {\n          return false;\n        }\n        return element.value !== \"\" && element.label !== \"Age\";\n      })\n      if (this.canCheckBp()) {\n        p = p.concat(this.splitBP(p))\n      }\n      if (this.canCheckWeightHeight()){\n        p = p.concat(this.getBMI(vitals))\n      }\n      return p\n    },\n    checkRequiredVitals(vitals: Array<Option>) {\n      return vitals.filter((element) => {\n        return element.value === \"\" && element.other.required === true;\n      });\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"on_htn_medication\",\n          helpText: \"Already taking drugs for blood pressure?\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.app?.applicationName === 'ART') {\n              this.HTNEnabled = await Store.get('IS_ART_HTN_ENABLED')\n              if (this.HTNEnabled) {\n                await VitalsService.getAll(this.patientID, \"Treatment status\").then(\n                  (data: any) => {\n                    this.hasHTNObs = data && data.length > 0;\n                  }\n                )\n              }\n            }\n            return true\n          },\n          validation: (val: any) => Validation.required(val),\n          condition: () => {\n            return this.HTNEnabled && !this.hasHTNObs;\n          },\n          options: () => [\n            {\n              label: \"Yes\",\n              value: \"BP Drugs started\",\n            },\n            {\n              label: \"No\",\n              value: \"Not on BP Drugs\",\n            },\n          ],\n        },\n        {\n          id: \"vitals\",\n          helpText: \"Vitals entry\",\n          type: FieldType.TT_VITALS_ENTRY,\n          init: async () => {\n            const optionWhiteList = this.$route.query.vital_options as string\n            if (optionWhiteList) this.optionWhiteList = optionWhiteList.split(',')\n            if (this.canCheckWeightHeight()) {\n              const lastHeight = await this.patient.getRecentHeightObs();\n              if (!isEmpty(lastHeight)) {\n                const patientAgeAtPrevRecordedHeight = dayjs(lastHeight['obs_datetime'])\n                  .diff(this.patient.getBirthdate(), 'year')\n                this.recentHeight = lastHeight['value_numeric'];\n                this.recentHeightObsID = lastHeight['obs_id'];\n                /**\n                 * For a scenario where a patient's height was last updated when they were a minor\n                 * and they return as an adult, provide an option to update their height.\n                 */\n                this.canEditHeight = patientAgeAtPrevRecordedHeight < 18 || this.age < 18\n              } else {\n                this.canEditHeight = true\n              }\n              if (this.age <= 14) {\n                this.medianWeightandHeight = await this.patient.getMedianWeightHeight();\n                this.weightForHeight = await ProgramService.getWeightForHeightValues();\n              }\n            }\n            return true\n          },\n          validation: (value: any) => this.validateVitals(value),\n          beforeNext: async (val: Option[]) => {\n            const heightOption = find(val, { label: \"Height\" });\n            if (heightOption && this.recentHeight && heightOption.other.visible) {\n              const enteredHeight = parseInt(`${heightOption.value || 0}`);\n              const prevHeight = parseInt(`${this.recentHeight || 0}`);\n\n              /** Warn if inconsistent height is detected */\n              if (enteredHeight < prevHeight) {\n                const prevHeightBtnTxt = `Use ${prevHeight} CM`\n                const newHeightBtnTxt = `Use ${enteredHeight} CM`\n                const action = await infoActionSheet(\n                  `Previous Height \"${prevHeight} CM\"`,\n                  `Current Height \"${enteredHeight} CM\"`,\n                  `Inconsistent Height Reading (Height can not be lower than previous height of \" ${this.recentHeight} \"CM. Please SELECT the correct height.)`,\n                  [\n                    {\n                      name: prevHeightBtnTxt,\n                      slot: 'start',\n                      color: 'success'\n                    },\n                    {\n                      name: newHeightBtnTxt,\n                      slot: 'end',\n                      color: 'danger'\n                    }\n                  ]\n                )\n                if (action === newHeightBtnTxt && this.recentHeightObsID) {\n                  if ((await alertConfirmation(\n                    `Do you want to void height observation for ${prevHeight}`\n                  ))) {\n                    await VitalsService.voidObs(this.recentHeightObsID)\n                  }\n                } else {\n                  this.finalHeightValue = prevHeight\n                }\n              }\n            }\n            return true\n          },\n          config: {\n            hiddenFooterBtns : [\n              'Clear'\n            ],\n            onUpdateAlertStatus: async (params: Option[]) => {\n              const weightOption = find(params, { label: 'Weight'})\n              const heightOption = find(params, { label: 'Height'})\n\n              if (!(weightOption && heightOption)) return\n\n              const weight = parseFloat(weightOption.value as string)\n              const height = parseFloat(heightOption.value as string)\n\n              if (weight <= 0 || height <=0) return { \n                label: 'BMI',\n                value: 'N/A',\n                color: '', \n                status: ''\n              }\n\n              const BMI = await BMIService.getBMI(weight, height, this.gender, this.age);\n\n              return {\n                label: 'BMI',\n                value: BMI.index,\n                color: BMI.color, \n                status: BMI.result\n              }\n            },\n            onChangeOption: (activeItem: any) => {\n              if (!activeItem.value && activeItem.other.required) {\n                throw `Value for ${activeItem.label} is required`\n              }else if (activeItem.value) {\n                const errs = this.vitals.validator(activeItem)\n                if(errs && errs.length) throw errs\n              }\n            }\n          },\n          options: () => this.getOptions(),\n        },\n      ];\n    },\n  },\n});\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnskip: _cache[1] || (_cache[1] = $event => (_ctx.activeField = '')),\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Vitals.vue?vue&type=template&id=1f7554f1&ts=true\"\nimport script from \"./Vitals.vue?vue&type=script&lang=ts\"\nexport * from \"./Vitals.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    priority: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByRelevance(findings: Array<GuideLineInterface>) {\n    return findings.sort((a, b) => a.priority < b.priority ? -1 : 1)\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent=''): Array<GuideLineInterface> {\n\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n \n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortByRelevance(matches)\n}\n"],"sourceRoot":""}