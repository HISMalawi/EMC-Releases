{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/Registration.vue?bce7","webpack:///./src/apps/ART/services/registration_service.ts","webpack:///./src/apps/ART/views/encounters/Registration.vue","webpack:///./src/apps/ART/views/encounters/Registration.vue?284e","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","ClinicRegistrationService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","mixins","StagingMixin","data","registration","prescription","dispensation","regimens","customRegimens","vitals","watch","ready","this","canShowStagingFields","VitalsService","showStagingWeightChart","getRegistrationFields","immediate","methods","formData","computedData","_formData$cell_phone_","fObs","hts","patientType","PatientTypeService","createEncounter","savePatientType","hasStaging","submitStaging","saveObservationList","resolveObs","cell_phone_number","value","person","PatientRegistrationService","setPersonID","updatePerson","Person","resolvePerson","Store","invalidate","toastSuccess","nextTask","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","hasLinkageCodeField","id","helpText","type","FieldType","TT_YES_NO","isRequired","condition","f","options","label","values","yesNoOptions","htsSerialNumber","TT_TEXT","has_linkage_code","finalComputedValue","v","tag","htsDataHiddenField","available","optionData","TT_HIDDEN","init","async","ProgramService","getProgramSummary","hiv_status","toDate","test_result_date","htc_serial_number","other","buildValueCoded","hiv_status_date","getLocationName","ever_received_art","last_date_taken_drugs","obsCondition","error","console","defaultValue","summaryMapValue","filter","d","_d$other","map","TT_MULTIPLE_YES_NO","validation","validateSeries","Validation","required","anyEmpty","computedValue","forEach","push","isEmpty","followup_agreement","getCellNumberField","config","customKeyboard","phone","patient","getPhoneNumber","some","l","test","TT_SELECT","generateDateFields","minDate","getBirthdate","maxDate","staging","getDate","received_arvs","estimation","allowUnknown","computeValue","yesNoUnknownOptions","year_date_last_taken_arvs","duration","taken_art_in_last_two_months","HisDate","getDateBeforeByDays","val","ever_registered_at_art_clinic","_","getFacilities","showKeyboard","isFilterDataViaApi","initStaging","beforeNext","age","dayjs","diff","setAge","stagingFacts","ageInMonths","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","setDate","TT_NUMBER","has_transfer_letter","buildValueNumber","isNumber","rangeOf","unload","s","weight","height","bmi","BMIService","getBMI","getGender","getAge","isPedaid","medianWh","getMedianWeightHeight","weightPercentile","parseFloat","e","fullValue","modifier","isNotEmptyandFloat","getStagingFields","new_cd4_percent_available","parseInt","toString","substring","onValue","cd4CountIsValid","toastWarning","CD4_COUNT_PAD_LO","infoActionSheet","name","color","slot","disabled","type_of_confirmatory_hiv_test","timeElapsed","action","confirmatory_hiv_test_location","getStagingSummaryField","__exports__","mapToOption","listOptions","item","computedForm","attr","isPlainObject","getGivenNameField","isName","form","given_name","names","PersonService","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","customOptions","getDobConfig","includeHelpText","summaryLabel","estimateDateFromAge","getSessionDate","allowUnknownMonthDay","AGE_ESTIMATE_FIELD","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","_f$home_region","home_region","dynamicHelpText","_f$home_region2","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","onClick","c","field","length","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","footerBtns","defaultOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","home_village","onClickComponentEvents","setValue","getCurrentDistrictField","_f$home_region3","current_region","getCurrentTAfield","_f$current_region","current_district","getCurrentVillageField","_f$current_region2","current_traditional_authority","number","split","isMWPhoneNumber","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","getFacilityLocationField","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","birthdate_estimated","getPersonAttributeOptions","Patientservice","prop","getPatientInfoString","getID","getNationalID","npid","show","Service","getProgramName","isNotEmptyandNumber","vital","checkMinMax","min","max","p","_val$other","_val$other2","validateAll","j","validator","mergeErrors","errors","holder","element","isValidBPReading","isValidBP","bpSystolic","bpDiastolic","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-18dc9190.f98da73c.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 9, providerID) //TODO: Use encounter type reference name'\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport StagingMixin from \"@/apps/ART/views/encounters/StagingMixin.vue\"\nimport {ClinicRegistrationService} from \"@/apps/ART/services/registration_service\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { toastWarning, toastSuccess} from \"@/utils/Alerts\"\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { BMIService } from \"@/services/bmi_service\"\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\nimport { isEmpty } from 'lodash'\nimport { toDate } from '@/utils/Strs'\nimport { ProgramService } from '@/services/program_service'\nimport { PatientTypeService } from '../../services/patient_type_service'\nimport Person from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from '@/services/patient_registration_service'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [StagingMixin],\n    data: () => ({\n        registration: {} as any,\n        prescription: {} as any,\n        dispensation: {} as any,\n        regimens: [] as Option[],\n        customRegimens: [] as Option[],\n        vitals: {} as any,\n    }),\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (!ready) return\n                // Hide staging fields defined in StagingMixin by Default\n                this.canShowStagingFields = false\n                this.registration = new ClinicRegistrationService(this.patientID, this.providerID)\n                this.vitals = new VitalsService(this.patientID, this.providerID)\n                this.showStagingWeightChart = false\n                this.fields = this.getRegistrationFields()\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any) {\n            const fObs = {...computedData}\n            if (formData.hts != null) {\n                const patientType  = new PatientTypeService(this.patientID, this.providerID)\n                await patientType.createEncounter()\n                await patientType.savePatientType('New patient')\n            }\n\n            await this.registration.createEncounter()\n\n            if (this.hasStaging(formData)) {\n                await this.submitStaging(computedData)\n                await this.vitals.createEncounter()\n                await this.vitals.saveObservationList(\n                    (await this.resolveObs(fObs, 'vitals'))\n                )\n            }\n\n            await this.registration.saveObservationList(\n                (await this.resolveObs(fObs, 'reg'))\n            )\n\n            if (formData?.cell_phone_number?.value) {\n                const person = new PatientRegistrationService()\n                person.setPersonID(this.patientID) \n                await person.updatePerson(\n                    Person.resolvePerson(computedData)\n                )\n                Store.invalidate('ACTIVE_PATIENT')\n            }\n\n            toastSuccess('Clinic registration complete!')\n\n            this.nextTask()\n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.registration.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.registration.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.registration.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        hasLinkageCodeField(): Field {\n            return {\n                id: \"has_linkage_code\",\n                helpText: 'HTS Linkage code',\n                type: FieldType.TT_YES_NO,\n                isRequired: () => true,\n                condition: (f: any) => f.hts === null,\n                options: () => [\n                    {\n                        label: \"Does client have linkage code?\",\n                        value: \"\",\n                        values: this.yesNoOptions(),\n                    }\n                ]\n            }\n        },\n        htsSerialNumber(): Field {\n            return {\n                id: 'hts_serial_number',\n                helpText: 'HTS Linkage code',\n                type: FieldType.TT_TEXT,\n                isRequired: () => true,\n                condition: (f: any) => f.has_linkage_code === 'Yes',\n                finalComputedValue: (v: Option) => {\n                    return {\n                        tag: 'reg',\n                        obs: this.registration.buildValueText('HTC Serial number', v.value)\n                    }\n                }\n            }\n        },\n        htsDataHiddenField(): Field {\n            let available = false\n            let optionData: any = []\n            return {\n                id: 'hts',\n                helpText: 'HTS Information',\n                type: FieldType.TT_HIDDEN,\n                init: async () => {\n                    try {                        \n                        const data: any = await ProgramService.getProgramSummary(this.patientID, 18)\n                        available = data.hiv_status === 'Positive'\n                        if (!available) return true\n                        optionData = [\n                            { \n                                label: 'HIV Status',\n                                value: data.hiv_status\n                            },\n                            { \n                                label: 'Result date',\n                                value: toDate(data.test_result_date),\n                            },\n                            {\n                                label: 'HTS Number',\n                                value: data.htc_serial_number,\n                                other: {\n                                    obs: () => this.registration.buildValueText(\n                                        'HTC Serial number',\n                                        data.htc_serial_number\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Confirmatory test type', \n                                value: 'Rapid test',\n                                other: {\n                                    obs: () => this.registration.buildValueCoded(\n                                        'Confirmatory hiv test type',\n                                        'HIV rapid test'\n                                    )\n                                }\n                            },\n                            {\n                                label: 'Confirmatory test date',\n                                value: toDate(data.hiv_status_date),\n                                other: {\n                                    obs: () => this.registration.buildValueDate(\n                                        'Confirmatory HIV test date', \n                                        data.hiv_status_date\n                                    )\n                                }\n                            },\n                            {\n                                label: 'Confirmatory test location',\n                                value: ClinicRegistrationService.getLocationName(),\n                                other: {\n                                    obs: () => this.registration.buildValueText(\n                                        'Confirmatory HIV test location',\n                                        ClinicRegistrationService.getLocationName()\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Received ART/Prophylaxis before?', \n                                value: data.ever_received_art,\n                                other: {\n                                    obs: () => this.registration.buildValueCoded(\n                                        'Ever received ART', data.ever_received_art\n                                    )\n                                }\n                            },\n                            { \n                                label: 'Last time taken drugs', \n                                value: toDate(data.last_date_taken_drugs),\n                                other: {\n                                    obs: () => this.registration.buildValueDate(\n                                        'Date ART last taken', \n                                        data.last_date_taken_drugs\n                                    ),\n                                    obsCondition: () => data.ever_received_art === 'Yes'\n                                }\n                            }\n                        ]\n                    } catch (error) {\n                        console.error(error)\n                        return false\n                    }\n                    return true\n                },\n                defaultValue() {\n                    return optionData\n                },\n                summaryMapValue: (v: Option) => {\n                    return v\n                },\n                finalComputedValue: (v: Option[]) => {\n                    return {\n                        tag: 'reg',\n                        obs: v.filter(d => d?.other?.obs && (typeof d.other.obsCondition === 'function' \n                                ? d.other.obsCondition()\n                                : true))\n                            .map(d => d.other.obs())\n                    }\n                },\n                condition: () => available\n            }\n        },\n        getRegistrationFields() {\n            return [\n                {\n                    id: 'followup_agreement',\n                    helpText: 'Agrees to follow-up',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    summaryMapValue: ({value, label}: Option) => ({\n                        value,\n                        label: `${label} followup`\n                    }),\n                    validation: (v: any) => this.validateSeries([\n                       () => Validation.required(v), \n                       () => Validation.anyEmpty(v)\n                    ]),\n                    computedValue: (d: Array<Option>) => {\n                        const obs: any = []\n                        d.forEach(({ label, value }: Option) => {\n                            obs.push(this.registration.buildValueCoded(label, value))\n                            obs.push(this.registration.buildValueCoded('Agrees to followup', label))\n                        })\n                        return { tag:'reg', obs }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.followup_agreement)) {\n                            return f.followup_agreement\n                        } else {\n                            return [\n                                {\n                                    label: 'Phone',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                    }\n                                },\n                                {\n                                    label: 'Home visit',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions()\n                                    }\n                                }\n                            ] \n                        }\n                    }\n                },\n                this.htsDataHiddenField(),\n                this.hasLinkageCodeField(),\n                this.htsSerialNumber(),\n                (() => {\n                    return {\n                        ...Person.getCellNumberField(),\n                        config: {\n                            customKeyboard: [\n                                [\n                                    ['1', '2', '3'],\n                                    ['4', '5', '6'],\n                                    ['7', '8', '9'],\n                                    ['',  '0', '']\n                                ],\n                                [ \n                                    [ '+265', '/'],\n                                    [ 'Delete' ]\n                                ]\n                            ]\n                        },\n                        condition: (f: any) => {\n                            const phone = this.patient.getPhoneNumber()\n                            return f.followup_agreement.some((l: any) =>\n                                l.label === 'Phone' && \n                                l.value === 'Yes' && \n                                (!phone || /unknown|n\\/a/i.test(phone))\n                            )\n                        }\n                    }\n                })(),\n                {\n                    id: \"has_linkage_code\",\n                    helpText: 'HTS Linkage number confirmation',\n                    type: FieldType.TT_YES_NO,\n                    summaryMapValue: (v: any) => {\n                        return {\n                            label: \"Has HTS Linkage number?\",\n                            value: v\n                        }\n                    },\n                    validation: (v: string) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: \"Does client have an HTS Linkage number?\",\n                            value: \"\",\n                            values: this.yesNoOptions(),\n                        }\n                    ]\n                },\n                {\n                    id: 'hts_serial_number',\n                    helpText: 'HTS Linkage Number',\n                    type: FieldType.TT_TEXT,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => f.has_linkage_code === 'Yes',\n                    computedValue: (v: Option) => {\n                        return {\n                            tag: 'reg',\n                            obs: this.registration.buildValueText('HTC Serial number', v.value)\n                        }\n                    }\n                },\n                {\n                    id: 'received_arvs',\n                    helpText: 'Ever received ARVs for treatment or prophylaxis?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({value}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever received ART', value\n                        )\n                    }),\n                    condition: (f: any) => f.hts === null,\n                    validation: (v: any) => Validation.required(v),\n                    options: () => this.yesNoOptions()\n                },\n                ...generateDateFields({\n                    id: 'date_last_taken_arvs',\n                    helpText: 'Last taken ARVS',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART last taken', date, isEstimate) \n                        }\n                    }\n                }, this.registration.getDate()),\n                {\n                    id: 'taken_art_in_last_two_months',\n                    helpText: 'Taken ARVs in the last two months?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({value}: Option) => {\n                        return {\n                            tag:'reg',\n                            obs: [\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two months', value\n                                )\n                            ]\n                        }\n                    },\n                    options: () => this.yesNoUnknownOptions(),\n                    condition: (f: any) => f.year_date_last_taken_arvs.value === 'Unknown'\n                },\n                {\n                    id: 'taken_art_in_last_two_weeks',\n                    helpText: \"Taken ARV's in the last two weeks?\",\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option, f: any) => {\n                        let date = ''\n                        const obs = []\n                        let duration = -1\n\n                        if (value === 'Yes') {\n                            duration = 14\n                        } else if (f.taken_art_in_last_two_months.value === 'Yes') {\n                            duration = 60\n                        }\n\n                        if (duration > 0) {\n                            date = HisDate.getDateBeforeByDays(this.registration.getDate(), duration)\n                            obs.push(this.registration.buildValueDateEstimated('Date ART last taken', date))\n                        }\n                        return {\n                            date,\n                            tag:'reg',\n                            obs: [\n                                ...obs,\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two weeks', value\n                                )\n                            ]\n                        }\n                    },\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.taken_art_in_last_two_months.value === 'Yes',\n                    options: () => this.yesNoUnknownOptions()\n                },\n                {\n                    id: 'ever_registered_at_art_clinic',\n                    helpText: 'Ever registered at an ART clinic?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever registered at ART clinic', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'location_of_art_initialization',\n                    helpText: 'Location of ART initiation',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({label}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Location of ART initiation', label\n                        )\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_started_art',\n                    helpText: 'Started ART',\n                    required: true,\n                    init: async () => {\n                        await this.initStaging(this.patient)\n                        return true\n                    },\n                    beforeNext: (date: string) => {\n                        const age = dayjs(date).diff(this.patient.getBirthdate(), 'years')\n                        this.staging.setAge(age)\n                        this.stagingFacts.age = age\n                        this.stagingFacts.ageInMonths = age * 12\n                        return true\n                    },\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.staging.setDate(date)\n                        this.vitals.setDate(date)\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART started', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                {\n                    id: 'previous_art_number',\n                    helpText: 'ART number at previous location',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'ART number at previous location', d.value\n                        )\n                    }),\n                    validation: (val: Option) => Validation.required(val)\n                },\n                {\n                    id: 'has_transfer_letter',\n                    helpText: 'Has staging information?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Has transfer letter', value\n                        )\n                    }),\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                },\n                {\n                    id: 'height',\n                    helpText: 'Height (CM)',\n                    type: FieldType.TT_NUMBER,\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('Height', value)\n                    }),\n                    validation: (val: any) => this.validateSeries([\n                        () => Validation.required(val),\n                        () => Validation.isNumber(val),\n                        () => Validation.rangeOf(val, 40, 222)\n                    ])\n                },\n                {\n                    id: 'weight',\n                    helpText: 'Weight (Kg)',\n                    type: FieldType.TT_TEXT,\n                    unload: async (d: any, s: string, f: any) => {\n                        const weight = f.weight.value\n                        const height = f.height.value\n                        const bmi = await BMIService.getBMI(\n                            weight, height, \n                            this.patient.getGender(),\n                            this.patient.getAge()\n                        )\n\n                        this.stagingFacts.bmi = bmi['index']\n\n                        if (!this.staging.isPedaid()) return\n\n                        const medianWh = await this.patient.getMedianWeightHeight()\n\n                        try {\n                            //TODO: this calculation is already defined in patient_service.. must refactor it to make it reusable here\n                            this.stagingFacts.weightPercentile = parseFloat(weight) / (parseFloat(medianWh[\"weight\"])) * 100\n                        } catch (e) {\n                            this.stagingFacts.weightPercentile = 0\n                        }\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('weight', value)\n                    }),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => this.validateSeries([\n                        () => {\n                            const fullValue = {\n                                ...val, other: { modifier: '.' }\n                            }\n                            return this.vitals.isNotEmptyandFloat(fullValue)\n                        },\n                        () => Validation.rangeOf(val, 1, 300)\n                    ]),\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3', ''],\n                                ['4', '5', '6', ''],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '' , '']\n                            ],\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                /*** \n                    Start Staging Fields\n                ***/\n                ...this.getStagingFields(),\n                /** \n                    End Staging Fields\n                ***/\n                {\n                    id: 'new_cd4_percent_available',\n                    helpText: 'CD4 percent available',\n                    type: FieldType.TT_SELECT,\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => Validation.required(val)\n                },\n                {\n                    id: 'cd4_percent',\n                    helpText: 'CD4 Percent',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.new_cd4_percent_available.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'staging',\n                        obs: this.registration.buildValueNumber(\n                            'CD4 percent', parseInt(value.toString().substring(1)), '%'\n                        )\n                    }),\n                    onValue: (d: Option) => {\n                        if (d.value && !this.staging.cd4CountIsValid(d.value)) {\n                            toastWarning('Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or =')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (val: any) => Validation.required(val),\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: 'type_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.hts === null,\n                    onValue: async (val: Option) => {\n                        if (val.value === 'Not done') {\n                            await infoActionSheet(\n                                'Reminder',\n                                'UNKNOWN HIV CONFIRMATORY TEST',\n                                'Please arrange for a confirmatory test',\n                                [\n                                    { name: 'Agreed', color: 'success', slot: 'start'}\n                                ]\n                            )\n                        }\n                        return true\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Confirmatory hiv test type', value\n                        )\n                    }),\n                    options: (f: any) => ([\n                        { label: 'Rapid antibody test', value: 'HIV rapid test'},\n                        { label: 'DNA PCR', value: 'HIV DNA polymerase chain reaction'},\n                        { label: 'Not done', value: 'Not done', disabled: f.has_linkage_code === 'Yes' }\n                    ])\n                },\n                {\n                    id: 'confirmatory_hiv_test_location',\n                    helpText: 'Location of confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: (d: any) => (d.ever_registered_at_art_clinic && d.ever_registered_at_art_clinic.value) === \"Yes\"? '' : ClinicRegistrationService.getLocationName(),\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Confirmatory HIV test location', d.label\n                        ) \n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.type_of_confirmatory_hiv_test.value != 'Not done',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    beforeNext: async (date: string, formData: any) => {\n                        if (formData.received_arvs.value != 'Yes') {\n                            const timeElapsed = dayjs(this.staging.getDate()).diff(date, 'days')\n                            if (timeElapsed >= 20) {\n                                const action = await infoActionSheet(\n                                    'Data inconsistency warning',\n                                    `Confirmatory Date for newly initiated ART patient is ${timeElapsed} days ago`,\n                                    'Are you sure this is accurate?',\n                                    [\n                                        { name: 'No, Re-enter date', slot: 'start', color: 'success'},\n                                        { name: 'Yes, its accurate', slot: 'end', color: 'danger'}\n                                    ]\n                                )\n                                return action === 'Yes, its accurate'\n                            }\n                        }\n                        return true\n                    },\n                    condition: (f: any) => f.confirmatory_hiv_test_location.value,\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Confirmatory HIV test date', date, isEstimate) \n                        }\n                    },\n                }, this.registration.getDate()),\n                this.getStagingSummaryField('Staging summary')\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=c9e43298&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(customOptions?: Option[]): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Sex',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => !isEmpty(customOptions)\n                ? customOptions as Option[]\n                : ([\n                    {\n                        label: 'Female',\n                        value: 'F'\n                    },\n                    { \n                        label: 'Male',\n                        value: 'M'\n                    }\n                ])\n        }\n    },\n    getDobConfig(includeHelpText = true): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: includeHelpText ? 'Birth' : '',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'District of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Home Country' \n                        : 'District of origin',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (/foreign/i.test(`${f?.home_region?.label}`)) {\n                    return 'Home Country'\n                }\n                return 'District of origin'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'TA of origin',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Village of origin',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Region of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option, f: any) => {\n                if (/use home/i.test(`${val.value}`)) {\n                    return {\n                        person: {\n                            'current_region': f.home_region.label,\n                            'current_district': f.home_district.label,\n                            'current_traditional_authority': f.home_traditional_authority.label,\n                            'current_village': f.home_village.label \n                        }\n                    }\n                }\n                return { person: val.label }\n            },\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions(),\n            config: {\n                footerBtns: [\n                  {\n                    name: \"Same as origin\",\n                    slot: \"end\",\n                    onClickComponentEvents: {\n                      setValue: () => 'Use Home Address'\n                    },\n                    onClick: () => \"Use Home Address\"\n                  }\n                ]\n            }\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            summaryMapValue: (v: Option, f: any) => {\n                return {\n                    label: /foreign/i.test(`${f?.home_region?.label}`)\n                        ? 'Current Country' \n                        : 'District of current residence',\n                    value: v.label\n                }\n            },\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'District of current residence'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value),\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'TA of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Village of current residence',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: (f: any) => {\n                if (!/use home/i.test(`${f.current_region?.label}`)) {\n                    return { label: 'N/A', value: 'N/A'}\n                }\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                appearInSummary: (f: any) => f.default_landmarks.value === 'Other',\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Sex\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other.modifier}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}