{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?534c","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?4c2f","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","TreatmentService","patientID","providerID","this","getFirstValueCoded","screeningResult","treatmentType","referralReason","AppEncounterService","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","summaryData","watch","patient","handler","getSummary","setReason","getFields","deep","methods","reason","showSampleCollected","reasons","includes","formData","computed","createEncounter","encounter","toastWarning","programID","ProgramService","getProgramID","getProgramWorkflows","workflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","stateValue","patient_outcome","value","state","getLocationName","date","getSessionDate","createState","saveState","vals","Object","keys","element","push","obs","Promise","all","saveObservationList","toastSuccess","nextTask","id","helpText","type","FieldType","TT_DATA_TABLE","config","rows","map","k","table","td","dataTableConfig","showIndex","TT_SELECT","validation","val","Validation","required","condition","match","options","mapOptions","computedValue","buildValueText","label","formdata","type_of_sample_collected","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","flowState","SET_PROVIDER","isBdeMode","isBDE","facts","ready","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","patientDashboardUrl","runflowState","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","option","yesNoUnknownOptions","resolveObs","tag","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","validateSeries","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","isCondition","ignored","undefined","prop","every","sortByRelevance","guidelines","target","targetEvent","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-515474f6.764f02f2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n    async getSummary() {\n        const screeningResult = await this.getFirstValueCoded('Screening results');\n        const treatmentType = await this.getFirstValueCoded('Directly observed treatment option');\n        const referralReason = await this.getFirstValueCoded('Referral reason');\n        return {\n          'Screening Result': screeningResult,\n          'Treatment Type': treatmentType,\n          'Referral Reason': referralReason ? referralReason : \"N/A\"  \n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { TreatmentService } from \"@/apps/CxCa/services/CxCaTreatmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ProgramWorkflow } from \"@/interfaces/program_workflow\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    summaryData: {} as any,\n    referralReason: \"\"\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(this.patientID, this.providerID);\n        this.summaryData = await this.reception.getSummary();\n        await this.setReason();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async setReason() {\n      const reason = await this.reception.getFirstValueCoded('Referral reason');\n      this.referralReason = reason ? reason : \"N/A\"\n\n    },\n    showSampleCollected() {\n      const reasons = ['Large Lesion (>75%)','Suspect cancer', 'Further Investigation and Management'];\n      return reasons.includes(this.referralReason);\n    },\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.reception.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] =\n        await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach((w) => {\n        w.states.forEach((f) => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        });\n      });\n      const stateValue = formData.patient_outcome ? formData.patient_outcome.value : 'Continue follow-up';\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[stateValue],\n        date: ProgramService.getSessionDate(),\n      };\n      const saveState = await ProgramService.createState(\n        this.patientID,\n        programID,\n        state\n      );\n      if (!saveState) return toastWarning(\"Unable to update state\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...vals]);\n\n      const obs = await this.reception.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"screening_summary\",\n          helpText: \"Screening Summary\",\n          type: FieldType.TT_DATA_TABLE,\n          config: {\n            rows: () => {\n              return Object.keys(this.summaryData).map((k: string) => {\n                return [table.td(k), table.td(this.summaryData[k])];\n              });\n            },\n          dataTableConfig: {\n            showIndex: false\n          },\n          },\n        },\n        {\n          id: \"figo_staging_results\",\n          helpText: \"FIGO staging results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.referralReason.match(/suspect/gi),\n          options: () =>\n            this.mapOptions([\n              'Cervical stage 1',\n              'Cervical stage 2',\n              'Cervical stage 3',\n              'Cervical stage 4',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('FIGO staging of cervical cancer', value.label)\n          })\n        },\n        {\n          id: \"type_of_sample_collected\",\n          helpText: \"Type of sample collected\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition:()=> this.showSampleCollected(),\n          options: () =>\n            this.mapOptions([\n              'Punch Biopsy',\n              'LLETZ sample',\n              'Not available',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"histology_results\",\n          helpText: \"Histology results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Normal',\n              'CIN 1',\n              'CIN 2',\n              'CIN 3',\n              'Carcinoma in Situ',\n              'Invasive cancer of cervix',\n              'Benign cervical warts',\n              'Not available',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Sample', value.label)\n          })\n        },\n        {\n          id: \"complications\",\n          helpText: \"Complications\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formdata: any) => formdata.type_of_sample_collected.value !== \"Not available\" && this.showSampleCollected(), \n          options: () =>\n            this.mapOptions([\n              'Bleeding',\n              'Pain',\n              'None',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Complications', value.label)\n          })\n\n        },\n        {\n          id: \"referral_outcome\",\n          helpText: \"Treatment performed\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Cryotherapy',\n              'Leep',\n              'Palliative Care',\n              'LLETZ',\n              'Conisation',\n              'Thermocoagulation',\n              'Chronic cervicitis',\n              'Patient refused',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Treatment', value.label)\n          })\n        },\n        {\n          id: \"recommended_plan_of_care\",\n          helpText: \"Recommended plan of care\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          options: () =>\n            this.mapOptions([\n              'Hysterectomy',\n              'Trachelectomy',\n              'Discharged',\n              'Continue follow-up',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueText('Recommended Plan of care', value.label)\n          })\n        },{\n          id: \"patient_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.summaryData['Treatment Type'] !== \"Same day treatment\",\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Continue follow-up',\n              'Pallialative care',\n              'No Dysplasia/Cancer',\n              'Patient died',\n            ]),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=6730f0bc&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    priority: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByRelevance(findings: Array<GuideLineInterface>) {\n    return findings.sort((a, b) => a.priority < b.priority ? -1 : 1)\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent=''): Array<GuideLineInterface> {\n\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n \n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortByRelevance(matches)\n}\n"],"sourceRoot":""}