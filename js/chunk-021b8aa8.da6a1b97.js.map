{"version":3,"sources":["webpack:///./src/views/LabResults.vue?1d08","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?9c2c","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","PatientLabResultService","AppEncounterService","constructor","patientId","patientID","testTypeID","resultDate","testID","createLabResult","measures","postJson","encounterID","date","getTestID","getTestTypeID","setTestTypeID","test","setResultDate","setTestID","getTestsWithoutResults","OrderService","getOrders","status","getTestIndicators","getJson","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","handler","params","patient_id","initData","getFields","deep","immediate","methods","_","c","Object","values","filter","d","tag","map","value","result_date","createEncounter","Store","invalidate","Math","floor","random","toastSuccess","toastDanger","console","error","generateTestIndicatorsFields","this","forEach","i","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","validateVLresults","name","result","modifier","substring","length","isValidVLResult","alertConfirmation","cancelBtnLabel","confirmBtnLabel","isOk","alphaValueIsValid","match","e","numericValueIsValid","isMalariaResult","id","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","orderData","testIndex","tests","isEmpty","concept_id","indicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","TT_MULTIPLE_SELECT","__exports__","DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit","EstimationFieldType","getYearField","showUnknown","primaryFunctions","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","split","year","month","day","validateMinMax","computed","min","Date","max","fullDate","yearValue","monthValue","dayValue","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","isEstimate","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","ageEstimateRegex","AGE_ESTIMATE_FIELD","dayjs","subtract","MONTH_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT"],"mappings":"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","file":"js/chunk-021b8aa8.da6a1b97.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(e)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n            let fields: Array<Field> = []\n            this.testIndicators.forEach((i: any) => {\n               fields = [ \n                   ...fields, \n                   ...this.buildTestIndicatorFields(\n                       i.indicatorId,\n                       i.indicatorName,\n                       i.specimen,\n                       i.testId\n                    )\n                ]\n            })\n            return fields\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) ? 'text' : f[`type_${id}`].value\n                const value = this.isMalariaResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${id}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `num_${id}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${id}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${id}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${id}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${id}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${id}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${id}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${id}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${id}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${id}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=14955db5&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = (v: Option) => {\n        const isEstimate = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = isEstimate ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return field.computeValue(fullDate, isEstimate)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = (val: Option) => {\n        const year = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return field.computeValue(fullDate, true)\n    }\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    ) \n\n    durationEstimate.computedValue = (val: Option) => {\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return field.computeValue(fullDate, true)\n    }\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n"],"sourceRoot":""}