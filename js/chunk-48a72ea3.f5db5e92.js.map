{"version":3,"sources":["webpack:///./src/views/Confirmation.vue?371c","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/ANC/Services/anc_pregnancy_status_service.ts","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/Confirmation.vue","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["_withId","_withScopeId","_pushScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","_createTextVNode","_hoisted_4","_hoisted_5","_createVNode","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_popScopeId","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_col","_resolveComponent","_component_ion_row","_component_ion_toolbar","_component_ion_header","_component_confirmation_card","_component_ion_content","_component_ion_button","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","translucent","_toDisplayString","demographics","patientName","birthdate","gender","_","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","currentVillage","_Fragment","_renderList","cards","card","index","key","title","label","items","values","isLoading","color","size","disabled","facts","patientFound","isAdmin","onClick","onVoid","anc","canInitiateNewPregnancy","slot","onInitiateNewAncPregnancy","_createCommentVNode","nextTask","TargetEvent","FlowState","CONFIRMATION_PAGE_GUIDELINES","priority","targetEvent","ONLOAD","actions","alert","async","action","infoActionSheet","name","SEARCH_BY_NAME","GO_HOME","conditions","globalProperties","ddeEnabled","yes","tableActionSheet","invalidDemographics","GO_BACK","hasInvalidDemographics","scannedNpid","dde","voidedNpids","cols","rows","VIEW_MERGE_AUDIT_FOR_NPID","localNpidDiff","remoteNpidDiff","CREATE_NPID_WITH_REMOTE_DIFF","ASSIGN_NPID","currentNpid","npid","isUnknownOrEmpty","npidHasOverFiveDuplicates","isTrue","RESOLVE_DUPLICATE_NPIDS","npidHasDuplicates","ON_CONTINUE","CONTINUE","FORCE_EXIT","currentOutcome","outcome","patientType","contextualBtn","ADD_AS_DRUG_REFILL","ADD_AS_EXTERNAL_CONSULTATION","ADD_AS_NEW_PATIENT","programName","type","includes","ENROLL","EXIT","enrolledInProgram","enrolled","ACTIVATE_FN","identifiers","useFilingNumbers","UPDATE_DMG","patientIsComplete","isFound","diffRows","diffRowColors","UPDATE_LOCAL_DDE_DIFFS","REFRESH_DDE_DEMOGRAPHICS","hasDemographicConflict","PRINT_NPID","match","RegExp","hasInvalidNpid","userRoles","roles","hasHighViralLoad","isHigh","lmpMonths","INITIATE_ANC_PREGNANCY","currentPregnancyIsOverdue","g","toLowerCase","AncPregnancyStatusService","patientID","providerID","ProgramService","getProgramInformation","this","info","date_of_lnmp","lmp","dayjs","today","date","diff","getLmpInMonths","createEncounter","saveValueCodedObs","AppEncounterService","defineComponent","components","IonContent","IonHeader","IonFooter","IonPage","IonToolbar","IonRow","IonCol","IonButton","ConfirmationCard","defineAsyncComponent","data","app","program","patient","localPatient","ddeInstance","useDDE","programInfo","isReady","programs","localDiffs","givenName","familyName","landmark","phoneNumber","created","initCards","HisApp","getActiveApp","mounted","updateCards","PatientDemographicsExchangeService","setGlobalPropertyFacts","then","query","$route","isEmpty","person_id","patient_barcode","findAndSetPatient","computed","HisDate","toStandardHisDisplayFormat","UserService","methods","i","confirmationSummary","cardItems","keys","Object","length","cardData","catch","e","console","error","c","val","init","asyncValue","value","staticValue","orders","OrderService","getOrders","getID","vlOrders","getViralLoadOrders","isHighViralLoadResult","tests","result","id","req","searchNpid","Patientservice","findByID","findByNpid","handleSearchResults","results","IncompleteEntityError","entity","BadRequestError","Array","isArray","errors","msg","entities","setInvalidParametersFacts","toastDanger","Store","set","setPatientFacts","factPromises","push","setProgramFacts","setDDEFacts","setAncFacts","setViralLoadStatus","getNationalID","validateNpid","Promise","all","setVoidedNpidFacts","onEvent","getDocID","errorExceptions","map","entries","join","reloadPatient","undefined","getFullName","getGivenName","getFamilyName","getAttribute","getGender","getBirthdate","getHomeDistrict","getHomeTA","getHomeVillage","getCurrentDistrict","getCurrentTA","getCurrentVillage","getIdentifiers","get","applicationName","pregnancyIsOverdue","buildDDEDiffs","diffs","comparisons","refs","ref","diffIndexes","indexes","k","local","remote","rowColors","PatientProgramService","getProgram","isValueEmpty","getUserRoles","r","role","ObservationService","getFirstValueCoded","localAndRemoteDiffs","getLocalAndRemoteDiffs","formatDiffValuesByType","warn","findVoidedIdentifier","d","p","$router","assignNpid","modalController","dismiss","toastWarning","callback","findings","matchToGuidelines","finding","state","runFlowState","alertConfirmation","initiateNewAncPregnancy","createNewPregnancyStatus","states","back","enrollProgram","printNpid","delayPromise","createNPID","toastSuccess","alreadyAssigned","res","reassignNpid","PatientPrintoutService","printNidLbl","refreshDemographics","createPatientType","updateLocalDifferences","PatientTypeService","savePatientType","popVoidReason","voidPatient","reason","__exports__","optionsActionSheet","modal","selection","isCondition","ignored","prop","every","Boolean","sortByRelevance","sort","a","b","guidelines","target","matches","guidelineIndex","targetValidations","some","description","text"],"mappings":"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","file":"js/chunk-48a72ea3.f5db5e92.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Confirmation.vue?vue&type=style&index=0&id=099c4f96&scoped=true&lang=css\"","import { toDisplayString as _toDisplayString, createVNode as _createVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nconst _withId = /*#__PURE__*/_withScopeId(\"data-v-099c4f96\")\n\n_pushScopeId(\"data-v-099c4f96\")\nconst _hoisted_1 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_2 = { class: \"his-sm-text\" }\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"Patient Name: \")\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode()\nconst _hoisted_5 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_6 = { class: \"his-sm-text\" }\nconst _hoisted_7 = /*#__PURE__*/_createTextVNode(\"Birthdate: \")\nconst _hoisted_8 = /*#__PURE__*/_createTextVNode()\nconst _hoisted_9 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_10 = { class: \"his-sm-text\" }\nconst _hoisted_11 = /*#__PURE__*/_createTextVNode(\"Gender: \")\nconst _hoisted_12 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_13 = { class: \"his-sm-text\" }\nconst _hoisted_14 = /*#__PURE__*/_createTextVNode(\"Ancestry district: \")\nconst _hoisted_15 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_16 = { class: \"his-sm-text\" }\nconst _hoisted_17 = /*#__PURE__*/_createTextVNode(\"Ancestry TA: \")\nconst _hoisted_18 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_19 = { class: \"his-sm-text\" }\nconst _hoisted_20 = /*#__PURE__*/_createTextVNode(\"Ancestry village: \")\nconst _hoisted_21 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_22 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_23 = { class: \"his-sm-text\" }\nconst _hoisted_24 = /*#__PURE__*/_createTextVNode(\"Current District:\")\nconst _hoisted_25 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_26 = { class: \"his-sm-text\" }\nconst _hoisted_27 = /*#__PURE__*/_createTextVNode(\"Current TA: \")\nconst _hoisted_28 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_29 = { class: \"his-sm-text\" }\nconst _hoisted_30 = /*#__PURE__*/_createTextVNode(\"Current Village: \")\nconst _hoisted_31 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_32 = /*#__PURE__*/_createTextVNode(\" Cancel \")\nconst _hoisted_33 = /*#__PURE__*/_createTextVNode(\"Void Client\")\nconst _hoisted_34 = /*#__PURE__*/_createTextVNode(\" New Pregnancy \")\nconst _hoisted_35 = /*#__PURE__*/_createTextVNode(\" Continue \")\n_popScopeId()\n\nexport const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_col = _resolveComponent(\"ion-col\")\n  const _component_ion_row = _resolveComponent(\"ion-row\")\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")\n  const _component_ion_header = _resolveComponent(\"ion-header\")\n  const _component_confirmation_card = _resolveComponent(\"confirmation-card\")\n  const _component_ion_content = _resolveComponent(\"ion-content\")\n  const _component_ion_button = _resolveComponent(\"ion-button\")\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withId(() => [\n      _createVNode(_component_ion_header, { translucent: true }, {\n        default: _withId(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withId(() => [\n              _createVNode(_component_ion_row, null, {\n                default: _withId(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_1, [\n                        _createVNode(\"span\", _hoisted_2, [\n                          _hoisted_3,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.patientName), 1)\n                        ]),\n                        _hoisted_4,\n                        _hoisted_5,\n                        _createVNode(\"span\", _hoisted_6, [\n                          _hoisted_7,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.birthdate), 1)\n                        ]),\n                        _hoisted_8,\n                        _hoisted_9,\n                        _createVNode(\"span\", _hoisted_10, [\n                          _hoisted_11,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.gender), 1)\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_12, [\n                        _createVNode(\"span\", _hoisted_13, [\n                          _hoisted_14,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryDistrict), 1)\n                        ]),\n                        _hoisted_15,\n                        _createVNode(\"span\", _hoisted_16, [\n                          _hoisted_17,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryTA), 1)\n                        ]),\n                        _hoisted_18,\n                        _createVNode(\"span\", _hoisted_19, [\n                          _hoisted_20,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryVillage), 1)\n                        ]),\n                        _hoisted_21\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withId(() => [\n                      _createVNode(\"div\", _hoisted_22, [\n                        _createVNode(\"span\", _hoisted_23, [\n                          _hoisted_24,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentDistrict), 1),\n                          _hoisted_25\n                        ]),\n                        _createVNode(\"span\", _hoisted_26, [\n                          _hoisted_27,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentTA), 1),\n                          _hoisted_28\n                        ]),\n                        _createVNode(\"span\", _hoisted_29, [\n                          _hoisted_30,\n                          _createVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentVillage), 1),\n                          _hoisted_31\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withId(() => [\n          _createVNode(_component_ion_row, null, {\n            default: _withId(() => [\n              (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.cards, (card, index) => {\n                return (_openBlock(), _createBlock(_component_ion_col, {\n                  \"size-md\": \"4\",\n                  \"size-sm\": \"12\",\n                  key: index\n                }, {\n                  default: _withId(() => [\n                    _createVNode(_component_confirmation_card, {\n                      key: `card-${index}`,\n                      title: card.label,\n                      items: card.values,\n                      isLoading: card.isLoading\n                    }, null, 8, [\"title\", \"items\", \"isLoading\"])\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128 /* KEYED_FRAGMENT */))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withId(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withId(() => [\n              _createVNode(_component_ion_button, {\n                color: \"danger\",\n                size: \"large\",\n                \"router-link\": \"/\"\n              }, {\n                default: _withId(() => [\n                  _hoisted_32\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_button, {\n                disabled: !(_ctx.facts.patientFound && _ctx.isAdmin),\n                color: \"danger left\",\n                size: \"large\",\n                onClick: _ctx.onVoid\n              }, {\n                default: _withId(() => [\n                  _hoisted_33\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"]),\n              (_ctx.facts.anc.canInitiateNewPregnancy)\n                ? (_openBlock(), _createBlock(_component_ion_button, {\n                    key: 0,\n                    slot: \"end\",\n                    size: \"large\",\n                    onClick: _ctx.onInitiateNewAncPregnancy\n                  }, {\n                    default: _withId(() => [\n                      _hoisted_34\n                    ]),\n                    _: 1\n                  }, 8, [\"onClick\"]))\n                : _createCommentVNode(\"\", true),\n              _createVNode(_component_ion_button, {\n                disabled: !_ctx.facts.patientFound,\n                slot: \"end\",\n                color: \"success\",\n                size: \"large\",\n                onClick: _ctx.nextTask\n              }, {\n                default: _withId(() => [\n                  _hoisted_35\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"])\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n})","/**\n * This guideline will manage popup reminders or actions\n * that are brought to a user's attention pertaining to \n * a Patient's state.\n*/\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { infoActionSheet, tableActionSheet } from \"@/utils/ActionSheets\"\nimport { isUnknownOrEmpty } from '@/utils/Strs';\n\nexport enum TargetEvent {\n    ON_CONTINUE = 'oncontinue',\n    ONLOAD = 'onload'\n}\nexport enum FlowState {\n    FORCE_EXIT = 'forceExit',\n    GO_HOME = 'gotoHome',\n    GO_BACK = 'goBack',\n    CONTINUE = 'continue',\n    ENROLL = 'enroll',\n    EXIT = 'exit',\n    ACTIVATE_FN = 'activateFn',\n    ASSIGN_NPID = 'assignNpid',\n    UPDATE_DMG = 'updateDemographics',\n    PRINT_NPID = 'printNPID',\n    CREATE_NPID_WITH_REMOTE_DIFF = 'createNpiDWithRemote',\n    REFRESH_DDE_DEMOGRAPHICS = 'refreshDemographicsDDE',\n    UPDATE_LOCAL_DDE_DIFFS = 'updateLocalDiffs',\n    RESOLVE_DUPLICATE_NPIDS = 'resolveDuplicateNpids',\n    ADD_AS_DRUG_REFILL = 'addAsDrugRefill',\n    ADD_AS_NEW_PATIENT = 'addAsNewPatient',\n    ADD_AS_EXTERNAL_CONSULTATION = 'addAsExternalConsultation',\n    INITIATE_ANC_PREGNANCY = 'initiateNewAncPregnancy',\n    VIEW_MERGE_AUDIT_FOR_NPID = 'viewMergeAuditForNpid',\n    SEARCH_BY_NAME = 'searchByName',\n}\n\nexport const CONFIRMATION_PAGE_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not proceed if patient is not found in the system\" : {\n        priority: 1,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    ' 0 Search results',\n                    'Patient has not been found',\n                    'Choose how to proceed',\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE] Show invalid attributes for a patient whose remote\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                await tableActionSheet(\n                    `DDE Entity Error`,\n                    'Remote patient has invalid attributes',\n                    [ 'Attribute', 'Errors' ],\n                    facts.demographics.invalidDemographics,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.GO_BACK\n            }\n        },\n        conditions: {\n            demographics({hasInvalidDemographics}: any) {\n                return hasInvalidDemographics === true\n            }\n        }\n    },\n    \"[DDE] Do not proceed if NPID is not found and Provide history of voided NPIDS\" : {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await tableActionSheet(\n                    `Voided patients with ID ${facts.scannedNpid}`,\n                    'NPID was not found. Please review available patient with similar ID',\n                    facts.dde.voidedNpids.cols,\n                    facts.dde.voidedNpids.rows,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Merge history',\n                            slot: 'end',\n                            color: 'primary'\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                        \n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Merge history' \n                    ?  FlowState.VIEW_MERGE_AUDIT_FOR_NPID \n                    : action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE] Notify the user to proceed with Remote NPID if local NPID does not match remote\": {\n        priority: 1,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                await infoActionSheet(\n                    'Missing Local NPID',\n                    `Local NPID of \"${dde.localNpidDiff}\" does not match remote \"${dde.remoteNpidDiff}\"`,\n                    `Proceed to Fix issue`,\n                    [\n                        { \n                            name: 'Resolve issue', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CREATE_NPID_WITH_REMOTE_DIFF\n            }\n        },\n        conditions: {\n            dde({localNpidDiff, remoteNpidDiff}: any) {\n                return localNpidDiff != remoteNpidDiff\n            },\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            }\n        }\n    },\n    \"Warn if patient is missing National ID and assign them one\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'Missing National ID',\n                    'Patient was found BUT has no National ID',\n                    'The system is going to assign the patient with a new ID',\n                    [\n                        { \n                            name: 'OK', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            currentNpid: (npid: string) => isUnknownOrEmpty(npid)\n        }\n    },\n    \"Detect NPID over 5 duplicates and prompt the user to resolve them\" : {\n        priority: 1,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                const action = await infoActionSheet(\n                    'More than 5 duplicates found',\n                    `There are more than 5 duplicates for this NPID (${scannedNpid}). Please search by name and gender`,\n                    `Choose how to proceed`,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        },\n                        { \n                            name: 'Search by name', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' ? FlowState.SEARCH_BY_NAME : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            npidHasOverFiveDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Detect NPID duplicates and prompt the user to resolve them\" : {\n        priority: 1,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                await infoActionSheet(\n                    'DUPLICATE NPID',\n                    `NPID ${scannedNpid} is currently assigned to multiple patients`,\n                    'Proceed to resolve the issue',\n                    [\n                        { \n                            name: 'Resolve Duplicate NPIDs', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.RESOLVE_DUPLICATE_NPIDS\n            }\n        },\n        conditions: {\n            npidHasDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Warn before proceeding if patient is deceased based on current Patient state\": {\n        priority: 3,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Deceased Patient',\n                    'Patient outcome is Died!',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: { \n            currentOutcome: (outcome: string) => outcome === 'Patient died' \n        }\n    },\n    \"Warn before proceeding if patient stopped treatment based on current Patient state\": {\n        priority: 3,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Stopped Treatment',\n                    'Patient outcome is Stopped Treatment ',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: {\n            currentOutcome: (outcome: string) => outcome === 'Treatment stopped'\n        }\n    },\n    \"[ART patient visit purpose] Select purpose of visit if patient is Transferred out or Drug refill\": {\n        priority: 3,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({patientType, currentOutcome}: any) => {\n                let contextualBtn: any = []\n                if (patientType === 'External consultation' || currentOutcome === 'Patient transferred out') { \n                    contextualBtn = [\n                        {\n                            name: 'Drug refill', \n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }  \n                if (patientType === 'Drug Refill') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }\n                if (patientType === 'New patient') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        {\n                            name: 'Drug refill', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ] \n                }\n                const action = await infoActionSheet(\n                    'Purpose of visit',\n                    `Patient type: ${patientType} | State: ${currentOutcome}`,\n                    'Please select purspose of the visit',\n                    [\n                        ...contextualBtn,\n                        {\n                            name: 'Continue',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ]\n                )\n                switch(action) { \n                    case 'Drug refill':\n                        return FlowState.ADD_AS_DRUG_REFILL\n                    case 'External Consultation':\n                        return FlowState.ADD_AS_EXTERNAL_CONSULTATION\n                    case 'New Patient':\n                        return FlowState.ADD_AS_NEW_PATIENT\n                    default: \n                        return FlowState.CONTINUE\n                }\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ART',\n            patientType: (type: string, { currentOutcome }: any) => {\n                return ['Drug Refill', 'External consultation'].includes(type) ||\n                    currentOutcome === 'Patient transferred out'\n            }\n        }\n    },\n    \"Prompt patient enrollment in current programme if not enrolled\" : {\n        priority: 4,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Programme Enrollment',\n                    'Patient is not enrolled in current programme, do you want to enroll?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ENROLL : FlowState.EXIT\n            }\n        },\n        conditions: {\n            enrolledInProgram: (enrolled: boolean) => enrolled === false\n        }\n    },\n    \"(ART Filing numbers) Prompt dormant filing number reactivation if patient has a dormant filing number\": {\n        priority: 3,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Filing Numbers',\n                    'Activate dormant #?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ACTIVATE_FN : FlowState.EXIT\n            }\n        },\n        conditions: {\n            programName: (programName: string) => programName === 'ART',\n            identifiers: (identifiers: string[]) => identifiers.includes('Archived filing number'),\n            currentOutcome: (outcome: string) => ![\n                'Treatment stopped', \n                'Patient transferred out', \n                'Patient died'\n            ].includes(outcome),\n            globalProperties({useFilingNumbers}: Record<string, boolean>) {\n                return useFilingNumbers\n            }\n        }\n    },\n    \"[DDE OFF] Prompt the user to update patient demographics when data is incomplete\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.EXIT\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            }\n        }\n    },\n    \"[DDE] Alert When remote Patient demographics dont match Local Demographics \": {\n        priority: 3,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                const action = await tableActionSheet(\n                    'Demographics Mismatch',\n                    'Local Demographics do not match Remote Demographics',\n                    ['Attributes', 'Local', 'Remote'],\n                    dde.diffRows,\n                    [\n                        { \n                            name: 'Use Local',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'Use Remote', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ], \n                    'his-danger-color',\n                    dde.diffRowColors\n                )\n                return action === 'Use Local' \n                    ? FlowState.UPDATE_LOCAL_DDE_DIFFS\n                    : FlowState.REFRESH_DDE_DEMOGRAPHICS\n            }\n        },\n        conditions: {\n            dde({hasDemographicConflict}: any) {\n                return hasDemographicConflict\n            }\n        }\n    },\n    \"[DDE] Alert to print newer NPID when the scanned NPID doesnt match active NPID\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    '[DDE] NATIONAL ID',\n                    `Patient has a newer National Identifier ${currentNpid}`,\n                    'Print and proceed',\n                    [\n                        { \n                            name: 'Print', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ])\n                return FlowState.PRINT_NPID\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            scannedNpid(scannedNpid: string, {currentNpid}: any) {\n                return !scannedNpid.match(new RegExp(currentNpid, 'i'))\n            }\n        }\n    },\n    \"assign newer NPID when the current one is invalid\": {\n        priority: 3,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    'NATIONAL ID',\n                    `Current NPID ${currentNpid} is invalid`,\n                    'Reasign and Print',\n                    [\n                        { \n                            name: 'Reassign', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ]\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === true\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            hasInvalidNpid(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"[DDE ON] Warn program managers when Patient has incomplete demographics. Dont force them to update though\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete data',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            userRoles(roles: string[]) {\n                return roles.includes(\"Program Manager\") === true\n            }\n        }\n    },\n    \"[DDE ON] Force Users to update Incomplete Patient demographics\": {\n        priority: 2,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Patient Demographics',\n                    'Demographic data is incomplete',\n                    'Continue to update',\n                    [\n                        { \n                            name: 'Update', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'Cancel', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Cancel' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            userRoles: (roles: string[]) => {\n                return roles.includes('Program Manager') === false\n            }\n        }\n    },\n    \"Warn the user when patient has high viral load\": {\n        priority: 6,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'High Viral Load',\n                    'Patient has a high viral load, please take immediate action!',\n                    '',\n                    [\n                        { \n                            name: 'OK',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            hasHighViralLoad: (isHigh: boolean)  => isHigh === true\n        }\n    },\n    \"[ANC] Warn last LMP is more than 8 months ago and ask to initiate new pregnancy\": {\n        priority: 10,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({anc}: any) => {\n                const action = await infoActionSheet(\n                    'Pregancy overdue',\n                    `Last menstrual period was ${anc.lmpMonths} months ago!`,\n                    'Would you like to initiate new pregnancy?',\n                    [\n                        { \n                            name: 'Yes',  \n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' \n                    ? FlowState.INITIATE_ANC_PREGNANCY \n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ANC',\n            anc: (anc: any)  => anc.currentPregnancyIsOverdue === true\n        }        \n    },\n    \"[ANC] Exit if client is NOT ELIGIBLE for ANC\": {\n        priority: 1,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Client not eligible for ANC',\n                    `This program is for women eligible for ANC only`,\n                    'If this is a mistake, please update client Demographics or Exit',\n                    [\n                        { \n                            name: 'EXIT',\n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'EDIT DEMOGRAPHICS',\n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'EXIT' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            demographics: ({gender}: any) => {\n                const g = gender.toLowerCase()\n                return g === 'm' || g === 'male'\n            },\n            programName: (name: string) => {\n                return name === 'ANC'\n            } \n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport dayjs from \"dayjs\";\n\nexport class AncPregnancyStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 111, providerID)\n    }\n\n    async getLmpInMonths() {\n        const info = await ProgramService.getProgramInformation(this.patientID)\n        if (info.date_of_lnmp) {\n            const lmp = dayjs(info.date_of_lnmp)\n            const today = dayjs(this.date)\n            return today.diff(lmp, 'months')\n        }\n        return -1\n    }\n\n    async pregnancyIsOverdue() {\n        return (await this.getLmpInMonths()) > 9\n    }\n\n    async canInitiateNewPregnancy() {\n        return (await this.getLmpInMonths()) >= 7\n    }\n\n    async createNewPregnancyStatus() { \n        await this.createEncounter()\n        return this.saveValueCodedObs('Pregnancy status', 'New')\n    }\n}\n","\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport HisApp from \"@/apps/app_lib\"\nimport { defineAsyncComponent, defineComponent } from \"vue\";\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { UserService } from \"@/services/user_service\";\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { Patientservice } from \"@/services/patient_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport { alertConfirmation, toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\"\nimport { Patient } from \"@/interfaces/patient\"\nimport {\n  IonContent,\n  IonHeader,\n  IonFooter,\n  IonPage,\n  IonToolbar,\n  IonRow,\n  IonCol,\n  IonButton,\n  modalController\n} from \"@ionic/vue\";\nimport {\n  FlowState, \n  TargetEvent,\n  CONFIRMATION_PAGE_GUIDELINES\n} from \"@/guidelines/confirmation_page_guidelines\"\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\";\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { IncompleteEntityError, BadRequestError } from \"@/services/service\"\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport { AncPregnancyStatusService } from \"@/apps/ANC/Services/anc_pregnancy_status_service\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\nimport { isUnknownOrEmpty, isValueEmpty } from \"@/utils/Strs\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  name: \"Patient Confirmation\",\n  components: {\n    IonContent,\n    IonHeader,\n    IonFooter,\n    IonPage,\n    IonToolbar,\n    IonRow,\n    IonCol,\n    IonButton,\n    ConfirmationCard: defineAsyncComponent(()=>import(\"@/components/Cards/PatientConfirmationCards.vue\")),\n  },\n  data: () => ({\n    app: {} as any,\n    program: {} as any,\n    patient: {} as any,\n    localPatient: {} as any, // Patient found without dde\n    ddeInstance: {} as any,\n    useDDE: false as boolean,\n    programInfo: {} as any,\n    isReady: false as boolean,\n    cards: [] as any[],\n    facts: {\n      hasHighViralLoad: false as boolean,\n      patientFound: false as boolean,\n      npidHasDuplicates: false as boolean,\n      npidHasOverFiveDuplicates: false as boolean,\n      userRoles: [] as string[],\n      scannedNpid: '' as string,\n      currentNpid: '' as string,\n      hasInvalidNpid: false as boolean,\n      enrolledInProgram: false as boolean,\n      programName: 'N/A' as string,\n      currentOutcome: '' as string,\n      programs: [] as string[],\n      identifiers: [] as string[],\n      patientType: 'N/A' as string,\n      anc: {\n        lmpMonths: -1,\n        canInitiateNewPregnancy: false,\n        currentPregnancyIsOverdue: false\n      },\n      dde: {\n        localNpidDiff: '',\n        remoteNpidDiff: '',\n        voidedNpids: {\n         cols: [] as string[],\n         rows: [] as any\n        },\n        hasDemographicConflict: false,\n        localDiffs: {},\n        diffRows: [],\n        diffRowColors: [] as Array<{indexes: number[]; class: string}>\n      } as any,\n      demographics: {\n        patientIsComplete: false as boolean,\n        hasInvalidDemographics: false as boolean,\n        invalidDemographics: [] as string[],\n        givenName: '' as string,\n        familyName: '' as string,\n        patientName: '' as string,\n        landmark: '' as string,\n        phoneNumber: '' as string,\n        currentDistrict: '' as string,\n        currentTA: '' as string,\n        currentVillage: '' as string,\n        ancestryDistrict: '' as string,\n        ancestryTA: '' as string,\n        ancestryVillage: '' as string,\n        gender: '' as string,\n        birthdate: '' as string,\n      } as any,\n      globalProperties: {\n        useFilingNumbers: false,\n        ddeEnabled: false\n      } as any\n    }\n  }),\n  created() {\n    this.initCards()\n    this.app = HisApp.getActiveApp() || {}\n  },\n  mounted() {\n    if (this.app) {\n      this.updateCards()\n      this.ddeInstance = new PatientDemographicsExchangeService()\n      this.setGlobalPropertyFacts().then(() => {\n        const query = this.$route.query\n        if (!isEmpty(query) && (query.person_id || query.patient_barcode)) {\n          this.findAndSetPatient(query.person_id as any, query.patient_barcode as any)\n        }\n      })\n    }\n  },\n  computed: {\n    demographics(): any {\n      return this.facts.demographics\n    },\n    birthdate(): string {\n      return HisDate.toStandardHisDisplayFormat(\n        this.facts.demographics.birthdate\n      )\n    },\n    isAdmin() {\n      return UserService.isAdmin()\n    }\n  },\n  methods: {\n    initCards() {\n      for(let i=0; i < 6; i++) {\n        this.cards[i] = {\n          label: '-',\n          isLoading: true,\n          values: []\n        }\n      }\n    },\n    async updateCards() {\n      if (typeof this.app.confirmationSummary === 'function') {\n        const cardItems: any = this.app.confirmationSummary(\n          this.patient, this.program, this.facts\n        )\n        const keys: any = Object.keys(cardItems)\n        for(let i = 0; i < this.cards.length; i++) {\n          const cardData = keys[i] ? cardItems[keys[i]]() : []\n          this.cards[i] = {\n            label: keys[i] || '-',\n            isLoading: false,\n            values: cardData\n          }\n          if (typeof cardData === 'object' && cardData.then) {\n            this.cards[i].isLoading = true\n            if (!isEmpty(this.patient)) {\n              cardData.then((data: any) => {\n                this.cards[i].isLoading = false\n                this.cards[i].values = data\n              }).catch((e: any) => {\n                this.cards[i].isLoading = false\n                console.error(`${e}`)\n              })\n            }\n          } else {\n            // Render static label value pairs\n            for (let c=0; c < cardData.length; ++c) {\n              const val = cardData[c]\n              this.cards[i].values[c] = val\n              if (!isEmpty(this.patient)) {\n                if (typeof val.init === 'function') {\n                  await val.init()\n                }\n                if (typeof val.asyncValue === 'function') {\n                  val.asyncValue().then((val: any) => {\n                    this.cards[i].values[c].value = val\n                  }).catch((e: any) => {\n                    this.cards[i].values[c].value = '_ERROR_'  \n                    console.error(`${e}`)\n                  })\n                } else if (typeof val.staticValue === 'function') {\n                  this.cards[i].values[c].value = val.staticValue()\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async setViralLoadStatus() {\n      const orders = await OrderService.getOrders(this.patient.getID())      \n      if(!isEmpty(orders)){\n        const vlOrders = OrderService.getViralLoadOrders(orders)\n        if(!isEmpty(vlOrders)){\n          this.facts.hasHighViralLoad = OrderService.isHighViralLoadResult(vlOrders[0].tests[0].result[0])\n        }\n      }      \n    },\n    /**\n     * Resolve patient by either patient ID or NpID.\n     * Note: \n     *  - DDE Service only supports NPID search.\n    */\n    async findAndSetPatient(id: number | undefined, npid: string | undefined) {\n      let req = null\n      this.isReady = false\n      this.localPatient = {} // Patient found without using DDE\n      if (!this.facts.scannedNpid) {\n        this.facts.scannedNpid = npid || ''\n      }\n      if (this.useDDE && npid) {\n        req = this.ddeInstance.searchNpid(npid)\n      } else if (id) {\n        req = Patientservice.findByID(id)\n      } else {\n        req = Patientservice.findByNpid(npid as string)\n      }\n      this.handleSearchResults(req).then(() => this.isReady = true)\n    },\n    /**\n     * Handle search result promises and handle entity related errors.\n     * This is also an entrypoint to initialise Ui Data and facts\n     */\n    async handleSearchResults(patient: Promise<Patient | Patient[]>) {\n      let results: Patient[] | Patient = []\n      try {\n        results = await patient as Patient[] | Patient\n      } catch (e) {\n        // [DDE] A person might have missing attributes such as home_village, \n        // or home_ta.\n        if (e instanceof IncompleteEntityError && !isEmpty(e.entity)) {\n          results = e.entity\n        } else if (e instanceof BadRequestError && Array.isArray(e.errors)) {\n          const [msg, ...entities] = e.errors\n          if (typeof msg === 'string' && msg === \"Invalid parameter(s)\") {\n            this.setInvalidParametersFacts(entities)\n          }\n        } else {\n          toastDanger(`${e}`, 300000)\n        }\n      }\n\n      // Use local patient if available if DDE never found them\n      if (isEmpty(results) && !isEmpty(this.localPatient)) results = this.localPatient\n      \n      if(Array.isArray(results) && results.length > 1){\n        this.facts.npidHasDuplicates = results.length <= 5\n        this.facts.npidHasOverFiveDuplicates = results.length > 5\n      } else {\n        this.facts.patientFound = !isEmpty(results)\n      }\n\n      if (this.facts.patientFound) {\n        this.patient = new Patientservice(\n          Array.isArray(results)\n            ? results[0]\n            : results\n          )\n        this.updateCards()\n        Store.set('ACTIVE_PATIENT', this.patient)\n        this.setPatientFacts()\n        const factPromises = []\n        factPromises.push(this.setProgramFacts())\n        if (this.useDDE) {\n          factPromises.push(this.setDDEFacts())\n        } \n        if (this.facts.programName === 'ANC') {\n          factPromises.push(this.setAncFacts())\n        }\n        if (this.facts.programName === 'ART') {\n          factPromises.push(this.setViralLoadStatus())\n        }\n        this.facts.currentNpid = this.patient.getNationalID()\n        factPromises.push(this.validateNpid())\n        await Promise.all(factPromises)\n      } else {\n        // [DDE] a user might scan a deleted npid but might have a newer one.\n        // The function below checks for newer version\n        if (this.facts.scannedNpid) this.setVoidedNpidFacts(this.facts.scannedNpid)\n      }\n      this.onEvent(TargetEvent.ONLOAD).then(() => this.isReady = true)\n    },\n    async validateNpid () {\n      if(this.useDDE){\n        this.facts.hasInvalidNpid = !this.patient.getDocID() || (\n          this.patient.getDocID() && isUnknownOrEmpty(this.patient.getNationalID())\n        )\n      } else {\n        const results = await Patientservice.findByNpid(this.facts.currentNpid, {\"page_size\": 2})\n        this.facts.hasInvalidNpid = Array.isArray(results) && results.length > 1\n      }\n    },\n    /**\n     * DDE sometimes sends 400 bad request which contains\n     * a list of invalid demographic attributes \n     */\n    setInvalidParametersFacts(errorExceptions: any) {\n      this.facts.demographics.hasInvalidDemographics = true\n      // Create a turple of attribute and error pairs\n      this.facts.demographics.invalidDemographics =\n        errorExceptions.map((e: any) => {\n          const data = Object.entries(e)\n          const entity = data[0][0]\n          const errors = data[0][1] as string[]\n          return [entity, errors.join(', ')]\n        })      \n    },\n    /**\n     * Reloads patient facts and information.\n     * Note: Use this when you know the patient is loaded\n     */\n    reloadPatient() {\n      return this.findAndSetPatient(this.patient.getID(), undefined)\n    },\n    /**\n     * Facts are used by the Guideline Engine to crosscheck \n     * conditions to execute. The more the data the better\n     * the decision support. These facts are also presented \n     * on the User interface\n    */\n    setPatientFacts() {\n      this.facts.demographics.patientIsComplete = this.patient.patientIsComplete()\n      this.facts.demographics.patientName = this.patient.getFullName()\n      this.facts.demographics.givenName = this.patient.getGivenName()\n      this.facts.demographics.familyName = this.patient.getFamilyName()\n      this.facts.demographics.landmark = this.patient.getAttribute(19)\n      this.facts.demographics.phoneNumber = this.patient.getAttribute(12)\n      this.facts.demographics.gender = this.patient.getGender()\n      this.facts.demographics.birthdate = this.patient.getBirthdate()\n      this.facts.demographics.ancestryDistrict = this.patient.getHomeDistrict()\n      this.facts.demographics.ancestryTA = this.patient.getHomeTA()\n      this.facts.demographics.ancestryVillage = this.patient.getHomeVillage()\n      this.facts.demographics.currentDistrict = this.patient.getCurrentDistrict()\n      this.facts.demographics.currentTA = this.patient.getCurrentTA()\n      this.facts.demographics.currentVillage = this.patient.getCurrentVillage()\n      this.facts.identifiers = this.patient.getIdentifiers()\n        .map((id: any) => id.type.name)\n    },\n    async setGlobalPropertyFacts() {\n      this.facts.globalProperties.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n      this.useDDE = this.facts.globalProperties.ddeEnabled\n      if (this.app.applicationName === 'ART') {\n        this.facts.globalProperties.useFilingNumbers = await Store.get('IS_ART_FILING_NUMBER_ENABLED')\n      }\n    },\n    async setAncFacts() {\n      const anc = new AncPregnancyStatusService(this.patient.getID(), -1)\n      this.facts.anc.canInitiateNewPregnancy = await anc.canInitiateNewPregnancy()\n      this.facts.anc.currentPregnancyIsOverdue = await anc.pregnancyIsOverdue()\n      this.facts.anc.lmpMonths = await anc.getLmpInMonths()\n    },\n    buildDDEDiffs(diffs: any) {\n      const comparisons: Array<string[]> = []\n      const refs: any = {\n        givenName : { label: 'First Name', ref: 'given_name' },\n        familyName: { label: 'Last Name', ref: 'family_name'},\n        birthdate: { label: 'Birthdate', ref: 'birthdate'},\n        gender: { label: 'Gender', ref: 'gender' },\n        phoneNumber: {label: 'Phone number', ref: 'phone_number'},\n        ancestryDistrict: { label: 'Home District', ref: 'home_district'},\n        ancestryTA: { label: 'Home TA', ref: 'home_traditional_authority'},\n        ancestryVillage: { label: 'Home Village', ref: 'home_village'},\n        currentDistrict: { label: 'Current District', ref: 'current_district'},\n        currentTA: { label: 'Current TA', ref: 'current_traditional_authority'},\n        currentVillage: { label: 'Current Village', ref: 'current_village'}\n      }\n      let index = 0\n      const diffIndexes: any = { indexes: [], class: 'his-empty-set-color'}\n\n      for(const k in refs) {\n        let local = this.facts.demographics[k]\n        let remote = local\n\n        if (refs[k].ref in diffs) {\n          diffIndexes.indexes.push(index)\n          local = diffs[refs[k].ref].local\n          remote = diffs[refs[k].ref].remote\n        }\n\n        comparisons.push([\n          refs[k].label,\n          local,\n          remote\n        ])\n        ++index\n      }\n      return {comparisons, rowColors: [diffIndexes]}\n    },\n    async setProgramFacts() {\n      this.facts.programName = this.app.applicationName\n      try {\n        this.program = new PatientProgramService(this.patient.getID())\n        this.programInfo = await this.program.getProgram()\n        Store.set('PATIENT_PROGRAM', this.programInfo)\n        const { program, outcome }: any =  this.programInfo\n        this.facts.enrolledInProgram = !(isValueEmpty(program) || program.match(/n\\/a/i))\n        this.facts.currentOutcome = outcome\n        this.facts.userRoles = UserService.getUserRoles().map((r: any) => r.role)\n        this.facts.patientType = (await ObservationService.getFirstValueCoded(\n          this.patient.getID(), 'Type of patient')) || 'N/A'\n      } catch (e) {\n        console.error(`${e}`)\n      }\n    },\n    /**\n     * Set dde facts if service is enabled.\n     * Please Note that DDE has to be configured per Program in the backend.\n     * If a program isnt configured for DDE, it crashes by default hence \n     * exception handling is required\n     */\n    async setDDEFacts() {\n      try {\n        const localAndRemoteDiffs = (await this.ddeInstance.getLocalAndRemoteDiffs())?.diff\n        this.facts.dde.localDiffs = this.ddeInstance.formatDiffValuesByType(\n          localAndRemoteDiffs, 'local'\n        )\n        const { comparisons, rowColors } = this.buildDDEDiffs(localAndRemoteDiffs)\n        this.facts.dde.diffRows = comparisons\n        this.facts.dde.diffRowColors = rowColors\n        if (localAndRemoteDiffs.npid) {\n          const {local, remote} = localAndRemoteDiffs.npid\n          this.facts.dde.localNpidDiff = local\n          this.facts.dde.remoteNpidDiff = remote\n          delete localAndRemoteDiffs.npid\n        }\n        this.facts.dde.hasDemographicConflict = !isEmpty(localAndRemoteDiffs)\n      } catch (e) {\n        console.warn(e)\n      }\n    },\n    async setVoidedNpidFacts(npid: string) {\n      const cols = [\n        'Name', 'Birthdate', 'Gender', 'Ancestry Home', 'CurrentID', 'Action'\n      ]\n      let rows = []\n      const req = await this.ddeInstance.findVoidedIdentifier(npid)\n      if (req) {\n        rows = req.map((d: any) => {\n          const p = new Patientservice(d)\n          return [\n            p.getFullName(),\n            p.getBirthdate(),\n            p.getGender(),\n            p.getHomeTA(),\n            p.getNationalID(),\n            {\n              type: 'button',\n              name: 'Select',\n              action: async () => {\n                if (!p.patientIsComplete()) {\n                  return this.$router.push(`/patient/registration?edit_person=${p.getID()}`)\n                } else if (p.getNationalID().match(/unknown/i) || !p.getDocID()) {\n                  try {\n                    await p.assignNpid()\n                    await this.findAndSetPatient(p.getID(), undefined)\n                    return modalController.dismiss()\n                  } catch (e) {\n                    toastWarning('Failed to assign npid to patient with unknown npid.')\n                    return console.error(e)\n                  }\n                }\n                await modalController.dismiss()\n                await this.findAndSetPatient(undefined, p.getNationalID())\n              }\n            }\n          ]\n        })\n        this.facts.dde.voidedNpids.cols = cols\n        this.facts.dde.voidedNpids.rows = rows\n      }\n    },\n    /**\n     * Executes CONFIRMATION_PAGE GUIDELINES with given TargetEvent\n    */\n    async onEvent(targetEvent: TargetEvent, callback={}) {\n      const findings = matchToGuidelines(\n        this.facts, CONFIRMATION_PAGE_GUIDELINES, '', targetEvent\n      )\n      for(const index in findings) {\n        const finding = findings[index]\n        if (finding?.actions?.alert) {\n          const state = await finding?.actions?.alert(this.facts)\n          if ((await this.runFlowState(state))\n              === FlowState.FORCE_EXIT) {\n              return false \n            }\n        }\n      }\n      if (typeof callback === 'function') callback()\n    },\n    async onInitiateNewAncPregnancy() {\n      if ((await alertConfirmation('Are you sure you want to initiate new pregnancy?'))) {\n        if ((await this.initiateNewAncPregnancy())) {\n          this.facts.anc.canInitiateNewPregnancy = false\n          this.facts.anc.currentPregnancyIsOverdue = false\n          this.nextTask()\n        } else {\n          toastWarning('Unable to initiate new pregnancy')\n        }\n      }\n    },\n    initiateNewAncPregnancy() {\n      return new AncPregnancyStatusService(this.patient.getID(), -1).createNewPregnancyStatus()\n    },\n    /**\n     * Maps FlowStates defined in the Guideline to\n     * Functions definitions that are executed.\n     */\n    async runFlowState(state: FlowState) {\n      const states: Record<string, Function> = {}\n      states[FlowState.GO_HOME] = () => {\n          this.$router.push('/')\n          return FlowState.FORCE_EXIT\n      }\n      states[FlowState.GO_BACK] = () => {\n        this.$router.back()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ENROLL] = () => {\n        return this.program.enrollProgram()\n      }\n      states[FlowState.ACTIVATE_FN] = () => {\n        this.$router.push(`/art/filing_numbers/${this.patient.getID()}?assign=true`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_DMG] = () => {\n        this.$router.push(`/patient/registration?edit_person=${this.patient.getID()}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.PRINT_NPID] = async () => {\n        await this.ddeInstance.printNpid(this.patient.getID())\n        await delayPromise(1800)\n        return FlowState.CONTINUE\n      }\n      states[FlowState.CREATE_NPID_WITH_REMOTE_DIFF] = async () => {\n        const npid = this.facts.dde.remoteNpidDiff\n        try {\n          if (npid && (await this.ddeInstance.createNPID(npid))) {\n            this.facts.scannedNpid = npid\n            this.facts.currentNpid = npid\n            this.facts.dde.localNpidDiff = npid\n            toastSuccess('Remote NPID successfully updated')\n            await delayPromise(300)\n            await this.ddeInstance.printNpid()\n            await this.findAndSetPatient(undefined, npid)\n            return FlowState.FORCE_EXIT\n          }\n        } catch (e) {\n          const alreadyAssigned = /Identifier already assigned to another patient/i\n          if (e instanceof BadRequestError && e.errors.join(',').match(alreadyAssigned)) {\n            const res = await this.ddeInstance.reassignNpid(this.patient.getDocID())\n            if (res) {\n              this.patient = new Patientservice(res)\n              toastSuccess('Patient has been reassigned NPID')\n              await delayPromise(300)\n              await this.ddeInstance.printNpid()\n              await this.findAndSetPatient(undefined, this.patient.getNationalID())\n              return FlowState.FORCE_EXIT\n            }\n          }\n          toastDanger(`Unable to assign NPID: ${e}`)\n        }\n      }\n      states[FlowState.ASSIGN_NPID] = async () => {\n        await this.patient.assignNpid()\n        await (new PatientPrintoutService(this.patient.getID())).printNidLbl()\n        await delayPromise(300)\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      },\n      states[FlowState.INITIATE_ANC_PREGNANCY] = async () => {\n        await this.initiateNewAncPregnancy()\n        return FlowState.CONTINUE\n      }\n      states[FlowState.VIEW_MERGE_AUDIT_FOR_NPID] = () => {\n        this.$router.push(`/merge/rollback/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.RESOLVE_DUPLICATE_NPIDS] = () => {\n        this.$router.push(`/npid/duplicates/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.REFRESH_DDE_DEMOGRAPHICS] = async () => {\n        await this.ddeInstance.refreshDemographics()\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ADD_AS_DRUG_REFILL] = async () => {\n        await this.createPatientType('Drug Refill')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_NEW_PATIENT] = async () => {\n        await this.createPatientType('New patient')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_EXTERNAL_CONSULTATION] = async () => {\n        await this.createPatientType('External consultation')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.SEARCH_BY_NAME] = () => {\n        this.$router.push('/patient/registration')\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_LOCAL_DDE_DIFFS] = async () => {\n        await this.ddeInstance.updateLocalDifferences(\n          this.facts.dde.localDiffs\n        )\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      if (state in states) {\n        try {\n          return await states[state]()\n        }catch(e) {\n          toastDanger(`${e}`)\n        }\n      }\n      return state\n    },\n    async createPatientType(patientType: 'Drug Refill' | 'External consultation' | 'New patient') {\n      const type = new PatientTypeService(this.patient.getID(), -1)\n      await type.createEncounter()\n      await type.savePatientType(patientType)\n    },\n    async onVoid() {\n      if (!this.isReady) {\n        return toastWarning('Please wait...')\n      }\n      popVoidReason(async (reason: string) => {\n        try {\n          await Patientservice.voidPatient(this.patient.getID(), reason)\n          this.$router.push('/')\n        } catch (e) {\n          toastDanger(`${e}`)\n        }\n      }, 'void-modal')\n    },\n    nextTask() {\n      if (!this.isReady) {\n        return toastWarning('Please wait...')\n      }\n      this.onEvent(TargetEvent.ON_CONTINUE, () => {\n        nextTask(this.patient.getID(), this.$router)\n      })\n    }\n  }\n})\n","import { render } from \"./Confirmation.vue?vue&type=template&id=099c4f96&scoped=true&ts=true\"\nimport script from \"./Confirmation.vue?vue&type=script&lang=ts\"\nexport * from \"./Confirmation.vue?vue&type=script&lang=ts\"\n\nimport \"./Confirmation.vue?vue&type=style&index=0&id=099c4f96&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-099c4f96\"]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    priority: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByRelevance(findings: Array<GuideLineInterface>) {\n    return findings.sort((a, b) => a.priority < b.priority ? -1 : 1)\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent=''): Array<GuideLineInterface> {\n\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n \n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortByRelevance(matches)\n}\n"],"sourceRoot":""}