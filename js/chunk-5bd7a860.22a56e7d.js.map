{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/services/drug_order_service.ts","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Prescription.vue"],"names":["RegimenService","Service","constructor","getJson","getProgramID","patientId","date","getSessionDate","DrugOrderService","orders","this","postJson","dispensations","map","order","patientID","pageSize","drugID","params","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","onOnIndex","$event","fieldComponent","activeField","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","Target","FlowState","TargetEvent","PRESCRIPTION_GUIDELINES","priority","actions","alert","regimenName","infoActionSheet","name","slot","color","EXIT","target","ARV_REGIMENS","targetEvent","ON_VALUE","conditions","regimenCode","code","includes","medicationOrders","filter","i","match","length","regimenCodeStr","sideEffectsTable","columns","rows","action","tableActionSheet","CONTINUE","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","modal","optionsActionSheet","facts","currentRegimenStr","role","selection","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","state","hangingPillsStatus","INTERVAL_SELECTION","drugs","d","hangingPills","hanging","drug","some","Boolean","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","data","enabled","ON_BUILD","prescriptionType","type","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","defineComponent","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","gender","contraindications","regimenDrugs","watch","ready","PrescriptionService","providerID","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","gotoPatientDashboard","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","patient","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","isEmpty","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","immediate","handler","drug_id","deep","methods","ProgramService","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","form","encounter","createEncounter","setNextVisitInterval","value","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","Store","invalidate","nextTask","findings","matchToGuidelines","index","finding","onBuildOptions","label","other","toString","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","HTN_SESSION_KEY","Prescription","JSON","parse","isPlainObject","e","console","warn","getRegimenStarterpack","setCustomDrugs","push","HisDate","toStandardHisDisplayFormat","regimenCategories","getPatientRegimens","options","r","alternative_drug_name","concept_name","sort","buildIntervalOptions","intervals","parseInt","config","getDrugEstimates","getDrugFrequency","drugName","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","condition","validation","val","Validation","required","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","async","getCustomIngridients","showKeyboard","hiddenFooterBtns","size","visible","visibleOnStateChange","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","__exports__","AdverseEffectsCategories","AppEncounterService","super","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","getCachedConceptName","getSideEffects","getRegimens","getARVs","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","concept_id","patientWeight","contraindication","getConceptID","obs","getObs","forEach","o","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","getFirstValueCoded","yes","meds","Object","values","pills","getAll","value_numeric","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","dosage","getDrugDosages","Promise","all","req","allSideEffects","parseFloat","packs","roundedPacks","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","Date","setDate","getDate","pack_size","tabs","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs"],"mappings":"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","file":"js/chunk-5bd7a860.22a56e7d.js","sourcesContent":["import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                await this.prescription.loadHangingPills()\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const drugs = await this.prescription.getCustomIngridients()\n                        return drugs.map((drug: any ) => ({\n                            label: drug.name,\n                            value: drug.drug_id,\n                            other: { ...drug }\n                        }))\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                visibleOnStateChange: (state: Record<string, any>) => {\n                                    return state.index === 1\n                                },\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=2bacc768&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}