{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","ConsultationService","AppEncounterService","constructor","patientID","providerID","getFamilyPlanningMethods","getJson","obs","ObservationService","getFirstObs","value_text","match","obsInValidPeriod","getDrugSideEffects","getProgramID","date","getClient","getFirstValueCoded","req","id","isEmpty","lastScreened","duration","dayjs","diff","secondCheck","getFirstValueText","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug","drug_inventory_id","familyPlanningMethods","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","async","getDefaultDate","form","field","datePart","defaultValue","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","toString","validation","c","required","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","Service","getSessionDate","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","skipSummary","onFinishAction","onFinish","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","consultation","watch","ready","handler","this","getFields","immediate","methods","computedData","createEncounter","resolveObs","saveObservationList","$router","back","yesNoOptions","Validation","buildValueCoded","has_hypertension","buildValueDate","__exports__"],"mappings":"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","file":"js/chunk-473deef6.2bd4d3da.js","sourcesContent":["import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { ObservationService } from \"@/services/observation_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    consultation: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready)  {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.consultation.createEncounter();\n      const obs = await this.resolveObs(computedData)\n      await this.consultation.saveObservationList(obs)\n      this.$router.back()\n    },\n    getFields(): Field[] {\n      return [\n        {\n          id: \"has_hypertension\",\n          helpText: \"Does the patient have hypertension\",\n          type: FieldType.TT_SELECT,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (v: Option) => ObservationService.buildValueCoded(\"Patient has hypertension\", `${v.value}`),\n        },\n        ...generateDateFields(\n          {\n            condition: (f: any) => f.has_hypertension.value === 'Yes',\n            id: \"hypertension_diagnosis\",\n            helpText: \"Date the patient was diagnosed with hypertension\",\n            required: true,\n            estimation: {\n              allowUnknown: false\n            },\n            computeValue: (date: string) =>  ObservationService.buildValueDate(\"Hypertension diagnosis date\", date)\n          },\n          ConsultationService.getSessionDate()\n        )\n      ]\n    }\n  }\n})\n","import { render } from \"./hypertension_diagnosis.vue?vue&type=template&id=2396c654&ts=true\"\nimport script from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}