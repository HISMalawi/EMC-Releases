{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/views/EncounterMixin.vue","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?4d8b","webpack:///./src/apps/ANC/anc_global_props.ts","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue","webpack:///./src/apps/ANC/Views/Encounters/LabResults.vue?9f2f"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","infoActionSheet","name","slot","color","action","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","optionsActionSheet","role","modal","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","this","$emit","EstimationFieldType","getYearField","id","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","async","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","validateMinMax","minDate","min","Date","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","isCondition","ignored","prop","sortByRelevance","guidelines","target","targetEvent","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","ANC_GLOBAL_PROP","recencyEssayActivated","GlobalPropertyService","isProp","RECENCY_ESSAY_ACTIVATED","IonPage","mixins","EncounterMixinVue","arvNumber","hivStatus","artStatus","arvStartDate","riskOfPreclampsia","service","AncLabResultService","loadSubsequentVisit","loadArtStatus","ANC_PROP","getFields","createEncounter","saveObservationList","printLabResults","TT_SUMMARY","isHivPositive","getHivStatus","getArtStatus","getArvStartDate","getArvNumber","TT_MULTIPLE_YES_NO","isPregnancyTestDone","lab_results","isPrengnacyTestDone","concept","Validation","buildValueCoded","getDate","prev_hiv_test_result","buildValueDate","buildValueText","on_art","recency_essay","TT_MULTIPLE_SELECT","onValueUpdate","listData","l","isChecked","hivPos","urine","isAtRiskOfPreEclampsia","alertConfirmation","header","cancelBtnLabel","confirmBtnLabel","ok","footerBtns","onClickComponentEvents","refreshOptions","o","onClick","exitsForm","available_test_results","hiv_status","on_art_1","rangeOf","buildValueNumber","buildOptionsOnce","available_urine_tests"],"mappings":"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","file":"js/chunk-0659713c.eb6e313c.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    priority: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByRelevance(findings: Array<GuideLineInterface>) {\n    return findings.sort((a, b) => a.priority < b.priority ? -1 : 1)\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent=''): Array<GuideLineInterface> {\n\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n \n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortByRelevance(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum ANC_GLOBAL_PROP {\n    RECENCY_ESSAY_ACTIVATED = 'recency_essay_activated'\n}\n\nfunction recencyEssayActivated() {\n    return GlobalPropertyService.isProp(`${ANC_GLOBAL_PROP.RECENCY_ESSAY_ACTIVATED}=Yes`)\n}\n\nexport default {\n    recencyEssayActivated\n}","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncLabResultService } from \"@/apps/ANC/Services/anc_lab_result_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper'\nimport HisDate from \"@/utils/Date\"\nimport ANC_PROP from \"@/apps/ANC/anc_global_props\"\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { find } from 'lodash'\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    arvNumber: '' as string,\n    hivStatus: '' as string,\n    artStatus: '' as string,\n    arvStartDate: '' as string,\n    recencyEssayActivated: false as boolean,\n    riskOfPreclampsia: null as boolean | null,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncLabResultService(this.patientID, this.providerID)\n            await this.service.loadSubsequentVisit()\n            await this.service.loadArtStatus()\n            this.recencyEssayActivated = await ANC_PROP.recencyEssayActivated()\n            this.formFields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      await this.service.printLabResults()\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'art_summary',\n                helpText: 'ART Summary',\n                type: FieldType.TT_SUMMARY,\n                condition: () => this.service.isHivPositive(),\n                options: () => {\n                    return [\n                        {\n                            label: 'HIV Status', \n                            value: `\n                                <b style=\"color:${this.service.isHivPositive() ? 'red': 'green'}\">\n                                    ${this.service.getHivStatus()}\n                                </b>\n                            `\n                        },\n                        {\n                            label: 'On Art', value: this.service.getArtStatus() || 'N/A'\n                        },\n                        {\n                            label: 'Art Start date', value: HisDate.toStandardHisDisplayFormat(this.service.getArvStartDate()) || 'N/A'\n                        },\n                        {\n                            label: 'ARV Number', value: this.service.getArvNumber() || 'N/A'\n                        }\n                    ]\n                }\n            },\n            {\n                id: 'lab_results',\n                helpText: 'Lab Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: () => !this.service.isPregnancyTestDone && !this.hivStatus,\n                options: (f: any) => {\n                    if (f.lab_results) {\n                        return f.lab_results\n                    }\n                    const options: Option[] = []\n                    if (!this.service.isPrengnacyTestDone) {\n                        options.push(this.toYesNoOption('Pregnancy test done', { concept: 'B-HCG'}))\n                    }\n                    if (!this.service.hivStatus) {\n                        options.push(this.toYesNoOption('Previous HIV test done', { concept: 'Previous HIV test done'}))\n                    }\n                    return options\n                },\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => v.map(d => this.service.buildValueCoded(d.other.concept, d.value))\n            },\n            {\n                id: 'prev_hiv_test_result',\n                helpText: 'Previous HIV test results',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => this.inArray(\n                    f.lab_results, (v: Option) => v.label === 'Previous HIV test done' && v.value === 'Yes'), \n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive',\n                        'Unknown'\n                    ])\n                },\n                computedValue: (v: Option) => this.service.buildValueCoded('Previous HIV Test Results', v.value)\n            },\n            ...generateDateFields({\n                id: 'prev_hiv_test_date',\n                helpText: 'Previous HIV test',\n                required: true,\n                minDate: () => this.patient.getBirthdate(),\n                maxDate: () => this.service.getDate(),\n                estimation: {\n                    allowUnknown: false\n                },\n                condition: (f: any) => f.prev_hiv_test_result?.value ? true : false,\n                computeValue: (date: string) => this.service.buildValueDate('Previous HIV Test Date', date)\n            }),\n            {\n                id: 'on_art',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive',\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art.value === 'Yes'\n            },\n            {\n                id: 'recency_essay',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.prev_hiv_test_result.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,\n                options: (f: any) => {\n                    if (f.recency_essay) return f.recency_essay\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-Term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'available_test_results',\n                helpText: 'Available Lab Tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option[]) => {\n                    if (find(v, { label: 'None'})) {\n                        return this.service.buildValueCoded('Lab test done', 'No')\n                    }\n                    return null\n                },\n                onValueUpdate(listData: Option[], value: Option) {\n                    return listData.map(l => {\n                        if (value.value === 'None' && l.value !='None') {\n                            l.isChecked = false\n                        }\n                        if (value.value != 'None' && value.isChecked && l.value === 'None') {\n                            l.isChecked = false\n                        }\n                        return l\n                    })\n                },\n                options: async (f: any) => {\n                    const options: Option[] = []\n                    const hivPos = !this.service.isHivPositive() ? f.prev_hiv_test_result?.value === 'Positive' : true\n                    if (!hivPos) {\n                        options.push(this.toOption('HIV'))\n                    }\n                    options.push(this.toOption('HB'))\n                    options.push(this.toOption('Syphilis'))\n                    options.push(this.toOption('Malaria'))\n                    options.push(this.toOption('Blood Group'))\n                    const urine: Option = {\n                        label: 'Urine',\n                        value: 'Urine',\n                        isChecked: false\n                    }\n                    if (this.riskOfPreclampsia === null) {\n                        this.riskOfPreclampsia = await this.service.isAtRiskOfPreEclampsia()\n                        if (this.riskOfPreclampsia) {\n                            const ok: boolean = await alertConfirmation(\n                                'Select urine test to conduct urine protein test', {\n                                header: 'Client is at risk of pre-eclampsia.',\n                                cancelBtnLabel: 'Remind later',\n                                confirmBtnLabel: 'Select Urine Test'\n                            })\n                            urine.isChecked = ok\n                        }\n                    }\n                    return [...options, urine, this.toOption('None')]\n                },\n                config: {\n                    footerBtns: [\n                        {\n                            name: \"None\",\n                            slot: \"end\",\n                            onClickComponentEvents: {\n                                refreshOptions: (_: any, listData: Option[]) => {\n                                    return listData.map(o => {\n                                        o.isChecked = o.label === 'None'\n                                        return o\n                                    })\n                                }\n                            },\n                            onClick: () => 'None'\n                        }\n                    ]\n                },\n                exitsForm: (f: any) => find(f.available_test_results, {label: 'None'}),\n            },\n            {\n                id: 'hiv_status',\n                helpText: 'HIV Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HIV'),\n                computedValue: (v: Option) => this.service.buildValueCoded('HIV status', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive',\n                        'Inconclusive'\n                    ])\n                }\n            },\n            {\n                id: 'on_art_1',\n                helpText: 'Patient on ART',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.hiv_status.value === 'Positive',\n                computedValue: (v: Option) => this.service.buildValueCoded('On Art', v.value),\n                options: () => this.yesNoOptions()\n            },\n            {\n                id: 'arv_number_1',\n                helpText: 'ARV Number',\n                type: FieldType.TT_TEXT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueText('Art number', v.value),\n                condition: (f: any) => f.on_art_1.value === 'Yes'\n            },\n            {\n                id: 'recency_essay_1',\n                helpText: 'Rapid Recency Essay - Asante Results',\n                type: FieldType.TT_MULTIPLE_YES_NO,\n                condition: (f: any) => f.hiv_status.value === 'Positive' && this.recencyEssayActivated,\n                computedValue: (v: Option[]) => v ? v.map(d => this.service.buildValueCoded(d.label, d.value)) : null,                \n                options: () => {\n                    return [\n                        this.toYesNoOption('Line 1. Control Line Present'),\n                        this.toYesNoOption('Line 2. Positive Verification Line Present'),\n                        this.toYesNoOption('Line 3. Long-term Line Present')\n                    ]\n                }\n            },\n            {\n                id: 'hb_result',\n                helpText: 'HB Test Result (g/dl)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 2, 16)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('HB Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('HB'),\n            },\n            {\n                id: 'syphilis',\n                helpText: 'Syphilis Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Syphilis Test Result', v.value),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Syphilis'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'malaria',\n                helpText: 'Malaria Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Malaria'),\n                computedValue: (v: Option) => this.service.buildValueCoded('Malaria Test Result', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Negative',\n                        'Positive'\n                    ])\n                }\n            },\n            {\n                id: 'blood_group',\n                helpText: 'Blood Group Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Blood Group'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood group', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"A+\",\n                        \"A-\",\n                        \"B+\",\n                        \"B-\",\n                        \"AB+\",\n                        \"AB-\",\n                        \"O+\",\n                        \"O-\"\n                    ])\n                }\n            },\n            {\n                id: 'available_urine_tests',\n                helpText: 'Available Urine Tests Results',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_test_results.map((v: Option) => v.value).includes('Urine'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Protein\",\n                        \"Glucose\",\n                        \"WBC\",\n                        \"RBC\",\n                        \"Nitrate\"\n                    ])\n                },\n                config: {\n                    buildOptionsOnce: true\n                }\n            },\n            {\n                id: 'protein',\n                helpText: 'Urine Protein Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Protein'),\n                computedValue: (v: Option) => this.service.buildValueText('Urine protein', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"(+)\",\n                        \"+\",\n                        \"++\",\n                        \"+++\",\n                        \"++++\",\n                    ])\n                }\n            },\n            {\n                id: 'glucose',\n                helpText: 'Glucose Test Result (mg/dl)',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Glucose'),\n                computedValue: (v: Option) => this.service.buildValueText('Blood glucose', v.value),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Normal\",\n                        \"+\",\n                        \"++\",\n                        \"+++\"\n                    ])\n                }\n            },\n            {\n                id: 'wbc',\n                helpText: 'White Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('White blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('WBC'),\n            },\n            {\n                id: 'rbc',\n                helpText: 'Red Blood Cells Test Result (cmm)',\n                type: FieldType.TT_NUMBER,\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, 1, 1000000)\n                ]),\n                computedValue: (v: Option) => this.service.buildValueNumber('Red blood cells', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('RBC'),\n            },\n            {\n                id: 'nitrate',\n                helpText: 'Nitrate Test Result',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => this.service.buildValueCoded('Urine Nitrate Test', v.value),\n                condition: (f: any) => f.available_urine_tests.map((o: Option) => o.value).includes('Nitrate'),\n                options: () => {\n                    return this.mapStrToOptions([\n                        \"Negative\",\n                        \"Trace\",\n                        \"Positive\"\n                    ])\n                }\n            }\n        ]\n    }\n  }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=43205c6e&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}