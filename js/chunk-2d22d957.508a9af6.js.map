{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/hypertension_diagnosis.vue"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","skipSummary","onFinishAction","onFinish","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","consultation","watch","ready","handler","this","ConsultationService","patientID","providerID","getFields","immediate","methods","_","computedData","createEncounter","obs","resolveObs","saveObservationList","$router","back","id","helpText","type","FieldType","TT_SELECT","options","yesNoOptions","validation","val","Validation","required","computedValue","v","ObservationService","buildValueCoded","value","generateDateFields","condition","f","has_hypertension","estimation","allowUnknown","computeValue","date","buildValueDate","getSessionDate","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,OAAQV,EAAKU,OACbC,aAAa,EACbC,eAAgBZ,EAAKa,UACpB,KAAM,EAAG,CAAC,SAAU,mB,wFCEVC,+BAAgB,CAC7BC,OAAQ,CAACC,QACTC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVC,aAAc,KAEhBC,MAAO,CACLC,MAAO,CACLC,QAAQD,GACFA,IACFE,KAAKJ,aAAe,IAAIK,OAAoBD,KAAKE,UAAWF,KAAKG,YACjEH,KAAKd,OAASc,KAAKI,cAGvBC,WAAW,IAGfC,QAAS,CACP,eAAeC,EAAQC,SACfR,KAAKJ,aAAaa,kBACxB,MAAMC,QAAYV,KAAKW,WAAWH,SAC5BR,KAAKJ,aAAagB,oBAAoBF,GAC5CV,KAAKa,QAAQC,QAEfV,YACE,MAAO,CACL,CACEW,GAAI,mBACJC,SAAU,qCACVC,KAAMC,OAAUC,UAChBC,QAAS,IAAMpB,KAAKqB,eACpBC,WAAaC,GAAaC,OAAWC,SAASF,GAC9CG,cAAgBC,GAAcC,OAAmBC,gBAAgB,2BAA4B,GAAGF,EAAEG,WAEjGC,eACD,CACEC,UAAYC,GAAwC,QAA7BA,EAAEC,iBAAiBJ,MAC1Cf,GAAI,yBACJC,SAAU,mDACVS,UAAU,EACVU,WAAY,CACVC,cAAc,GAEhBC,aAAeC,GAAkBV,OAAmBW,eAAe,8BAA+BD,IAEpGrC,OAAoBuC,uB,qBCnD9B,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASlE,KAErD","file":"js/chunk-2d22d957.508a9af6.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    skipSummary: true,\n    onFinishAction: _ctx.onFinish\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { ObservationService } from \"@/services/observation_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    consultation: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready)  {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      await this.consultation.createEncounter();\n      const obs = await this.resolveObs(computedData)\n      await this.consultation.saveObservationList(obs)\n      this.$router.back()\n    },\n    getFields(): Field[] {\n      return [\n        {\n          id: \"has_hypertension\",\n          helpText: \"Does the patient have hypertension\",\n          type: FieldType.TT_SELECT,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (v: Option) => ObservationService.buildValueCoded(\"Patient has hypertension\", `${v.value}`),\n        },\n        ...generateDateFields(\n          {\n            condition: (f: any) => f.has_hypertension.value === 'Yes',\n            id: \"hypertension_diagnosis\",\n            helpText: \"Date the patient was diagnosed with hypertension\",\n            required: true,\n            estimation: {\n              allowUnknown: false\n            },\n            computeValue: (date: string) =>  ObservationService.buildValueDate(\"Hypertension diagnosis date\", date)\n          },\n          ConsultationService.getSessionDate()\n        )\n      ]\n    }\n  }\n})\n","import { render } from \"./hypertension_diagnosis.vue?vue&type=template&id=2396c654&ts=true\"\nimport script from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./hypertension_diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}