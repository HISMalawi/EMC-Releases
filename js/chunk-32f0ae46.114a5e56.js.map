{"version":3,"sources":["webpack:///./node_modules/eslint-loader/index.js","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/apps/ART/views/encounters/Prescription.vue"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","this","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","getSessionDate","DrugOrderService","orders","dispensations","order","pageSize","params","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","onOnIndex","$event","fieldComponent","activeField","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","Target","FlowState","TargetEvent","PRESCRIPTION_GUIDELINES","priority","actions","alert","regimenName","infoActionSheet","name","slot","color","EXIT","target","ARV_REGIMENS","targetEvent","ON_VALUE","conditions","regimenCode","code","includes","medicationOrders","filter","i","match","length","regimenCodeStr","sideEffectsTable","columns","rows","action","tableActionSheet","CONTINUE","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","modal","optionsActionSheet","facts","currentRegimenStr","role","selection","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","hangingPillsStatus","INTERVAL_SELECTION","d","hangingPills","hanging","drug","some","Boolean","join","isChildBearing","isBearing","lpvType","toLowerCase","weight","data","enabled","ON_BUILD","prescriptionType","type","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","defineComponent","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","gender","contraindications","regimenDrugs","watch","ready","PrescriptionService","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","gotoPatientDashboard","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","patient","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","isEmpty","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","immediate","handler","drug_id","deep","methods","ProgramService","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","form","encounter","createEncounter","setNextVisitInterval","value","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","Store","invalidate","nextTask","findings","matchToGuidelines","index","finding","onBuildOptions","label","other","toString","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","Prescription","JSON","parse","isPlainObject","e","console","warn","getRegimenStarterpack","setCustomDrugs","push","HisDate","toStandardHisDisplayFormat","regimenCategories","getPatientRegimens","options","r","alternative_drug_name","concept_name","buildIntervalOptions","intervals","parseInt","config","getDrugEstimates","getDrugFrequency","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","condition","validation","val","Validation","required","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","async","getCustomIngridients","showKeyboard","hiddenFooterBtns","size","visible","visibleOnStateChange","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","__exports__","AdverseEffectsCategories","super","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","getCachedConceptName","getSideEffects","getRegimens","getARVs","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","concept_id","patientWeight","contraindication","getConceptID","obs","getObs","forEach","o","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","yes","meds","getAll","value_numeric","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","dosage","getDrugDosages","Promise","all","req","allSideEffects","parseFloat","packs","roundedPacks","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","Date","setDate","getDate","pack_size","tabs","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs"],"mappings":"kHAAA,wEAGYA,EAHZ,yBAGA,SAAYA,GACVA,qCADF,CAAYA,MAAe,KAIrB,MAAOC,UAA4BC,OACrCC,YAAYC,EAAmBC,GAC7B,MAAMD,EAAW,GAAIC,GAGN,kBAACC,EAAaC,GAC7B,OAAKD,EAAM,KAASC,EAAM,GACjB,SAECD,GAAO,KAAOA,EAAM,KAASC,GAAO,KAAOA,EAAM,IAClD,UAECD,GAAO,KAAOC,EAAM,KAAQD,GAAO,IACpC,UAECA,GAAO,KAAOA,EAAM,KAASC,GAAO,IACrC,UAEF,MAQc,wBAACC,GACtB,MAAQC,EAAkBC,GAAsBC,OAAOC,OAAOJ,GAC3DK,KAAK,CAACC,EAAQC,IAAWD,EAAEE,KAAOD,EAAEC,KAAO,EAAI,GAC/CC,IAAKC,GAAY,KAAKC,WAAWD,EAAGZ,IAAKY,EAAGX,MAC/C,MAA4B,WAArBE,GAAuD,WAAtBC,EAG1CU,gBACE,OAAOC,OAAmBC,oBAAoB,KAAKlB,UAAW,2BAGhEmB,iBACE,OAAOF,OAAmBC,oBAAoB,KAAKlB,UAAW,4BAGjD,kBACb,MAAMoB,QAAcH,OAAmBI,mBAAmB,KAAKrB,UAAW,oBAC1E,QAAOoB,GAAkB,QAAVA,EAGD,mBACd,aAAatB,OAAoBwB,QAAQ,aAAa,KAAKtB,sBAExC,wBACnB,aAAaF,OAAoBwB,QAAQ,aAAa,KAAKtB,8BAE3C,qBAChB,aAAaF,OAAoBwB,QAAQ,aAAa,KAAKtB,wCAE3C,mBAACuB,EAAgBC,GACjC,aAAa1B,OAAoB2B,SAAS,aAAa,KAAKzB,+BAAgC,CAC1F,QAAWuB,EACXC,MAAOA,IAGQ,oBAACE,GAClB,aAAa5B,OAAoB2B,SAAS,aAAaE,KAAK3B,uCAAwC0B,GAE9E,2BACtB,MAAO,CACL,CACE,QAAW,IACX,UAAa,oBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,0BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,0BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,2BACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,IACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,eAEf,CACE,QAAW,GACX,UAAa,yBACb,MAAS,SACT,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAa,gBAInBE,WACI,MAAO,CACPC,IAAK,CACHC,MAAO,CACL,CACEC,SAAU,oBACVR,OAAQ,IACRS,OAAQ,OACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,OAGfJ,SAAU,KACVK,MAAO,IAETC,UAAW,CACTV,MAAO,CACL,CACEC,SAAU,yBACVR,OAAQ,IACRS,OAAQ,MACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,MAEb,CACEV,SAAU,0BACVR,OAAQ,IACRS,OAAQ,OACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,OAGfP,SAAU,KACVK,MAAO,IAETG,WAAY,CACVZ,MAAO,CACL,CACEC,SAAU,0BACVR,OAAQ,IACRS,OAAQ,MACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,MAEb,CACEV,SAAU,2BACVR,OAAQ,IACRS,OAAQ,OACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,OAGfP,SAAU,KACVK,MAAO,IAETI,SAAU,CACRb,MAAO,CACL,CACEC,SAAU,yBACVR,OAAQ,IACRS,OAAQ,OACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,MAEb,CACEV,SAAU,yBACVR,OAAQ,GACRS,OAAQ,QACRC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,UAAW,KACXC,kBAAmB,KACnBC,UAAW,KACXG,UAAW,OAGfP,SAAU,KACVK,MAAO,Q,oCArPjB,kDAEM,MAAOK,UAAuBC,OAChC9C,cACI,QAGoB,2BACpB,OAAO,KAAKuB,QAAQ,YAAY,KAAKwB,mCAGvB,mBAACC,GACf,OAAO,KAAKzB,QAAQ,YAAY,KAAKwB,0BAA2B,CAAC,WAAcC,IAGxD,8BACvB,OAAO,KAAKzB,QAAQ,YAAY,KAAKwB,6CAGjB,yBAACC,EAAmBnC,EAAK,KAAKoC,kBAClD,OAAO,KAAK1B,QAAQ,YAAY,KAAKwB,kBAAkBC,IAAa,CAACnC,Y,oCAnB7E,kDAEM,MAAOqC,UAAyBJ,OAClC9C,cACI,QAGS,cAACmD,GACV,OAAO,KAAKzB,SAAS,cAAeyB,GAGT,gCAACA,GAC5B,OAAO,KAAKzB,SAAS,gBAAiB,CAClC,WAAc,KAAKqB,eACnBK,cAAeD,EAAOrC,IAAKuC,IAAD,CACtB,KAAQ,KAAKJ,iBACb,cAAiBI,EAAM,YACvB,SAAYA,EAAM,iBAKJ,2BAACpD,GACvB,OAAO,KAAKsB,QAAQ,cAAe,CAAE,WAActB,IAGnC,qBAACA,GACjB,OAAO,KAAKsB,QAAQ,cAAe,CAC/B,WAActB,EACd,KAAQ,KAAKgD,iBACb,WAAc,KAAKF,iBAIJ,wBAAC9C,EAAmBqD,EAAS,KAChD,OAAO,KAAK/B,QAAQ,cAAe,CAC/B,WAActB,EACd,WAAc6C,OAAQC,eACtB,UAAaO,IAIM,4BAACrD,GACxB,OAAO,KAAKsB,QAAQ,YAAYtB,wBAAiC,CAC7D,KAAQ,KAAKgD,iBACb,WAAc,KAAKF,iBAIN,sBAAC9C,EAAmBuB,EAAgBX,EAAK,KAAKoC,kBAC/D,MAAMM,EAAS,CAAE,QAAW/B,EAAQ,KAAQX,GAC5C,OAAO,KAAKU,QAAQ,YAAY,KAAKwB,2BAA2B9C,eAAwBsD,GAGpE,yBAACP,EAAmBO,GACxC,OAAO3B,KAAKL,QAAQ,eAAgB,CAChC,WAAcyB,EACd,WAAc,KAAKD,kBAChBQ,O,2DCzDT,SAAUC,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,MAAMC,EAA+BC,8BAAkB,qBAEvD,OAAQC,yBAAcC,yBAAaH,EAA8B,CAC/DI,aAAa,EACbC,UAAWV,EAAO,KAAOA,EAAO,GAAKW,GAAWZ,EAAKa,eAAe,IACpEC,YAAad,EAAKa,eAClBE,sBAAuBf,EAAKgB,kBAC5BC,OAAQjB,EAAKiB,OACbC,eAAgBlB,EAAKmB,UACpB,KAAM,EAAG,CAAC,cAAe,wBAAyB,SAAU,mB,IDErDC,EAIAC,EAIAC,E,6GARZ,SAAYF,GACRA,iCACAA,+CAFJ,CAAYA,MAAM,KAIlB,SAAYC,GACRA,iBACAA,yBAFJ,CAAYA,MAAS,KAIrB,SAAYC,GACRA,wBACAA,wBACAA,8BAHJ,CAAYA,MAAW,KAKhB,MAAMC,EAA8D,CACvE,kDAAmD,CAC/CC,SAAU,EACVC,QAAS,CACLC,MAAO,OAASC,wBACNC,eACF,uBACAD,EACA,0EACA,CACI,CAAEE,KAAM,QAASC,KAAM,MAAOC,MAAO,WAEzC,oBAEOV,EAAUW,OAG7BC,OAAQb,EAAOc,aACfC,YAAab,EAAYc,SACzBC,WAAY,CACRC,YAAYC,GACR,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IAAIC,SAASD,IAE1CE,iBAAiB/C,GACb,OAAOA,EAAOgD,OAAOC,MAAK,GAAGA,GAAIC,MAAM,SAAwBC,QAAU,KAIrF,iFAAkF,CAC9ErB,SAAU,EACVC,QAAS,CACLC,MAAO,OAASoB,iBAAgBC,uBAC5B,MAAM,QAAEC,EAAF,KAAWC,GAASF,EACpBG,QAAeC,eACjB,wCAAwCL,EAAiB,GACzDE,EAASC,EACT,CACI,CAAEpB,KAAM,uBAAwBC,KAAM,SACtC,CAAED,KAAM,wBAAyBC,KAAM,MAAOC,MAAO,WAEzD,oBAEJ,MAAkB,yBAAXmB,EAAoC7B,EAAUW,KAAOX,EAAU+B,WAG9EnB,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACRiB,eAAeC,GACX,OAAOA,GAEXC,mBAAmBpG,GAAc,YAAEqG,IAC/B,OAAOrG,GAAQqG,KAI3B,iDAAkD,CAC9CjC,SAAU,EACVC,QAAS,CACLC,MAAO,UACH,MAAMwB,QAAeQ,eACjB,iBACA,GACA,CACI,qLACA,mIAEJ,CACI,CAAE7B,KAAM,yBAA0BC,KAAM,SACxC,CAAED,KAAM,wBAAyBC,KAAM,MAAOC,MAAO,WAEzD,qBAEJ,MAAkB,2BAAXmB,EAAsC7B,EAAUW,KAAOX,EAAU+B,WAGhFnB,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACRsB,IAAIA,GACA,OAAOA,EAAM,GAEjBrB,YAAYC,GACR,OAAe,IAARA,KAInB,uEAAwE,CACpEf,SAAU,EACVC,QAAU,CACNC,MAAO,UACH,MAAMkC,QAAcC,eAChB,oCAAoCC,EAAMC,qBAC1C,uCACA,CACI,gBACA,mDACA,wBACA,sBACA,eACA,oBACA,gBACA,SAEJ,CACI,CAAElC,KAAM,SAAUC,KAAK,QAASC,MAAO,UACvC,CAAEF,KAAM,WAAYC,KAAM,MAAOkC,KAAM,YAI/C,OAAIJ,EAAMK,WAA6B,UAAhBL,EAAMV,QACzBY,EAAMI,gBAAkBN,EAAMK,UACvB5C,EAAU+B,UAEd/B,EAAUW,OAGzBC,OAAQb,EAAOc,aACfC,YAAab,EAAYc,SACzBC,WAAY,CACRC,YAAYC,GAAc,mBAAE4B,IACxB,OAA8B,GAAvBA,GAA4B5B,GAAQ4B,KAIvD,8EAA+E,CAC3E3C,SAAU,EACVC,QAAS,CACLC,MAAO,UACH,MAAMwB,QAAetB,eACjB,kCACA,GAAIkC,EAAMM,yBACV,GAAIN,EAAMnC,YACV,CACI,CAAEE,KAAM,SAAUC,KAAM,QAASC,MAAO,UACxC,CAAEF,KAAM,yBAA0BC,KAAM,QAE5C,kBAGJ,MAAe,2BAAXoB,GACAY,EAAMO,mBAAoB,EACnBhD,EAAU+B,UAEd/B,EAAUW,OAGzBC,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACRsB,IAAIA,GACA,OAAOA,EAAM,GAEjBrB,YAAYC,GACR,OAAgB,KAATA,GAEX6B,yBAAyBlG,GACrB,MAAO,CAAC,aAAc,iBAAiBsE,SAAStE,MAI5D,+FAAgG,CAC5FsD,SAAU,EACVC,QAAS,CACLC,MAAO,UACH,MAAMwB,QAAetB,eACjB,kCACA,GAAIkC,EAAMM,yBACV,GAAIN,EAAMnC,YACV,CACI,CAAEE,KAAM,SAAUC,KAAM,QAASC,MAAO,UACxC,CAAEF,KAAM,yBAA0BC,KAAM,QAE5C,kBAGJ,MAAe,2BAAXoB,GACAY,EAAMO,mBAAoB,EACnBhD,EAAU+B,UAEd/B,EAAUW,OAGzBC,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACRC,YAAYC,GACR,MAAO,CAAC,EAAG,EAAG,GAAGC,SAASD,IAE9B6B,yBAAyBlG,GACrB,MAAO,CAAC,aAAc,iBAAiBsE,SAAStE,MAI5D,oCAAqC,CACjCsD,SAAU,EACVC,QAAS,CACLC,MAAO,UACH,MAAMwB,QAAgBtB,eAClB,+BACA,qBAAsB,GACtB,CACI,CAAEC,KAAM,KAAMC,KAAM,QAASC,MAAO,WACpC,CAAEF,KAAM,MAAOC,KAAM,QAEzB,kBAOJ,OAJIgC,EAAMQ,mBADK,QAAXpB,EAC2B,qCAEA,kCAExB7B,EAAU+B,WAGzBnB,OAAQb,EAAOmD,mBACfpC,YAAab,EAAY+B,YACzBhB,WAAY,CACT/D,MAAMkG,GAAkB,aAAEC,IACrB,MAAMC,EAAUF,EAAEnH,IAAIsH,GAAQF,EAAajC,SAASmC,IACpD,OAAOD,EAAQE,KAAKC,YAIhC,qEAAuE,CACnErD,SAAU,EACVC,QAAS,CACLC,MAAO,OAAQC,kBACX,MAAMuB,QAAetB,eACjB,iDACAD,EACA,CACI,4CACA,yDACA,8EACA,gDACFmD,KAAK,KACP,CACI,CAAEjD,KAAM,yBAA0BC,KAAM,SACxC,CAAED,KAAM,wBAAyBC,KAAM,MAAOC,MAAO,WAEzD,oBAEJ,MAAkB,2BAAXmB,EAAsC7B,EAAUW,KAAOX,EAAU+B,WAGhFnB,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACRC,YAAYC,GACR,OAAOA,GAAQ,IAEnBwC,eAAeC,GACX,OAAOA,KAInB,6FAA+F,CAC3FxD,SAAU,EACVC,QAAS,CACLC,MAAO,UACH,MAAMwB,QAAetB,eACjB,wBACA,GACA,8DACA,CACI,CAAEC,KAAM,WAAYC,KAAM,SAC1B,CAAED,KAAM,UAAWC,KAAK,OACxB,CAAED,KAAM,OAAQC,KAAK,QAEzB,kBAGJ,OADAgC,EAAMmB,QAAU/B,EAAOgC,cAChB7D,EAAU+B,WAGzBnB,OAAQb,EAAOc,aACfC,YAAab,EAAY+B,YACzBhB,WAAY,CACR8C,OAAOA,GACH,OAAOA,GAAU,GAAKA,GAAU,IAEpC7C,YAAYC,GACR,OAAgB,KAATA,GAAwB,IAATA,KAIlC,8DAA+D,CAC3Df,SAAU,EACV4D,KAAM,CACFC,SAAS,GAEbpD,OAAQb,EAAOmD,mBACfpC,YAAab,EAAYgE,SACzBjD,WAAY,CACRkD,iBAAiBC,GACb,MAAgB,YAATA,GAEXC,iBAAiBC,GACb,OAAOA,EAAW,IAEtBrB,kBAAkBsB,GACd,OAAOA,GAEXrD,YAAYC,GACR,MAAO,CAAC,EAAG,EAAG,EAAG,IAAIC,SAASD,MAI1C,wGAA0G,CACtGf,SAAU,EACV4D,KAAM,CACFC,SAAS,GAEbpD,OAAQb,EAAOmD,mBACfpC,YAAab,EAAYgE,SACzBjD,WAAY,CACRkD,iBAAiBC,GACb,MAAgB,YAATA,GAEX/C,iBAAiB/C,GACb,OAAOA,EAAOrC,IAAIsF,MAAK,GAAGA,GAAIC,MAAM,SAAwBgC,KAAKC,UAErEe,qBAAqBC,GAAe,iBAACJ,IACjC,OAAOK,KAAKC,MAAMN,EAAmB,IAAMI,MAM9CG,EAA+D,CACxE,kDAAmD,CAC/CC,QAAS,cACTzE,SAAU,EACVa,WAAY,CACRsC,KAAKH,GACD,OAAO,GAAGA,GAAI5B,MAAM,6BAIhC,0CAA2C,CACvCqD,QAAS,cACTzE,SAAU,EACVa,WAAY,CACRsC,KAAKH,GACD,QAAQ,GAAGA,GAAI5B,MAAM,8B,oDE5VrC,MAAMsD,EAAmB,CAAEC,MAAQ,CAAEC,SAAS,oBAAqBC,aAAc,iBAAkBtE,MAAO,QAASuE,WAAY,UAEhHC,mCAAgB,CAC3BC,OAAQ,CAACC,QACTrB,KAAM,KAAM,CACR9G,MAAO,GACPoI,aAAc,GACdC,eAAgB,GAChB9F,eAAgB,GAChB+F,cAAe,GACfC,YAAa,GACb/C,MAAO,CACHH,KAAM,EACNmD,OAAQ,GACR3B,QAAS,EACT1B,YAAa,GACbsB,gBAAgB,EAChBQ,iBAAkB,GAClBK,qBAAsB,EACtBzB,oBAAqB,EACrBJ,kBAAmB,GACnBY,KAAM,GACNrG,MAAO,GACPyI,kBAAmB,GACnBzD,gBAAgB,EAChBP,iBAAkB,GAClBS,mBAAoB,GACpBlB,aAAc,EACdQ,eAAgB,GAChBnB,YAAa,GACbqF,aAAc,GACdvC,aAAc,GACdP,gBAAiB,GACjBG,mBAAmB,EACnBC,mBAAoB,GACpBF,yBAA0B,GAC1Ba,QAAS,GACTxC,iBAAkB,GAClBgD,iBAAkB,KAG1BwB,MAAO,CACHC,MAAO,CACH,cAAcA,GACV,IAAKA,EAAO,OAIZ,GAHA/I,KAAKuI,aAAe,IAAIS,OAAoBhJ,KAAK3B,UAAW2B,KAAK1B,kBAC3D0B,KAAKuI,aAAaU,6BAClBjJ,KAAKuI,aAAaW,uBACnBlJ,KAAKuI,aAAaY,8BAAgCnJ,KAAKuI,aAAaa,cAErE,OADAC,eAAa,qFACNrJ,KAAKsJ,6BAEVtJ,KAAKuI,aAAagB,yBAClBvJ,KAAKuI,aAAaiB,0BAClBxJ,KAAKuI,aAAakB,2BAClBzJ,KAAKuI,aAAamB,wBAClB1J,KAAKuI,aAAaoB,8BAClB3J,KAAKuI,aAAaqB,iCAElB5J,KAAK6J,UAAU7J,KAAK8J,SAEtB9J,KAAKuI,aAAawB,0BAClB/J,KAAKyI,cAAgBzI,KAAKuI,aAAayB,oBAG3C,MAAMC,EAAWjK,KAAKkK,kBAEjBC,qBAAQF,KAAWjK,KAAKyI,cAAgB,IAAIzI,KAAKyI,iBAAkBwB,IAEpEjK,KAAKuI,aAAaa,qBACZpJ,KAAKuI,aAAa6B,2BACxBpK,KAAKG,MAAQH,KAAKuI,aAAa8B,0BAC/BrK,KAAK0C,eAAiB,uBAEd1C,KAAKuI,aAAa+B,uBAA0BH,qBAAQnK,KAAKyI,iBACjEzI,KAAKG,MAAQH,KAAKyI,eAEtBzI,KAAKwI,qBAAuBxI,KAAKuK,oBACjCvK,KAAK8C,OAAS9C,KAAKwK,aAEvBC,WAAW,GAEftK,MAAO,CACHuK,QAAQvK,GACJH,KAAK2F,MAAMxF,MAAQA,EAAMjB,IAAImH,GAAKA,EAAEsE,UAExCF,WAAW,EACXG,MAAM,IAGdC,QAAS,CACL,gBAAgBf,GACZ9J,KAAK0I,kBAAoBoC,OAAeC,sBAAsBjB,EAAQkB,SACtEhL,KAAK2F,MAAMH,IAAMsE,EAAQmB,SACzBjL,KAAK2F,MAAMgD,OAASmB,EAAQoB,YAC5BlL,KAAK2F,MAAMqB,aAAe8C,EAAQqB,kBAClCnL,KAAK2F,MAAMW,aAAetG,KAAKuI,aAAa6C,kBAC5CpL,KAAK2F,MAAMM,yBAA2BjG,KAAKuI,aAAa8C,oBACxDrL,KAAK2F,MAAMC,kBAAoB5F,KAAK0I,YAAY4C,gBAChDtL,KAAK2F,MAAMK,mBAAqBhG,KAAKuL,mBAAmBvL,KAAK0I,YAAY4C,iBACzEtL,KAAK2F,MAAMrB,iBAAmBtE,KAAKuI,aAAaiD,sBAChDxL,KAAK2F,MAAMiD,kBAAoB5I,KAAKuI,aAAakD,uBACjDzL,KAAK2F,MAAM8B,qBAAuBzH,KAAKuI,aAAamD,0BACpD1L,KAAK2F,MAAMN,mBAAqBrF,KAAKuI,aAAaoD,wBAClD3L,KAAK2F,MAAML,YAAc0D,OAAoB3H,iBAC7CrB,KAAK2F,MAAMiB,eAAiBkD,EAAQlD,kBAExC,eAAegF,GACX,MAAMC,QAAkB7L,KAAKuI,aAAauD,kBAE1C9L,KAAKuI,aAAawD,qBAAqBH,EAAK3I,EAAOmD,oBAAoB4F,OAEvE,MAAMC,EAAUjM,KAAKkM,SAASlM,KAAKG,OAEnC,IAAK0L,EAAW,OAAOxC,eAAa,wCAEpC,MAAM8C,QAAkBnM,KAAKuI,aAAa6D,gBAAgBH,GAE1D,IAAIE,EAAW,OAAO9C,eAAa,iCAE/BrJ,KAAK2F,MAAMI,uBACL/F,KAAKuI,aAAa8D,uBAAuBrM,KAAK2F,MAAMI,iBAG1D/F,KAAK2F,MAAMQ,0BACLnG,KAAKuI,aAAa+D,sBAAsBtM,KAAK2F,MAAMQ,oBAE7DoG,eAAa,+BACbC,OAAMC,WAAW,mBACjBzM,KAAK0M,YAET,cAAc5I,EAAgBE,GAC1B,MAAM2I,EAAWC,eAAkB5M,KAAK2F,MAAOvC,EAAyBU,EAAQE,GAChF,IAAI,MAAM6I,KAASF,EAAU,OACzB,MAAMG,EAAUH,EAASE,GAEzB,UAAIC,QAAJ,IAAIA,GAAJ,UAAIA,EAASxJ,eAAb,OAAI,EAAkBC,MAAO,OACzB,MAAMxD,QAAQ,OAAM+M,QAAN,IAAMA,GAAN,UAAMA,EAASxJ,eAAf,aAAM,EAAkBC,MAAMvD,KAAK2F,QACjD,GAAI5F,IAAUmD,EAAUW,KACpB,OAAO,GAGnB,OAAO,GAEXkJ,eAAejJ,EAAgBE,GAC3B,MAAM2I,EAAWC,eAAkB5M,KAAK2F,MAAOvC,EAAyBU,EAAQE,GAChF,IAAI,MAAM6I,KAASF,EAAU,CACzB,MAAMG,EAAUH,EAASE,GAEzB,GAAIC,EAAQ7F,KAAM,OAAO6F,EAAQ7F,KAErC,MAAO,IAEX,iBAAgB,MAAE+F,EAAF,MAAShB,EAAT,MAAgBiB,IAC5BjN,KAAK2F,MAAMmB,QAAU,GACrB9G,KAAK2F,MAAMQ,mBAAqB,GAChCnG,KAAK2F,MAAMO,mBAAoB,EAC/BlG,KAAK2F,MAAMnC,YAAc,GAAGwI,MAAUgB,KACtChN,KAAK2F,MAAMhB,eAAiBqH,EAAMkB,WAClClN,KAAK2F,MAAMxB,YAAcnE,KAAKuL,mBAAmBS,EAAMkB,YACvDlN,KAAK2F,MAAMkD,aAAeoE,EAAMpE,aAChC7I,KAAK2F,MAAMxF,MAAQ8M,EAAMpE,aAAa3J,IAAKmH,GAAWA,EAAEsE,SAExD,MAAMwC,EAAcnN,KAAKuI,aAAa6E,4BAA4BpN,KAAK2F,MAAMxF,OAC7EH,KAAK2F,MAAMR,gBAAkBgF,qBAAQgD,GACrCnN,KAAK2F,MAAMf,iBAAmB5E,KAAKqN,sBAAsBF,IAE7D,4BACI,MAAMG,QAActN,KAAKuN,QAAQtK,EAAOc,aAAcZ,EAAY+B,aAClE,IAAI/E,EAAQ,GAEZ,QAAKmN,IAEDtN,KAAK2F,MAAMmB,QACZ3G,QAAcH,KAAKwN,cACXxN,KAAK2F,MAAMO,mBACnB/F,QAAcH,KAAKyN,sBACftD,qBAAQhK,KACPA,EAAQH,KAAK2F,MAAMkD,eAGvB1I,EAAQH,KAAK2F,MAAMkD,aAEvB7I,KAAKG,MAAQ,IAAIH,KAAKyI,iBAAkBtI,IACjC,IAEXqN,cACI,OAAOxN,KAAKuI,aAAamF,kBACrB1N,KAAK2F,MAAMmB,QAAS9G,KAAK2F,MAAMxB,cAGvC+F,kBACI,IACI,MAAMyD,EAAcC,eAAeC,QAAQ5P,OAAgB6P,cAC3D,GAA2B,kBAAhBH,EAA0B,CACjC,MAAM1G,EAAO8G,KAAKC,MAAML,GACxB,GAAIM,2BAAchH,IAASA,EAAKjH,KAAK3B,WACjC,OAAO4I,EAAKjH,KAAK3B,YAG3B,MAAO6P,GACLC,QAAQC,KAAKF,GAEjB,MAAO,IAEXT,sBACI,OAAOzN,KAAKuI,aAAa8F,sBACrBrO,KAAK2F,MAAMxB,YAAanE,KAAK2F,MAAMqB,SAG3CsH,eAAenO,GACXH,KAAKG,MAAQA,EAAMjB,IAAKsH,GAAiBA,EAAKyG,QAElDI,sBAAsBF,GAClB,MAAMtI,EAAU,CAAC,OAAQ,sBAAuB,kBAC1CC,EAAO,GACb,IAAI,MAAM7F,KAAQkO,EAAa,CAC3B,MAAMvE,EAAoB5I,KAAK2F,MAAMiD,kBAAkB3J,IAAS,GAChE6F,EAAKyJ,KAAK,CACNC,OAAQC,2BAA2BxP,GACnC2J,EAAkBjC,KAAK,MACvBwG,EAAYlO,GAAM0H,KAAK,QAG/B,MAAO,CAAE9B,UAASC,SAEtB,4BACI,MAAM4J,QAA0B1O,KAAKuI,aAAaoG,qBAC5CC,EAAU,GAChB,IAAI,MAAM5C,KAAS0C,EAAmB,CAClC,MAAM7F,EAAe6F,EAAkB1C,GACjCgB,EAAQnE,EAAa3J,IAAK2P,GAC5BA,EAAEC,uBAAyBD,EAAEE,cAAcjQ,OAAO6H,KAAK,OAE3DiI,EAAQL,KAAK,CACTvB,QACAhB,QACAiB,MAAO,CACHpE,kBAIZ,OAAO+F,GAEXI,uBACI,MAAMC,EAAY,CACd,CAAEjC,MAAO,UAAWhB,MAAO,IAC3B,CAAEgB,MAAO,UAAWhB,MAAO,IAC3B,CAAEgB,MAAO,WAAYhB,MAAO,IAC5B,CAAEgB,MAAO,WAAYhB,MAAO,IAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,WAAYhB,MAAO,KAC5B,CAAEgB,MAAO,YAAahB,MAAO,KAC7B,CAAEgB,MAAO,YAAahB,MAAO,KAC7B,CAAEgB,MAAO,YAAahB,MAAO,MAEjC,OAAOiD,EAAU/P,IAAI,EAAE8N,QAAOhB,YAC1BhM,KAAK2F,MAAM2B,iBAAmB4H,SAASlD,EAAMkB,YAC7C,MAAMiC,EAASnP,KAAK+M,eAAe9J,EAAOmD,mBAAoBjD,EAAYgE,UAC1E,MAAO,CACH6F,QACAhB,QACAiB,MAAO,IACAkC,KACAnP,KAAKoP,iBAAiBpP,KAAKG,MAAOH,KAAK2F,MAAM2B,uBAKhE+H,iBAAiBjP,GACbJ,KAAK2F,MAAMa,KAAOpG,EAClB,MAAMuM,EAAWC,eAAkB5M,KAAK2F,MAAOkC,GAE/C,IAAKsC,qBAAQwC,GACT,OAAOA,EAAS,GAAG7E,SAG3ByD,mBAAmB+D,GACjB,IACK,OAAIA,EAAQ7K,MAAM,UAAkB,EAE7ByK,SAASI,EAAQC,UAAU,EAAGD,EAAQ5K,SAC/C,MAAOwJ,GAEL,OADAC,QAAQC,KAAKF,IACL,IAGfkB,iBAAiBI,EAAejI,GAC5BvH,KAAKuI,aAAawD,qBAAqBxE,GACvC,MAAMkI,EAAkBzP,KAAKuI,aAAamH,4BACpCC,EAAYH,EAAStQ,IAAKoQ,IAC5B,MAAMM,EAAW5P,KAAKuI,aAAasH,gBAAgBP,GAC7CQ,EAAc9P,KAAKuI,aAAawH,qBAAqBT,EAAQU,GAAIV,EAAQW,KAAMX,EAAQY,IACvFC,EAAoBnQ,KAAKuI,aAAa6H,iBAAiBN,EAAaF,GAC1E,MAAO,CACH5C,MAAOsC,EAAQR,uBAAyBQ,EAAQe,UAChDrE,MAAOmE,KAGf,MAAO,CACHnD,MAAO,2BACPhB,MAAOwC,OAAQC,2BAA2BgB,GAC1CxC,MAAO,CACHD,MAAO,wBACPhB,MAAO2D,KAInBzD,SAASsD,GACL,OAAOA,EAAStQ,IAAKoQ,GACVtP,KAAKuI,aAAa+H,WACrBhB,EAAQ3E,QACR2E,EAAQR,uBAAyBQ,EAAQe,UACzCf,EAAQiB,MACRjB,EAAQU,GACRV,EAAQY,GACRZ,EAAQkB,WAAaxQ,KAAKqP,iBAAiBC,EAAQe,cAI/D,0BACI,MAAMtK,QAAwB/F,KAAKuI,aAAakI,4BAChD,MAAO,CACH,CAAEzD,MAAO,MAAOhB,MAAUhM,KAAK8J,QAAQmB,SAAhB,YACvB,CAAE+B,MAAO,SAAUhB,MAAOhM,KAAK8J,QAAQoB,aACvC,CAAE8B,MAAO,kBAAmBhB,MAAOhM,KAAK0I,YAAY4C,iBACpD,CAAE0B,MAAO,iBAAkBhB,MAAUhM,KAAK2F,MAAMqB,OAAd,UAAgC,WAClE,CAAEgG,MAAO,oBAAqBhB,MAAOjG,KAG7CyE,YACI,MAAO,CACH,CACIkG,GAAIzN,EAAOc,aACX4M,SAAU,iBACVtJ,KAAMuJ,OAAUC,yBAChBC,UAAW,IAAM9Q,KAAKuI,aAAa+B,sBACnCyG,WAAaC,GAAgBC,OAAWC,SAASF,GACjDpC,QAAS,IAAM5O,KAAKmR,sBACpBC,OAAQ,IAAMpR,KAAK2F,MAAMyB,iBAAmB,UAC5CiK,QAAU/B,IACNtP,KAAKsR,UAAUhC,GACRtP,KAAKuN,QAAQtK,EAAOc,aAAcZ,EAAYc,WAEzDsN,WAAY,IAAMvR,KAAKwR,sBACvBrC,OAAQ,CACJsC,YAAazR,KAAKwI,eAClBkJ,WAAY,CACR,CACIhO,KAAM,iBACNC,KAAM,MACNgO,QAAS,KACL3R,KAAK0C,eAAiB,sBAM1C,CACIgO,GAAI,iBACJC,SAAU,sBACVtJ,KAAMuJ,OAAUgB,mBAChBd,UAAW,IAAsC,WAAhC9Q,KAAK2F,MAAMyB,iBAC5BgK,OAAQ,IAAMpR,KAAK2F,MAAMyB,iBAAmB,SAC5C2J,WAAaC,GAAgBC,OAAWC,SAASF,GACjDpC,QAASiD,UACL,MAAM1R,QAAcH,KAAKuI,aAAauJ,uBACtC,OAAO3R,EAAMjB,IAAKsH,IAAD,CACbwG,MAAOxG,EAAK9C,KACZsI,MAAOxF,EAAKmE,QACZsC,MAAO,IAAKzG,OAGpB2I,OAAQ,CACJ4C,cAAc,EACdC,iBAAkB,CAAE,QACpBN,WAAY,CACR,CACIhO,KAAM,mBACNuO,KAAM,QACNtO,KAAM,MACNC,MAAO,UACPsO,SAAS,EACTC,qBAAuBpS,GACI,IAAhBA,EAAM8M,MAEjB8E,QAAS,KACL3R,KAAK0C,eAAiB,oBAM1C,CACIgO,GAAI,gBACJC,SAAU,cACVtJ,KAAMuJ,OAAUwB,gBAChBtB,UAAYuB,IAAYlI,qBAAQkI,EAAEC,gBAClCvB,WAAaC,IACT,GAAIC,OAAWC,SAASF,GAAM,MAAO,CAAC,2BAEtC,MAAMuB,EAAQvB,EAAI9R,IAAI,EAAG+N,WAAoBA,EAAM+C,IAAM,GAAK/C,EAAMiD,IAAM,GAC1E,OAAOqC,EAAM9L,KAAKC,SAAW,CAAC,8CAAgD,MAElF8L,OAASvL,GAAcjH,KAAKsO,eAAerH,GAC3CwL,gBAAiB,EAAExF,YAAF,CACbD,MAAO,UACPhB,MAAOhM,KAAKuI,aAAamK,gBACrBzF,EAAMoD,UAAWpD,EAAM+C,GAAI/C,EAAMiD,GAAIjD,EAAMsD,SAGnD3B,QAAU+D,GACCA,EAAML,eAAepT,IAAKoQ,IAAD,CAC5BtC,MAAOsC,EAAQtC,MACfhB,MAAOsD,EAAQtD,MACfiB,MAAO,CACH,QAAWqC,EAAQrC,MAAMtC,QACzB,UAAa2E,EAAQtC,MACrB,SAAYsC,EAAQrC,MAAM2F,SAC1B,MAAStD,EAAQrC,MAAMsD,MACvB,GAAM,EACN,KAAQ,EACR,GAAM,EACN,UAAavQ,KAAKqP,iBAAiBC,EAAQtC,YAK3D,CACI0D,GAAI,gBACJC,SAAU,sBACVtJ,KAAMuJ,OAAUiC,cAChB1D,OAAQ,CACJsC,YAAazR,KAAKwI,eAClBwJ,iBAAkB,CAAE,SACpBc,gBAAiB,CACbC,WAAW,GAEfC,cAAe,CACXC,OAAQ,QAEZpO,QAAS,IAAM,CACX,CACIqO,OAAMC,MAAM,YAAapL,GACzBmL,OAAMC,MAAM,QAASpL,GACrBmL,OAAMC,MAAM,KAAMpL,GAClBmL,OAAMC,MAAM,OAASpL,GACrBmL,OAAMC,MAAM,KAAMpL,GAClBmL,OAAMC,MAAM,YAAapL,KAGjCjD,KAAM,IAAM9E,KAAKG,MAAMjB,IAAKmH,IACxB,MAAM+M,EAAO,CACTpL,MAAO,CACH,OAAU,OAEdqL,SAAW,MACP,GAAIhN,EAAEgK,UAAU5L,MAAM,kBAClB,MAAO,4BAEX,OAAO4B,EAAEiN,kBACL,IAAK,IACD,MAAO,4BACX,IAAK,IACD,MAAO,8BARR,IAYf,MAAO,CACHJ,OAAMK,GAAGlN,EAAEyI,uBAAyBzI,EAAEgK,UAAW+C,GACjDF,OAAMK,GAAGlN,EAAEkK,MAAO6C,GAClBF,OAAMK,GAAGlN,EAAE2J,GAAIoD,GACfF,OAAMK,GAAGlN,EAAE4J,KAAMmD,GACjBF,OAAMK,GAAGlN,EAAE6J,GAAIkD,GACfF,OAAMK,GAAGlN,EAAEmK,WAAaxQ,KAAKqP,iBAAiBhJ,EAAEgK,WAAY+C,QAK5E,CACI1C,GAAIzN,EAAOmD,mBACXuK,SAAU,yBACVtJ,KAAMuJ,OAAU4C,iCAChBzC,WAAaC,GAAgBC,OAAWC,SAASF,GACjDpC,QAAS,IAAM5O,KAAKgP,uBACpBqC,QAAS,IAAMrR,KAAKuN,QAAQtK,EAAOmD,mBAAoBjD,EAAYc,UACnEsN,WAAY,IAAMvR,KAAKuN,QAAQtK,EAAOmD,mBAAoBjD,EAAY+B,aACtEiK,OAAQ,CACJsE,sBAAsB,S,qBC/f9C,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS9R,KAErD,gB,kCHNf,sCAOY+R,EAPZ,6DAOA,SAAYA,GACRA,yCACAA,gCAFJ,CAAYA,MAAwB,KAK9B,MAAO3K,UAA4B7K,OAarCC,YAAYC,EAAmBC,GAC3BsV,MAAMvV,EAAW,GAAIC,GACrB0B,KAAK6T,kBAAoB,EACzB7T,KAAK8T,WAAY,EACjB9T,KAAKyI,cAAgB,GACrBzI,KAAK+T,qBAAuB,GAC5B/T,KAAKsG,aAAe,GACpBtG,KAAKsE,iBAAmB,GACxBtE,KAAKgU,eAAiB,GACtBhU,KAAK4I,kBAAoB,GACzB5I,KAAKmN,YAAc,GACnBnN,KAAKyH,qBAAuB,EAC5BzH,KAAKqF,mBAAqB,GAG9B0G,qBAAqB8H,GACjB7T,KAAK6T,kBAAoBA,EAG7BzI,kBACI,OAAOpL,KAAKsG,aAGhBkF,sBACI,OAAOxL,KAAKsE,iBAAiBpF,IAAKsF,GACvBrG,OAAoB8V,qBAAqBzP,IAIxDkH,0BACI,OAAO1L,KAAKyH,qBAGhBkE,wBACI,OAAO3L,KAAKqF,mBAGhBoG,uBAAyB,OAAOzL,KAAK4I,kBAErCsL,iBAAmB,OAAOlU,KAAKmN,YAE/BnD,mBAAqB,OAAOhK,KAAKyI,cAEjCkG,qBAAuB,OAAO1N,OAAekT,YAAYnU,KAAK3B,WAE9D+V,UACI,OAAOnT,OAAetB,QAAQ,aAGlCmS,uBAAyB,OAAO7Q,OAAe6Q,uBAE/CzH,0BAA4B,OAAOrK,KAAK+T,qBAExC1I,oBAAsB,OAAOrL,KAAKgU,eAElC5K,cAAgB,OAAOpJ,KAAK8T,UAE5B3K,4BAA8B,OAAQgB,qBAAQnK,KAAKsE,kBAEnDgG,sBACI,MAAM+J,EAAOlW,OAAoBmW,mBAAmB,wBACpD,OAAOtU,KAAKsE,iBAAiBD,SAASgQ,GAG1CtK,wBACI,MAAMwK,EAASpW,OAAoBqW,sBAAsB,8BACnDC,EAAkBF,EAAOrV,IAAKsF,GAAWxE,KAAKsE,iBAAiBD,SAASG,EAAEkQ,aAChF,OAAOD,EAAgBhO,KAAKC,SAGhC2H,sBAAsBlK,EAAqBwQ,GACvC,MAAMhT,EAAS,CAAEqF,OAAQ2N,EAAerF,QAASnL,GAEjD,OAAOhG,OAAoBwB,QACvB,YAAYxB,OAAoBgD,uCAChCQ,GAIe,wBAAC0F,EAAciI,GAClC,OAAOnR,OAAoBwB,QACvB,YAAYxB,OAAoBgD,2BAA2BmO,IAC3D,CACI,WAActP,KAAK3B,UACnB,cAAiBgJ,IAKF,8BACvB,MAAMuN,QAAyBzW,OAAoB0W,aAAa,qBAC1DC,QAAY3W,OAAoB4W,OAAO,CACzC,WAAcH,EAAkB,UAAa5U,KAAK3B,YAGtDyW,EAAIE,QAASC,IACT,MAAMhW,EAAOuP,OAAQ0G,oBAAoBD,EAAEE,cAEtCnV,KAAK4I,kBAAkB3J,KAAOe,KAAK4I,kBAAkB3J,GAAQ,IAElE,MAAM6I,EAAU3J,OAAoB8V,qBAAqBgB,EAAEG,aAE3DpV,KAAK4I,kBAAkB3J,GAAMsP,KAAKzG,KAIrB,wBACjB,MAAMuN,QAAoBlX,OAAoB0W,aAAa,gBACrDC,QAAY3W,OAAoB4W,OAAO,CACzC,WAAcM,EAAa,UAAarV,KAAK3B,YAG5CyW,GAELA,EAAIE,QAASC,IACT,MAAMhW,EAAOuP,OAAQ0G,oBAAoBD,EAAEE,cAI3C,GAFKnV,KAAKqF,qBAAoBrF,KAAKqF,mBAAqBpG,IAEnDgW,EAAEK,aAAeL,EAAEG,YAAa,OAEhCpV,KAAKmN,YAAYlO,KAAOe,KAAKmN,YAAYlO,GAAQ,IAEjDe,KAAKmN,YAAYlO,GAAMgW,EAAEK,cAAatV,KAAKmN,YAAYlO,GAAMgW,EAAEK,YAAc,IAElF,MAAMxN,EAAU3J,OAAoB8V,qBAAqBgB,EAAEG,aAE3DpV,KAAKmN,YAAYlO,GAAMgW,EAAEK,YAAY/G,KAAKzG,KAIpB,iCAC1B,MAAMyN,QAAYpX,OAAoBwB,QAClC,yBAA0B,CACtB,WAAcK,KAAK3B,UACnB,KAAQ2B,KAAKf,OAIrB,GAAIsW,EAAK,CACL,MAAM7N,EAAQ6N,EAAI7N,MAAQ,EAC1B1H,KAAKyH,qBAAuBC,EAAQ,EAAI,EAAIA,GAI3B,4BACrB,MAAM0B,QAAoBjL,OAAoBuB,mBAAmBM,KAAK3B,UAAW,cAC3EmX,QAAYrX,OAAoB0W,aAAa,OAE/CzL,IAAapJ,KAAK8T,UAAY1K,IAAgBoM,GAG/B,wBAACvW,EAAKe,KAAKf,MAC9B,MAAMwW,QAAaxU,OAAetB,QAC9B,YAAYsB,OAAeE,2BAA2BnB,KAAK3B,oBAC3D,CAACY,SAEDwW,IAAMzV,KAAKyI,cAAgB7J,OAAOC,OAAO4W,IAGvB,6BACtB,MAAMnR,QAAyBnG,OAAoB0W,aAAa,qBAC1DtT,QAAepD,OAAoB4W,OAAO,CAC5C,WAAczQ,EACd,KAAQtE,KAAKf,KACb,UAAae,KAAK3B,UAClB,UAAa,IAEjB2B,KAAKsE,iBAAmB/C,EAAOrC,IAAKsF,GAAmBA,EAAE4Q,aAGvC,yBAClB,MAAMvV,QAAc1B,OAAoBuX,OAAO1V,KAAK3B,UAAW,iBAC3DwB,IACAG,KAAKsG,aAAezG,EAAM0E,OAAQ0Q,GAAWA,EAAEU,eAAiB,GAAKV,EAAExT,OAC9CvC,IAAK+V,GAAWA,EAAExT,MAAMmU,WAAWC,oBAItC,iCAC1B,MAAM1V,QAAcmB,OAAiBwU,qBAAqB9V,KAAK3B,WACzD0X,EAAc5V,EAAMjB,IAAI2S,UAC1B,MAAM,KAAErL,GAASS,EACX+O,QAAe1U,OAAiB2U,eAAejW,KAAK3B,UAAWmI,EAAKmE,SAC1E,MAAO,CACH,QAAWnE,EAAKmE,QAChB,UAAanE,EAAK9C,KAClB,MAAS8C,EAAK+J,MACd,GAAMyF,EAAOhG,GACb,KAAQgG,EAAO/F,KACf,GAAM+F,EAAO9F,GACb,UAAajJ,EAAKuJ,aAG1BxQ,KAAK+T,2BAA6BmC,QAAQC,IAAIJ,GAG1B,2BACpB,MAAMpU,EAAS,CAAE1C,KAAMe,KAAKf,MAEtBmX,QAAYjY,OAAoBwB,QAClC,YAAYxB,OAAoBgD,2BAA2BnB,KAAK3B,mBAChEsD,GAGAyU,IAAKpW,KAAKgU,eAAiBoC,EAAI,WAGvChJ,4BAA4BjN,GACxB,MAAMkW,EAAsB,GAE5B,IAAK,MAAMpX,KAAQe,KAAKmN,YAAa,CACjC,MAAMkI,EAAcrV,KAAKmN,YAAYlO,GAErC,IAAI,MAAMuH,KAAQ6O,EACTlV,EAAMkE,SAAS6K,SAAS1I,MAExB6P,EAAepX,KAAOoX,EAAepX,GAAQ,IAElDoX,EAAepX,GAAQ,IAChBoX,EAAepX,MAAUoW,EAAY7O,KAIpD,OAAO6P,EAGXtG,qBAAqBC,EAAYC,EAAcC,GAC3C,OAAOoG,WAAWtG,EAAG9C,YAAc+C,EAAOC,EAG9CE,iBAAiBN,EAAqBF,EAAS,GAC3C,MAAM2G,EAASzG,EAAc9P,KAAK6T,kBAAqBjE,EAEvD,IAAI4G,EAAe7O,KAAKC,MAAM2O,GAI9B,OAFIC,GAAgB,IAAGA,GAAgB,GAEhCA,EAGXC,gBAAgBC,EAAqBC,GACjC,IAAIC,EAAO,EAQX,OAPoB,IAAhBD,IAAmBC,EAAOF,GAEX,GAAfA,IAAkBE,EAAOD,GAEzBD,EAAc,GAAKC,EAAe,IAClCC,GAAQF,EAAcC,GAAe,GAElCC,EAGXC,0BAA0BH,EAAqBC,GAC3C,OAAOD,EAAcC,EAGzBjH,4BACI,MAAMoH,EAAU,IAAIC,KAAK/W,KAAKf,MAE9B,OADA6X,EAAQE,QAAQF,EAAQG,UAAYjX,KAAK6T,mBAClCrF,OAAQ0G,oBAAoB4B,GAGvCjH,gBAAgBrJ,GACZ,GAAIA,EAAK0Q,UAAW,OAAO1Q,EAAK0Q,UAChC,IACI,OAAO1Q,EAAKoM,SAAS,GAAGuE,KAC3B,MAAMjJ,GACH,OAAO,IAIfwE,gBAAgBtS,EAAkBsW,EAAqBC,EAAqBpG,GACxE,MAAO,GAAGnQ,iBAAwBsW,KAAenG,eAAmBoG,KAAepG,IAGvFD,WAAWI,EAAYhN,EAAc6M,EAAeP,EAAG,EAAGE,EAAG,EAAGM,EAAU,IACtE,MAAO,CACH,kBAAqBE,EACrB,sBAAyB1Q,KAAK6W,0BAA0B7G,EAAIE,GAC5D,WAAclQ,KAAKf,KACnB,iBAAoBe,KAAK0P,4BACzB,MAASa,EACT,aAAgBvQ,KAAK0S,gBAAgBhP,EAAMsM,EAAIE,EAAIK,GACnD,KAAQvQ,KAAKyW,gBAAgBzG,EAAIE,GACjC,UAAaM,GAIU,kCAC3B,MAAM4G,QAAejZ,OAAoBkZ,kBAAkBrX,KAAK3B,UAAW,yBAC3E,OAAO+Y,GAAkB,MAGR,sBAACE,GAClB,OAAOhW,OAAiBiW,OAAO,CAC3B,aAAgBvX,KAAKwX,YACrB,YAAeF,IAII,4BAACG,GACxB,OAAOzX,KAAK0X,iBAAiB,mBAAoBD,GAGzB,6BAAC1R,GACzB,OAAO/F,KAAK0X,iBAAiB,wBAAyB3R","file":"js/chunk-32f0ae46.114a5e56.js","sourcesContent":["import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                await this.prescription.loadHangingPills()\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const drugs = await this.prescription.getCustomIngridients()\n                        return drugs.map((drug: any ) => ({\n                            label: drug.name,\n                            value: drug.drug_id,\n                            other: { ...drug }\n                        }))\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                visibleOnStateChange: (state: Record<string, any>) => {\n                                    return state.index === 1\n                                },\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=2bacc768&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}