{"version":3,"sources":["webpack:///./src/apps/OPD/views/reports/moh/IDSR/IDSRTableTemplate.vue?301e","webpack:///./src/apps/OPD/views/reports/moh/IDSR/IDSRTableTemplate.vue","webpack:///./src/apps/OPD/views/reports/moh/IDSR/IDSRTableTemplate.vue?6449","webpack:///./src/apps/OPD/services/idsr_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue?afb2","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue?88ad","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue?0644","webpack:///./src/apps/OPD/services/opd_report_service.ts"],"names":["_hoisted_1","class","style","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_table","_resolveComponent","_openBlock","_createElementBlock","_createVNode","columns","rows","config","tableCssTheme","defineComponent","components","ReportTable","data","conditions","lessThanFiveYears","greaterAndEqualFiveYears","total","table","thTxt","colspan","sortable","exportable","props","methods","renderResults","report","IDSRReportService","Conditions","this","params","length","buildRows","onDownload","reportTitle","CSVString","getCSVString","dayjs","format","Service","getCoreVersion","getApiVersion","periodDates","getLocationName","getSiteUUID","csvData","Blob","type","navigator","msSaveBlob","link","document","createElement","href","window","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","forEach","condition","push","td","id","textAlign","name","buildRow","lessThanFiveYearsPatientIds","greaterThanEqualFiveYears","greaterThanEqualFiveYearsPatientIds","totalPatientIds","count","patientIds","tdLink","async","onDrillDown","watch","immediate","handler","__exports__","OpdReportService","constructor","super","regenerate","setRegenerate","requestIDSRWeekly","getReport","request","requestIDSRMonthly","all","key","value","Object","entries","temp","item","key1","value1","conditionDetails","IDSRConditionsObj","epiWeeks","epiWeeksObj","getJson","reverse","dates","split","startDate","endDate","txt","start","end","months","_payload","monthandyear","startandendmonths","trim","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","Function","Boolean","default","String","required","formData","computedData","$emit","i","reportReady","period","customFileName","drillDownCache","toDate","date","HisDate","toStandardHisDisplayFormat","confirmPatient","patient","$router","title","printW","open","content","getElementById","write","innerHTML","setTimeout","print","close","conditionName","isEmpty","rowParser","Promise","ids","map","personDetails","Patientservice","findByID","getGivenName","getFamilyName","getGender","getAge","getPhoneNumber","getCurrentDistrict","getCurrentVillage","getClosestLandmark","tdBtn","modalController","dismiss","path","drilldownData","asyncRows","modal","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","present","getDefaultDrillDownTable","tableRows","index","defaultRow","row","getArvNumber","tdDate","getBirthdate","toString","runTableDrill","drill","values","getEpiweeksFields","helpText","FieldType","TT_SELECT","validation","val","Validation","options","getReportEpiWeeks","items","q","label","moment","other","getMonthlyFields","getReportMonths","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","minDate","maxDate","getSessionDate","quarters","getReportQuarters","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","clinicName","reportparams","totalOPDVisits","Number","reportName","periodLabel","rangeLabel","range","mounted","initTable","newValue","oldValue","tableHeaders","LA_TYPES","one","two","three","four","NCD_TYPES","MENTAL_HEALTH_DIAGNOSIS","epiweek","programID","getProgramID","getPatientsWithNIDs","getClinicRegistrations","getAttendance","getDrugsGivenWithoutPrescription","getDrugsGivenWithPrescription","getDiagnosis","url","getDiagnosisByAddress","getLaPrescriptions","getMalariaReport","printLaReport","printService","PrintoutService","keys","v","printLbl","Url","parameterizeObjToString","getDateIntervalPeriod","setStartDate","setEndDate","setEpiWeek","getReportPeriod","buildRequest","payload","minDuration","year","getCurrentYear"],"mappings":"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","file":"js/chunk-8f04b8cc.115a5619.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = {\n  class: \"my-table\",\n  style: {\"margin\":\"auto\",\"width\":\"95%\",\"margin-top\":\"3%\",\"margin-bottom\":\"3%\"}\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_table = _resolveComponent(\"report-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_report_table, {\n      columns: _ctx.columns,\n      rows: _ctx.rows,\n      config: {tableCssTheme: _ctx.tableCssTheme}\n    }, null, 8, [\"columns\", \"rows\", \"config\"])\n  ]))\n}","\nimport { defineComponent } from 'vue'\nimport { IDSRReportService } from \"@/apps/OPD/services/idsr_service\"\nimport { Service } from \"@/services/service\"\nimport dayjs from 'dayjs';\nimport ReportTable from \"@/components/DataViews/tables/ReportDataTable.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n  components: { ReportTable },\n  data: function(){\n    return {\n      conditions: [] as any,\n      lessThanFiveYears: \" < 5 yrs \",\n      greaterAndEqualFiveYears: \" >= 5 yrs \",\n      total: ' Total ',\n      tableCssTheme: 'opd-report-theme',\n      rows: [] as RowInterface[][],\n      columns: [\n      [\n        table.thTxt('', {\n          colspan: 2,\n          sortable: false,\n          exportable: false \n        }),\n        table.thTxt('Out-patient Cases', {\n          colspan: 3,\n          sortable: false,\n          exportable: false \n        }),\n      ],\n      [\n        table.thTxt(''),\n        table.thTxt('Diseases/Events/Conditions'),\n        table.thTxt('< 5 yrs'),\n        table.thTxt('>= 5 yrs'),\n        table.thTxt('Total'),\n      ]\n    ] as ColumnInterface[][],\n    }\n  },\n  props: ['params', 'periodDates', 'quarter','onDrillDown'],\n  methods: {\n   renderResults() {\n     const report = new IDSRReportService()\n     const Conditions = report.renderResults(this.params)\n     if(Conditions.length){\n      this.conditions = Conditions\n      this.rows = this.buildRows(Conditions)\n     }\n   },\n   onDownload(reportTitle='') {\n     const report = new IDSRReportService()\n     let {CSVString} = report.getCSVString(this.conditions)\n     CSVString += `\n          Date Created: ${dayjs().format('DD/MMM/YYYY HH:MM:ss')}\n          His-Core Version: ${Service.getCoreVersion()}\n          API Version: ${Service.getApiVersion()}\n          Report Period: ${this.periodDates}\n          Site: ${Service.getLocationName()}\n          Site UUID: ${Service.getSiteUUID()}`\n          ;\n      const csvData = new Blob([CSVString], { type: \"text/csv;charset=utf-8;\" });\n      //IE11 & Edge\n      if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(csvData, 'exportFilename');\n      } else {\n        //In FF link must be added to DOM to be clicked\n        const link = document.createElement(\"a\");\n        link.href = window.URL.createObjectURL(csvData);\n        link.setAttribute(\"download\", `${reportTitle}.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n   },\n   buildRows(data: any): RowInterface[][] {\n     const rows: RowInterface[][] = []\n     data.forEach((condition: { \n       id: number;\n       name: string;\n       lessThanFiveYears: number;\n       greaterThanEqualFiveYears: number;\n       total: number;\n       lessThanFiveYearsPatientIds: any;\n       greaterThanEqualFiveYearsPatientIds: any;\n       totalPatientIds: any;\n       }) => {\n        rows.push([\n          table.td(condition.id, {style: {textAlign: 'left'}}),\n          table.td(condition.name, {style: {textAlign: 'left'}}),\n          this.buildRow(this.lessThanFiveYears+'('+condition.name+')', condition.lessThanFiveYears, condition.lessThanFiveYearsPatientIds),\n          this.buildRow(this.greaterAndEqualFiveYears+'('+condition.name+')', condition.greaterThanEqualFiveYears, condition.greaterThanEqualFiveYearsPatientIds),\n          this.buildRow(this.total+'('+condition.name+')', condition.total, condition.totalPatientIds)\n        ])\n     })\n     return rows\n   },\n   buildRow(name: string, count: any, patientIds: any) {\n    if (typeof(count) == 'string') {\n      return table.td('')\n    }\n    if (!(count > 0)) {\n      return table.td(0)\n     } else {\n      return table.tdLink(\n      count,\n      async () =>  this.onDrillDown(name, patientIds)\n      )\n     }\n   }\n  },\n  watch: {\n    params: {\n      immediate: true,\n      handler() {\n        this.renderResults();\n      }\n    }\n  }\n})\n","import { render } from \"./IDSRTableTemplate.vue?vue&type=template&id=12cc59a9&ts=true\"\nimport script from \"./IDSRTableTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./IDSRTableTemplate.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { OpdReportService } from \"./opd_report_service\";\nimport moment from \"dayjs\"\nimport { Service } from \"@/services/service\";\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport interface CommonInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class IDSRReportService extends OpdReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    requestIDSRWeekly() {\n        return this.getReport('generate_weekly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    requestIDSRMonthly() {\n        return this.getReport('generate_monthly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    renderResults(params: any) {\n        const all = []\n        let count = 1\n        for (const [key, value] of Object.entries(params)) {\n            const temp: any = []\n            const condition: any = value\n            const item = {\n                id: 0,\n                name: '',\n                lessThanFiveYears: '',\n                lessThanFiveYearsPatientIds: '',\n                greaterThanEqualFiveYears: '',\n                greaterThanEqualFiveYearsPatientIds: '',\n                total: 0,\n                totalPatientIds: ''\n            }\n            item.name = key\n            let total = 0\n            item.id = count\n            count += 1 \n            for (const [key1, value1] of Object.entries(condition)) {\n                const conditionDetails: any = value1\n                if (conditionDetails != null) {\n                    total +=conditionDetails.length;\n                    item.total = total\n                    if(conditionDetails.length) {\n                        temp.push(...conditionDetails)\n                        item.totalPatientIds = temp\n                    }\n                    if (key1 == '<5yrs') {\n                    item.lessThanFiveYears = conditionDetails.length\n                    item.lessThanFiveYearsPatientIds = conditionDetails\n                    }\n                if (key1 == '>=5yrs') {\n                item.greaterThanEqualFiveYears = conditionDetails.length\n                item.greaterThanEqualFiveYearsPatientIds = conditionDetails\n                }\n            }\n          }\n          all.push(item)\n        }\n        return all\n    }\n\n    getCSVString(IDSRConditionsObj: any) {\n        let CSVString = `Diseases/Events/Conditions, <5 yrs, >=5 yrs, Total,\\n`\n        for(const condition of IDSRConditionsObj) {\n            CSVString += `${condition.name},${condition.lessThanFiveYears},${condition.greaterThanEqualFiveYears},${condition.total},\\n`  \n        }\n        return {CSVString}\n    }\n\n    static async getReportEpiWeeks() {\n        const epiWeeks: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_weeks')\n        epiWeeksObj.reverse().forEach( (item: any) => { \n            const dates = item[1].split(\" \")\n            const startDate = dates[0]\n            const endDate = dates[2]\n            const txt = item[0].split('W')\n            const name = txt[0] +\"/W\"+ txt[1]\n            epiWeeks.push({ name: name, start: startDate, end: endDate })\n        })\n        return epiWeeks\n    }\n\n    static async getReportMonths() {\n        const months: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_months')\n        epiWeeksObj.forEach( (item: any) => {\n            const _payload = item[1];\n            const monthandyear = _payload[0]\n            const startandendmonths = _payload[1];\n            const dates = startandendmonths.split(\"to\");\n            months.push({ name: monthandyear, start: dates[0], end: dates[1].trim() })\n        })\n        return months\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { OpdReportService } from \"@/apps/OPD/services/opd_report_service\"\nimport { IDSRReportService } from \"@/apps/OPD/services/idsr_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport moment from \"dayjs\"\nimport { Service } from '@/services/service';\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async exportToCustomPDF(title: string) {\n            const printW = open('', '', 'width:1024px, height:768px')\n            const content = document.getElementById('report-content')\n            if (content && printW) {\n                printW.document.write(`\n                    <html>\n                    <head>\n                        <title>${title}</title>\n                        <link rel=\"stylesheet\" media=\"print\" href=\"/assets/css/cohort.css\" />\n                    </head>\n                    <body>\n                        ${content.innerHTML}\n                    </body>\n                    </html>\n                `)\n                setTimeout(() => { printW.print(); printW.close() }, 3500)\n            }\n        },\n        async onDrillDown(conditionName: string, patientIds: number[]) {\n            if(isEmpty(patientIds)) return\n            const columns = [[\n                table.thTxt('First name'),\n                table.thTxt('Last name'),\n                table.thTxt('Gender'),\n                table.thTxt('Age'),\n                table.thTxt('Phone'),\n                table.thTxt('Address'),\n                table.thTxt('Action')\n            ]]\n            const rowParser = async (ids: number[]) => {\n                return await Promise.all(ids.map(async (id) => {\n                const personDetails = await Patientservice.findByID(id)\n                const patient = new Patientservice(personDetails)\n                return [\n                    table.td(patient.getGivenName()),\n                    table.td(patient.getFamilyName()),\n                    table.td(patient.getGender()),\n                    table.td(patient.getAge()),\n                    table.td(patient.getPhoneNumber()),\n                    table.td(`${patient.getCurrentDistrict()}, ${patient.getCurrentVillage()}, ${patient.getClosestLandmark()}`),\n                    table.tdBtn('Select', async () => {\n                    await modalController.dismiss({})\n                    this.$router.push({ path: `/patient/dashboard/${id}`})\n                    })\n                ]\n                })) \n            }\n            return this.drilldownData(conditionName, columns, patientIds, rowParser)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = (tableRows: Array<any[]>) => {\n                return tableRows.map(async (defaultRow: Array<any>) => {\n                    const [index, id ] = defaultRow\n                    if (id in this.drillDownCache) {\n                        //const [oldIndex, ...rest] = this.drillDownCache[id]\n                        return [index] // Assign new index number and maintain patient record\n                    } \n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = [\n                        index,\n                        table.td(patient.getArvNumber()), \n                        table.td(patient.getGender()), \n                        table.tdDate(patient.getBirthdate().toString()),\n                        table.tdBtn('Show', async () => {\n                            await modalController.dismiss({})\n                            this.$router.push({ path: `/patient/dashboard/${id}`})\n                        })\n                    ]\n                    this.drillDownCache[id] = row\n                    return row\n                })\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getEpiweeksFields(): Array<Field> {\n            return [\n                {\n                    id: 'epiweek',\n                    helpText: 'Select EPI week',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportEpiWeeks()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getMonthlyFields(): Array<Field> {\n            return [\n                {\n                    id: 'idsrmonth',\n                    helpText: 'Select Month',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportMonths()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getDateDurationFields(useQuarter=false, setCustomQuarterPeriod=false, maxQuarter=5): Array<Field> {\n            const minDate = '2001-01-01'\n            const maxDate = Service.getSessionDate()\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = OpdReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { style: {\"margin\":\"auto\",\"width\":\"95%\",\"margin-top\":\"1%\"} }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_table = _resolveComponent(\"report-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_report_table, {\n      columns: _ctx.columns,\n      rows: _ctx.rows,\n      config: {tableCssTheme: _ctx.tableCssTheme}\n    }, null, 8, [\"columns\", \"rows\", \"config\"])\n  ]))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTable from \"@/components/DataViews/tables/ReportDataTable.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    components: { ReportTable },\n    props: {\n      clinicName: {\n        type: String,\n        default: ''\n      },\n      reportparams: {\n        type: Object,\n        required: true\n      },\n      totalOPDVisits: {\n        type: Number,\n        required: true\n      },\n      reportName: {\n        type: String,\n        required: true\n      },\n      periodLabel: {\n        type: String,\n        required: true\n      },\n      periodDates: {\n        type: String,\n        required: true\n      },\n      rangeLabel: {\n        type: String,\n        required: true\n      },\n      range: {\n        type: String,\n        required: true\n      },\n    },\n    data: function() {\n      return {\n        tableCssTheme: 'opd-report-theme',\n        rows: [] as RowInterface[][],\n        columns: [\n            [\n              table.thTxt(this.reportName, {\n                colspan: 2,\n                sortable: false,\n                exportable: false \n              })\n            ]\n        ] as ColumnInterface[][],\n      }\n    },\n    mounted() {\n      this.initTable()\n    },\n    watch: {\n       totalOPDVisits(newValue, oldValue) {\n         this.initTable()\n       }\n    },\n    methods: {\n      initTable() {\n        const rows: RowInterface[][] = []\n        const tableHeaders = [\n          {\n            name: 'Country:',\n            value: 'Malawi',\n          },\n          {\n            name: 'Reporting Facility Name:',\n            value: this.clinicName\n          },\n          {\n            name: this.rangeLabel+':',\n            value: this.range\n          },\n          {\n            name: this.periodLabel+':',\n            value: this.periodDates\n          },\n          {\n            name: 'Total OPD Visits:',\n            value: this.totalOPDVisits\n          }\n\n        ]\n        tableHeaders.forEach(item => {\n          if(item.name !== 'undefined:') {\n                rows.push([\n                    table.td(item.name, {style: {textAlign: 'left'}}),\n                    table.td(item.value, {style: {textAlign: 'left'}}),\n                ])\n          }\n        })\n        this.rows = rows\n      }\n    }\n  })\n  ","import { render } from \"./MOHReportHeader.vue?vue&type=template&id=3d81af96&ts=true\"\nimport script from \"./MOHReportHeader.vue?vue&type=script&lang=ts\"\nexport * from \"./MOHReportHeader.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport { PrintoutService } from '@/services/printout_service';\nimport Url from \"@/utils/Url\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport const AGE_GROUPS = [\n    '0-5 months', '6-11 months',\n    '12-23 months', '2-4 years', \n    '5-9 years', '10-14 years', \n    '15-17 years', '18-19 years', \n    '20-24 years', '25-29 years', \n    '30-34 years', '35-39 years', \n    '40-44 years', '45-49 years', \n    '50 plus years'\n]\n\nexport const OTHER_AGE_GROUPS = [\n    '<1 year', '1-4 years',\n    '5-9 years', '10-14 years',\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\nexport const LA_TYPES: Record<string, string> = {\n    one: 'AL 1', \n    two: 'AL 2', \n    three: 'AL 3', \n    four: 'LA 4'\n}\n\nexport const NCD_TYPES = [\n    'Diabetes',\n    'Hypertension',\n    'Stroke',\n    'Suspected cancer',\n    'Confirmed cancer',\n    'Palliative cancer',\n    'Asthma',\n    'Depression',\n    'Acute psychosis',\n    'Chronic psychosis',\n    'Epilepsy'\n]\n\nexport const MENTAL_HEALTH_DIAGNOSIS = [\n    'Organic mental disorder (Chronic)',\n    'Organic mental disorder (acute)',\n    'Alcohol use mental disorder',\n    'Drug use mental disorder',\n    'Schizophrenia',\n    'Acute and transient psychotic disorder',\n    'Schizo-affective disorder',\n    'Mood-affective disorder (MANIC)',\n    'Mood-affective disorder (BIPOLAR)',\n    'Mood-affective disorder (DEPRESSION)',\n    'Anxiety disorder',\n    'Stress reaction adjustment disorder',\n    'Dissociative conversion disorder',\n    'Somatoform disorder',\n    'Puerperal mental disorder',\n    'Personality/Behaviour disorder',\n    'Mental retardation',\n    'Psychological mental disorder',\n    'Hyperkinetic conduct disorder',\n    'Epilepsy'\n]\n\nexport class OpdReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    epiweek: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.epiweek = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPatientsWithNIDs() {\n        return this.getReport('with_nids')\n    }\n\n    getClinicRegistrations(){\n        return this.getReport('registration');\n    }\n\n    getAttendance(){\n        return this.getReport(`programs/${this.programID}/reports/attendance`)\n    }\n\n    getDrugsGivenWithoutPrescription() {\n        return this.getReport('drugs_given_without_prescription')\n    }\n\n    getDrugsGivenWithPrescription() {\n        return this.getReport('drugs_given_with_prescription')\n    }\n\n    getDiagnosis(){\n        const url = `programs/${this.programID}/reports/diagnosis`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date\n        })\n    }\n\n    getDiagnosisByAddress(){\n        return this.getReport('diagnosis_by_address')\n    }\n\n    getLaPrescriptions(){\n        const url = `programs/${this.programID}/reports/la_prescriptions`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            \n        })\n    }\n\n    getMalariaReport(){\n        const url = `programs/${this.programID}/reports/malaria_report`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date\n        })\n    }\n    \n    printLaReport(data: Record<string, any>){\n        const printService = new PrintoutService()\n        const url = `programs/${this.programID}/barcodes/la_report`\n        const params: Record<string, any> = {\n            \"date[start]\": this.startDate,\n            \"date[end]\": this.endDate\n        }\n        Object.keys(LA_TYPES).forEach((v, i) => {\n            i++\n            params[`${i}[prescription]`] = data[`total_la_${v}_prescribed_drugs`]\n            params[`${i}[dispensed]`] = data[`total_la_${v}_dispensed_drugs`]\n        })\n        return printService.printLbl(`${url}?${Url.parameterizeObjToString(params)}`)\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setEpiWeek(epiweek: string) {\n        this.epiweek = epiweek\n    }\n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.epiweek) {\n            payload['epiweek'] = this.epiweek\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}