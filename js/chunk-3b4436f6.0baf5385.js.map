{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/views/reports/ReportMixin.vue","webpack:///./src/apps/ART/views/reports/ReportMixin.vue?5c96","webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./node_modules/eslint-loader/index.js"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","defineComponent","data","fields","report","reportReady","period","startDate","endDate","customFileName","drillDownCache","methods","toDate","date","HisDate","toStandardHisDisplayFormat","sortByArvNumber","attr","sort","a","b","getArvInt","e","console","error","arv","split","arvNumStr","arvNumInt","parseInt","tdARV","params","table","td","sortValue","this","confirmPatient","patient","$router","push","drilldownAsyncRows","title","columns","asyncRows","canExport","modalController","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","dismiss","modal","present","drilldownData","rows","rowParser","getDefaultDrillDownTable","thTxt","tableRows","ARV_NUM_INDEX","t","map","defaultRow","id","index","isArray","num","key","rest","Patientservice","findByID","row","getArvNumber","getGender","tdDate","getBirthdate","toString","tdBtn","path","Promise","all","runTableDrill","drill","values","length","tdLink","getQuaterOptions","quarters","ArtReportService","getReportQuarters","q","label","name","value","start","other","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","maxDate","Service","getSessionDate","minDate","helpText","type","FieldType","TT_SELECT","condition","validation","val","Validation","required","options","items","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","__exports__","programID","getProgramID","url","getJson","buildRequest","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","buildQtrObj","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","EstimationFieldType","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","getDefaultDate","form","field","datePart","defaultValue","month","day","validateMinMax","computed","min","max","fullDate","yearValue","monthValue","dayValue","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","v","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","computedValue","isEstimate","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","AGE_ESTIMATE_FIELD","subtract","MONTH_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT"],"mappings":"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","file":"js/chunk-3b4436f6.0baf5385.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","\nimport { Service } from \"@/services/service\"\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { ArtReportService } from \"@/apps/ART/services/reports/art_report_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isArray } from \"lodash\"\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        sortByArvNumber(data: Array<any>, attr='arv_number') {\n            try {\n                return data.sort((a: any, b: any) => this.getArvInt(a[attr]) > this.getArvInt(b[attr]) ? 1 : -1)\n            } catch(e) {\n                console.error(e)\n                return data\n            }\n        },\n        getArvInt(arv: string) {\n            if (typeof arv === 'string') {\n                const [prfx, art, arvNumStr] = arv.split('-')\n                const arvNumInt = parseInt(arvNumStr)\n                return typeof arvNumInt === 'number' ? arvNumInt : 0 \n            }\n            return 0\n        },\n        tdARV(arv: string, params={}) {\n            return table.td(arv, { sortValue: this.getArvInt(arv), ...params})\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function, canExport=true) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    canExport,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = async (tableRows: Array<any[]>) => {\n                let ARV_NUM_INDEX = 0\n                const t = tableRows.map(async (defaultRow: Array<any>) => {\n                    let id: any = null\n                    let index: null | number = null\n                    if (isArray(defaultRow)) {\n                        const [num, key ] = defaultRow\n                        index = num\n                        if (key in this.drillDownCache) {\n                            const [oldIndex, ...rest] = this.drillDownCache[key]\n                            return [index, ...rest] // Assign new index number and maintain patient record\n                        }\n                    } else {\n                        id = defaultRow\n                        if (id in this.drillDownCache) {\n                            return this.drillDownCache[id]\n                        }\n                    }\n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = []\n                    if (index) {\n                        ARV_NUM_INDEX = 1\n                        row.push(index)\n                    } \n                    row.push(this.tdARV(patient.getArvNumber()))\n                    row.push(table.td(patient.getGender()))\n                    row.push(table.tdDate(patient.getBirthdate().toString()))\n                    row.push(table.tdBtn('Show', async () => {\n                        await modalController.dismiss({})\n                        this.$router.push({ path: `/patient/dashboard/${id}`})\n                    }))\n                    this.drillDownCache[id] = row\n                    return row\n                })\n                const rows = await Promise.all(t)\n                return rows.sort((a: any, b: any) => \n                        a[ARV_NUM_INDEX].sortValue > b[ARV_NUM_INDEX].sortValue \n                        ? 1 : -1)\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getQuaterOptions() {\n            const quarters = ArtReportService.getReportQuarters()\n            return quarters.map((q: any) => ({\n                label: q.name, value: q.start, other: q\n            }))\n        },\n        getDateDurationFields(\n            useQuarter=false, \n            setCustomQuarterPeriod=false, \n            maxQuarter=5, \n            maxDate=Service.getSessionDate() as string | null,\n        ): Array<Field> {\n            const minDate = '2000-01-01'\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = ArtReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: Function;\n    required?: boolean;\n    defaultValue?: Function;\n    beforeNext?: Function;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: Function;\n    appearInSummary?: Function;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = (v: Option) => {\n        const isEstimate = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = isEstimate ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return field.computeValue(fullDate, isEstimate)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = (val: Option) => {\n        const year = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return field.computeValue(fullDate, true)\n    }\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    ) \n\n    durationEstimate.computedValue = (val: Option) => {\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(val.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return field.computeValue(fullDate, true)\n    }\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}