{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce.js","webpack:///./node_modules/eslint-loader/index.js","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?db87","webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?2e64","webpack:///./src/components/DataViews/VLReminderModal.vue?d9fa","webpack:///./node_modules/core-js/internals/array-reduce.js","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?2579","webpack:///./src/apps/ART/services/adherence_service.ts","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue","webpack:///./src/apps/ART/views/encounters/AdherenceMixin.vue?7f4b"],"names":["$","$reduce","left","arrayMethodIsStrict","arrayMethodUsesToLength","CHROME_VERSION","IS_NODE","STRICT_METHOD","USES_TO_LENGTH","1","CHROME_BUG","target","proto","forced","reduce","callbackfn","this","arguments","length","undefined","StockService","Service","constructor","drugId","stock","getJson","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","isEnabled","ART_PROP","drugManagementEnabled","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","AppEncounterService","postJson","getProgramID","void","DrugOrderService","getDrugOrderHistory","res","console","warn","getDrugOrders","drugs","map","d","fetchAvailableDrugStock","drug","drug_id","Promise","all","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_withId","_withScopeId","_pushScopeId","_hoisted_1","_createTextVNode","_hoisted_2","_hoisted_3","_hoisted_4","_popScopeId","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_Fragment","_createVNode","default","_","style","overflowY","background","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","data","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","super","milestone","concept","getConceptID","coded","class","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","activeIndex","label","modelValue","value","drug_inventory_id","_createCommentVNode","postSideEffects","disabled","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","watch","ready","handler","ConsultationService","PrescriptionService","getFields","immediate","f","computedData","createEncounter","encounter","toastWarning","resolveObs","computedObs","secondaryObs","isEmpty","saveObservationList","savedObs","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","getTransferInStatus","getFirstValueCoded","receivedArvs","getFirstObs","transferLetterObs","toStandardHisFormat","obs_datetime","match","value_coded","getDate","getDateStartedArt","getFirstValueDatetime","dateStarted","checkIfWeightLossIsControlled","infoActionSheet","action","checkVLReminder","ProgramService","getPatientVLInfo","vals","eligibile","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","modal","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","buildDefferedOrder","observations","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","formData","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","current_fp_methods","disableFPMethods","listData","isChecked","infoAlert","noneIndex","findIndex","familyPlanningMethods","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","buildSideEffectObs","attr","getSideEffectsReasons","sideEffectReasons","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","getFamilyPlanningMethods","filtered","includes","method","getOptions","preValues","preValue","find","other","values","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","routine_tb_therapy","tptAutoSelectionMode","on3HPValueUpdate","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","tpt","disableOption","text","description","show","toOption","completed","getVlLabData","OrderService","Store","get","formatLabs","getSuspendedProgram","id","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","getClient","isGuardian","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","validation","Validation","computedValue","v","tag","obs","onValueUpdate","list","cd","l","condition","exitsForm","generateDateFields","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getCustomIngridients","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","some","drugID","buildObs","drug_interval","date_last_received_arvs","child","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","unload","noGivenResults","result_given","alertConfirmation","enc","result","resultIds","resultID","encounterID","encounter_id","saveObs","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","getBMI","bmi","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","cervicalCancerScreeningAgeBounds","start","end","clientDueForCxCa","clientHasHadAHysterectomy","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","getDrugSideEffects","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","beforeNext","onValue","onConditionFalse","TT_NOTE","other_side_effects","on_tb_treatment","defaultValue","hasTreatmentHistoryObs","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","aFunction","toObject","IndexedObject","toLength","createMethod","IS_RIGHT","that","argumentsLength","memo","O","self","TypeError","module","exports","right","AdverseEffectsCategories","RegimenService","patientId","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","tptPrescriptionCount","lastSideEffectDate","getCachedConceptName","getRegimens","arvs","extras","extrasAvailable","concept_id","regimenCode","patientWeight","params","regimen","contraindication","getObs","forEach","drugInduced","value_drug","count","isFastTrack","yes","meds","orders","getAll","pills","value_numeric","order","drug_order","getLastDrugsReceived","withDosages","getDrugDosages","dosage","am","noon","pm","frequency","req","allSideEffects","parseFloat","toString","pillsPerDay","packSize","packs","roundedPacks","Math","round","morningTabs","eveningTabs","dose","dateObj","Date","pack_size","e","calculateEquivalentDosage","getInstructions","calculateDosage","getFirstValueText","drugOrders","response","saveValueTextObs","reasonForSwitch","AdherenceService","lastDrugs","lastReceiptDate","receiptDate","start_date","htnDrugs","BPManagementService","htnDrugReferences","pillCount","buildValueNumber","adherence","given","expected","equivalentDailyDose","startDate","timeUnit","daysGone","calcTimeElapsed","date1","dayjs","diff","actual","exp","EncounterMixinVue","askReasonForPoorAdherence","calculationAgreementObs","buildAdherenceReport","lastVisit","getReceiptDate","daysElapsed","timeElapse","rowColors","indexes","cellColors","formatFrequency","expectedPills","calcPillsExpected","calculateAdherence","adherenceStatus","isAdherenceGood","unAccountedDoses","calculateUnaccountedOrMissed","equivalent_daily_dose","row","calculateExpected","checkDrugsBefore","TT_ADHERENCE_INPUT","loadPreviousDrugs","receivedDrugsBefore","empty","buildAdherenceObs","order_id","buildPillCountObs","fdata","pills_brought","getLastDrugs","TT_TABLE_VIEWER"],"mappings":"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","file":"js/chunk-07594c63.ad7c47f7.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduce = require('../internals/array-reduce').left;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\nvar CHROME_VERSION = require('../internals/engine-v8-version');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 30, 60, 90 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, withScopeId as _withScopeId, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nconst _withId = /*#__PURE__*/_withScopeId(\"data-v-546674a2\")\n\n_pushScopeId(\"data-v-546674a2\")\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Side effects suspected causes\")\nconst _hoisted_2 = { style: {} }\nconst _hoisted_3 = /*#__PURE__*/_createVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1)\nconst _hoisted_4 = /*#__PURE__*/_createVNode(\"p\", null, \"Current Medication\", -1)\nconst _hoisted_5 = /*#__PURE__*/_createVNode(\"p\", null, \"Previous Medication\", -1)\nconst _hoisted_6 = /*#__PURE__*/_createTextVNode(\"Other, not drug related\")\nconst _hoisted_7 = /*#__PURE__*/_createTextVNode(\"Drug side effect\")\nconst _hoisted_8 = /*#__PURE__*/_createVNode(\"p\", null, null, -1)\nconst _hoisted_9 = /*#__PURE__*/_createTextVNode(\" Close \")\nconst _hoisted_10 = /*#__PURE__*/_createTextVNode(\" Save \")\n_popScopeId()\n\nexport const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")\n  const _component_ion_header = _resolveComponent(\"ion-header\")\n  const _component_ion_label = _resolveComponent(\"ion-label\")\n  const _component_ion_item = _resolveComponent(\"ion-item\")\n  const _component_ion_list = _resolveComponent(\"ion-list\")\n  const _component_ion_col = _resolveComponent(\"ion-col\")\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")\n  const _component_ion_row = _resolveComponent(\"ion-row\")\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")\n  const _component_ion_content = _resolveComponent(\"ion-content\")\n  const _component_ion_button = _resolveComponent(\"ion-button\")\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")\n\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withId(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withId(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withId(() => [\n                _hoisted_1\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withId(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withId(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withId(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withId(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withId(() => [\n                        (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: $event => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _ctx.activeIndex === index ? 'color: green': 'color: black'\n                          }, {\n                            default: _withId(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withId(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1 /* TEXT */)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128 /* KEYED_FRAGMENT */))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withId(() => [\n                    _createVNode(\"div\", _hoisted_2, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withId(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => (_ctx.sides[_ctx.activeIndex]['reason'] = $event))\n                              }, {\n                                default: _withId(() => [\n                                  _hoisted_3,\n                                  _hoisted_4,\n                                  (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withId(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withId(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1 /* TEXT */)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128 /* KEYED_FRAGMENT */)),\n                                  _hoisted_5,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withId(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withId(() => [\n                                          _hoisted_6\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withId(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withId(() => [\n                                          _hoisted_7\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_8\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withId(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withId(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withId(() => [\n                _hoisted_9\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withId(() => [\n                _hoisted_10\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64 /* STABLE_FRAGMENT */))\n})","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.tptAutoSelectionMode(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getCustomIngridients())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => {\n            return {\n              tag: 'consultation',\n              obs:  v.map(async (d: any) => {\n                const drugID: number = d?.other?.drug?.drug_id || 0\n                return { \n                  ...(await this.consultation.buildObs(\n                    'Drug received from previous facility', {\n                      'value_drug': drugID,\n                      'value_datetime': c?.drug_interval || null,\n                      'value_numeric': d?.value || 0\n                      }\n                  )),\n                  child: (await this.consultation.buildObs(\n                    'Number of tablets brought to clinic', {\n                      'value_drug': drugID,\n                      'value_numeric': d?.other?.pillsBrought || -1,\n                      'value_datetime': c?.date_last_received_arvs?.date || null\n                   }\n                ))}\n              })\n            }\n          },\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => {\n            let obs = []\n            if (this.isANCclient()) obs.push(\n              this.consultation.buildValueCoded('Is patient pregnant', 'Yes')\n            )\n            obs = obs.concat(v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)))\n            return {\n              obs,\n              tag: 'consultation'\n            }\n          },\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value)) \n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value))\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: (await this.consultation.buildValueText('Other (Specify)', v.value ))\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => {\n            this.TBSuspected = data.value === \"Yes\"\n            const obs = [\n              this.consultation.buildValueCoded(\"TB treatment\", data.value)\n            ]\n            if (this.TBSuspected) obs.push(this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\"))\n            return ({ tag: 'consultation', obs })\n          },\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[]) => {\n            this.presentedTBSymptoms = this.inArray(vals, d => d.value === \"Yes\")\n            return {\n              tag: 'consultation',\n              obs: vals.map(async (data: Option) => ({\n                ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n                child: (await this.consultation.buildValueCoded(data.label, data.value))\n              }))\n            } \n          }\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => {\n            this.TBSuspected = data.value === \"TB Suspected\"\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n            }\n          },\n          beforeNext: async (data: Option) => {\n            if (data.value === \"TB Suspected\") {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: () => this.mapStrToOptions([\n            \"Currently on IPT\", \n            \"Currently on 3HP\",\n            \"Complete course of 3HP in the past (3 months RFP+INH)\",\n            \"Complete course of IPT in the past (min. 6 months of INH)\",\n            \"Aborted course of 3HP or IPT in the past\",\n            \"Never taken IPT or 3HP\"\n          ])\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => {\n            this.allergicToSulphur = data.value.match(/unknown/i) \n              ? null \n              : data.value.match(/yes/i) \n              ? true \n              : false  \n            return {\n              tag: 'consultation',\n              obs: () => {\n                return this.consultation.buildValueCoded(\"Allergic to sulphur\", \n                  this.allergicToSulphur === null \n                  ? data.value \n                  : this.allergicToSulphur \n                  ? 'Yes' \n                  : 'No')\n              }\n            }\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=6a4a5577&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","var aFunction = require('../internals/a-function');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar toLength = require('../internals/to-length');\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n}","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugInterface } from \"@/interfaces/Drug\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { BPManagementService } from \"./htn_service\"\nimport dayjs from \"dayjs\"\n\nexport class AdherenceService extends AppEncounterService {\n    lastDrugs: Array<DrugInterface>\n    lastReceiptDate: string\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 68, providerID) //TODO: Use encounter type reference name\n        this.lastDrugs = []\n        this.lastReceiptDate = ''\n    }\n\n    async loadPreviousDrugs() {\n        const date = new Date(this.date)\n        date.setDate(date.getDate() - 1) // we don't want current date to count\n        const d = (date: string | Date) => HisDate.toStandardHisFormat(date)\n        const drugs = await AppEncounterService.getJson(\n            `patients/${this.patientID}/drugs_received`, { date: d(date) }\n        )      \n        if (drugs) {\n            this.lastReceiptDate = drugs.reduce((receiptDate: string | null,  drug: any) => {\n                return !receiptDate || (new Date(d(drug.order.start_date)) > new Date(receiptDate))\n                    ?  d(drug.order.start_date)\n                    : receiptDate\n            }, null)\n            const htnDrugs = BPManagementService.htnDrugReferences().map((d: any) => d.drug_id)\n            this.lastDrugs = drugs.filter((drug: DrugInterface) => \n               !htnDrugs.includes(drug.drug['drug_id']) && d(drug.order.start_date) === this.lastReceiptDate\n            )\n        }\n    }\n\n    getReceiptDate() { return this.lastReceiptDate }\n\n    getLastDrugs() { return this.lastDrugs }\n\n    receivedDrugsBefore() { return !isEmpty(this.lastDrugs) }\n\n    buildPillCountObs(orderId: number, pillCount: number) {\n        return this.buildValueNumber('Number of tablets brought to clinic', pillCount, null, orderId)\n    }\n\n    async buildAdherenceObs(orderId: number, drugId: number, adherence: number) {\n        const concept = await AppEncounterService.getConceptID('Drug adherence', true)\n        return {\n            'concept_id': concept,\n            'value_numeric': adherence,\n            'value_drug': drugId,\n            'value_modifier': '%',\n            'order_id': orderId,\n            'person_id': this.patientID,\n            'obs_datetime': AppEncounterService.getSessionDate()\n        }\n    }\n\n    isAdherenceGood(adherence: number) {\n        return adherence >= 95 && adherence <= 105\n    }\n\n    calculateAdherence(given: number, pills: number, expected: number) {\n        return Math.round(100 * (given - pills) / (given - expected));\n    }\n\n    calculateExpected(\n        given: number, \n        equivalentDailyDose: number, \n        startDate: string, \n        frequency: 'QOD' | 'QW'\n    ) {\n        const timeUnit = frequency === 'QW' ? 'week' : 'day'\n        const daysGone = this.calcTimeElapsed(startDate, timeUnit);\n        return (given - (daysGone * parseFloat(equivalentDailyDose.toString())));\n    }\n\n    calcTimeElapsed(date1: string, timeUnit: 'week' | 'day') {\n        return dayjs(this.date).diff(date1, timeUnit)\n    }\n\n    calculateUnaccountedOrMissed(expected: string, actual: string) {\n        const exp = (parseFloat(expected) - parseFloat(actual));\n        return (exp < 0 ? ((exp * -1) + ' missed') : (exp + ' unacc'));\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AdherenceService } from \"@/apps/ART/services/adherence_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from 'lodash'\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        adherence: {} as any,\n        drugObs: [] as any,\n        askReasonForPoorAdherence: false,\n        calculationAgreementObs: [] as any,\n    }),\n    methods: {\n        async saveAdherence() {\n            await this.adherence.createEncounter()\n            const data = await Promise.all([...this.drugObs, ...this.calculationAgreementObs])\n            const obs = await this.adherence.saveObservationList(data)\n\n            if (!obs) return toastWarning('Unable to save patient observations')\n        },\n        buildAdherenceReport(data: any) {\n            const lastVisit = this.adherence.getReceiptDate()\n            const daysElapsed = this.adherence.calcTimeElapsed(lastVisit, 'day')\n            const timeElapse = ` Last visit: ${HisDate.toStandardHisDisplayFormat(lastVisit)} \n                (${daysElapsed} Days Elapsed)`\n            const rowColors = [{ indexes: [0, 3, 6], class: 'adherence-col-bg' }]\n            const cellColors: any = []\n            const columns = [timeElapse]\n            const rows = [\n                ['Prescription'],\n                ['Tabs given'],\n                ['Tabs per'],\n                ['Tabs remaining'],\n                ['Expected'],\n                ['Actual (counted)'],\n                ['Adherence'],\n                ['Doses missed/ Unaccounted for'],\n                ['Doses consumed'],\n                ['Art Adherence']\n            ]        \n            data.forEach((order: any, index: number) => {\n                const frequency = this.formatFrequency(order.frequency)\n                const expectedPills = this.calcPillsExpected(order)\n                const adherence = this.adherence.calculateAdherence(\n                    order.quantity, order.pillsBrought, expectedPills\n                )\n                const adherenceStatus = this.adherence.isAdherenceGood(adherence) \n                    ? 'Good adherence' \n                    : 'Explore problem'\n                const unAccountedDoses = this.adherence.calculateUnaccountedOrMissed(\n                    expectedPills, order.pillsBrought\n                )\n                columns.push(order.drug.name)\n                rows[0].push('')\n                rows[1].push(order.quantity)\n                rows[2].push(`${order.equivalent_daily_dose} <b>${frequency}</b>`)\n                rows[3].push('')\n                rows[4].push(expectedPills < 0 ? 0 : expectedPills)\n                rows[5].push(order.pillsBrought)\n                rows[6].push('')\n                rows[7].push(unAccountedDoses)\n                rows[8].push(`${adherence}%`)\n                rows[9].push(adherenceStatus)\n\n                cellColors.push({ \n                    index: index+1,\n                    row: 9, \n                    class: adherenceStatus.match(/good/i) ? 'adherence-txt-good' : 'adherence-txt-bad' \n                })\n            })\n            return [\n                { \n                    label: 'Selected Medication', \n                    value:'Table', \n                    other: { columns, rows, rowColors, cellColors }\n                }      \n            ]\n        },\n        formatFrequency(frequency: string) {\n            return `${frequency}`.match(/qod/i) \n                    ? 'QOD'\n                    : `${frequency}`.match(/weekly/i) \n                    ? 'QW'\n                    : frequency\n        },\n        calcPillsExpected(d: any) {\n            return this.adherence.calculateExpected(\n                d.quantity, \n                d.equivalent_daily_dose, \n                d.order.start_date,\n                this.formatFrequency(d.frequency) as 'QOD' | 'QW'\n            )\n        },\n        getAdherenceFields(checkDrugsBefore=false): Array<Field> {\n            return [\n                {\n                    id: 'pills_brought',\n                    helpText: 'Pills remaining (brought to clinic)',\n                    type: FieldType.TT_ADHERENCE_INPUT,\n                    init: async () => {\n                        this.adherence = new AdherenceService(this.patientID, this.providerID)\n                        await this.adherence.loadPreviousDrugs()\n                        return true\n                    },\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    validation: (val: any) => {\n                        if (Validation.required(val)) return ['No drugs available']\n\n                        const empty = val.map((i: Option) => i.value === '')\n                        \n                        return  empty.some(Boolean) ? ['Some values are missing'] : null\n                    },\n                    unload: async (data: any) => {\n                        this.drugObs = []\n                        data.forEach(async(val: Option) => {\n                            const {drug, order } = val.other\n                            const data = { ...val.other, pillsBrought: val.value }\n                            const adherence = this.adherence.calculateAdherence(\n                                data.quantity, data.pillsBrought, this.calcPillsExpected(data)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildAdherenceObs(order.order_id, drug.drug_id, adherence)\n                            )\n                            this.drugObs.push(\n                                this.adherence.buildPillCountObs(order.order_id, val.value)\n                            )\n\n                            if (!this.askReasonForPoorAdherence) {\n                                this.askReasonForPoorAdherence = !this.adherence.isAdherenceGood(data)\n                            }\n                        })\n                    },\n                    options: (fdata: any) => {\n                        if (!isEmpty(fdata.pills_brought)) {\n                            return fdata.pills_brought\n                        }\n                        return this.adherence.getLastDrugs().map((data: any) => ({\n                            label: data.drug.name,\n                            value: '',\n                            other: {\n                                ...data\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: \"adherence_report\",\n                    helpText: \"ART adherence\",\n                    type: FieldType.TT_TABLE_VIEWER,\n                    condition: () => checkDrugsBefore ? this.adherence.receivedDrugsBefore() : true,\n                    options: (d: any) => this.buildAdherenceReport(\n                        d.pills_brought.map((i: Option) => ({ \n                            ...i.other, pillsBrought: i.value\n                        }))\n                    ),\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    }\n                },\n                {\n                    id: \"agree_with_calculation\",\n                    helpText: \"Agree with adherence calculation\",\n                    type: FieldType.TT_SELECT,\n                    condition: () => this.askReasonForPoorAdherence,\n                    validation: (val: Option) => Validation.required(val),\n                    unload: ({ value }: Option) => {\n                        this.calculationAgreementObs = [ this.adherence.buildValueCoded(\n                            'Reason for poor treatment adherence', value\n                        )]\n                    },\n                    options: () => [\n                        { label: 'Yes', value: 'Yes' },\n                        { label: 'No', value: 'No' }\n                    ]\n                }\n            ]\n        }\n    }\n})\n","import script from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./AdherenceMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}