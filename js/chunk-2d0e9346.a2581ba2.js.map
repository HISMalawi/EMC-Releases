{"version":3,"sources":["webpack:///./src/views/PatientRegistration.vue?1cf9","webpack:///./src/views/PatientRegistration.vue","webpack:///./src/views/PatientRegistration.vue?841e"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","_","defineComponent","components","HisStandardForm","IonPage","data","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","patient","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","form","ddeEnabled","watch","handler","query","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","methods","push","this","personIndexField","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","regimentField","dateJoinedMilitaryFields","rankField","relationshipField","possibleDuplicatesField","patientRegistrationSummary","isEditMode","personId","Store","get","patientID","parseInt","getAddresses","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","computedData","create","update","person","PersonField","resolvePerson","nationalIDStatus","appendNationalIDData","attributes","resolvePersonAttributes","registration","PatientRegistrationService","Patientservice","registerPatient","getPersonID","set","updateMWNationalId","malawiNationalID","onRegisterPatient","$router","$route","exit","relationship","nextTask","Object","assign","given_name","family_name","gender","birthdate","setPersonID","updatePerson","attr","invalidate","back","editConditionCheck","includes","confirmPatient","getDocID","getNationalID","match","assignNpid","printNationalID","delayPromise","toastDanger","getID","values","filter","d","isPlainObject","map","personAttributes","mapToOption","listOptions","item","label","value","name","getGivenNameField","condition","defaultValue","getFamilyNameField","IS_ANC_APP","applicationName","IS_CXCA","getGenderField","requireNext","defaultOutput","defaultComputedOutput","beforeNext","newGender","oldGender","infoActionSheet","slot","color","action","dobConfig","getDobConfig","sdate","getSessionDate","childBearingAgeInYrs","maxDate","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","region","getHomeRegionField","district","getHomeDistrictField","homeTA","getHomeTaField","home_region","homeVillage","getHomeVillageField","currentRegion","getCurrentRegionField","getCurrentDistrictField","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","cell_phone_number","facility","getFacilityLocationField","patient_type","landmarks","getLandmarkFields","id","helpText","type","FieldType","TT_SELECT","computedValue","val","validation","Validation","required","options","PatientTypeService","getPatientTypes","init","GLOBAL_PROP","militarySiteEnabled","TT_TEXT","occupation","minDate","HisDate","estimateDateFromAge","WorkflowService","estimation","allowUnknown","computeValue","date","OPD","Registration","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","payload","searchDemographics","patients","itemData","getPersonAttributeOptions","other","search","config","hiddenFooterBtns","footerBtns","onClick","state","disabled","onValue","isEmpty","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","c","checkPotentialDuplicates","length","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","comparisons","home_district","home_traditional_authority","visible","f","possible_duplicates","TT_TABLE_VIEWER","editButton","attribute","columns","rows","home_village","current_district","current_traditional_authority","landmark","emptySets","indexes","class","forEach","r","i","isValueEmpty","rowColors","onload","reassignNpid","printNpid","toastWarning","TT_SUMMARY","buildRegistrationSummary","keys","key","index","replace","m","toUpperCase","x","undefined","nationalIDData","__exports__"],"mappings":"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","file":"js/chunk-2d0e9346.a2581ba2.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n  const _component_ion_page = _resolveComponent(\"ion-page\")\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n        skipSummary: true,\n        activeField: _ctx.fieldComponent,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { IonPage } from \"@ionic/vue\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm, IonPage },\n  data: () => ({\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        fields.push(this.regimentField())\n        fields = fields.concat(this.dateJoinedMilitaryFields())\n        fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        fields.push(this.patientRegistrationSummary())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!this.isEditMode()) {\n            return this.create(form, computedData)\n        } else {\n            return this.update(computedData)\n        }\n    },\n    async create(_: any, computedData: any) {\n        let person: any = PersonField.resolvePerson(computedData)\n        person = this.presets.nationalIDStatus == \"true\" ? this.appendNationalIDData(person) : person\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    appendNationalIDData(person: any){\n       return Object.assign(person,{\n            'given_name': this.presets.given_name,\n            'family_name': this.presets.family_name,\n            'gender': this.presets.gender,\n            'birthdate': this.presets.birthdate,\n            'birthdate_estimated': false\n        })\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender']) && this.presets.nationalIDStatus != \"true\"\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    homeRegionField(): Field {\n        const region: Field = PersonField.getHomeRegionField()\n        region.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return region\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return district\n    },\n    homeTAField(): Field {\n        const homeTA: Field = PersonField.getHomeTaField()\n        homeTA.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeTA\n    },\n    homeVillageField(): Field {\n        const homeVillage: Field = PersonField.getHomeVillageField()\n        homeVillage.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeVillage\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await GLOBAL_PROP.militarySiteEnabled()\n               return true \n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return this.presets.nationalIDStatus == \"true\" ?\n                 `Search results for \"${this.presets.given_name} ${this.presets.family_name} | ${this.presets.gender}\"` : \n                 `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                let payload;\n                if(this.presets.nationalIDStatus == \"true\"){\n                    this.presets.gender = this.presets.gender == \"Male\" ? \"M\" : \"F\"\n                    payload  = {\n                        'given_name': this.presets.given_name,\n                        'family_name': this.presets.family_name,\n                        'gender': this.presets.gender\n                    } \n                }\n                else{\n                    payload = {\n                        'given_name': form.given_name.value,\n                        'family_name': form.family_name.value,\n                        'gender': form.gender.value\n                    }\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Patient',\n                        slot: 'end',\n                        onClick: () => {\n                            this.presets.nationalIDStatus != \"true\"?\n                            this.fieldComponent = 'year_birth_date':\n                            this.fieldComponent = 'home_region'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && !this.editPerson) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')],\n                ]\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    },\n    patientRegistrationSummary(): Field \n    {\n        return{\n          id: \"registration_summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_SUMMARY,\n          condition: () => !this.skipSummary,\n          options: (f: any, c: any) => {  \n                return this.buildRegistrationSummary(c)\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          }\n        }\n    },\n    buildRegistrationSummary(data: any){\n        data = Object.keys(data).map(function(key, index) {\n            if(data[key] != null){\n                return {\n                'label': key.replace(/_/g,' ').replace(/(^\\w|\\s\\w)/g, m => m.toUpperCase()),\n                'value': key == \"birth_date\" ? data[key]['date'] : data[key]['person']\n                } \n            }\n        });\n        data = data.filter((x: any)=>{\n            return x != undefined\n        })\n\n       const nationalIDData = [\n            {\n                'label': \"Given Name\",\n                'value': this.presets.given_name\n            },\n            {\n                'label': \"Family Name\",\n                'value': this.presets.family_name\n            },\n            {\n                'label': \"Gender\",\n                'value': this.presets.gender\n            },\n            {\n                'label': \"Birthdate\",\n                'value': this.presets.birthdate\n            },\n            {\n                'label': \"Malawi National ID\",\n                'value': this.presets.malawiNationalID\n            } \n        ]\n        if(this.presets.nationalIDStatus == \"true\")\n            data = nationalIDData.concat(data)\n\n        return data\n    }\n  }\n})\n","import { render } from \"./PatientRegistration.vue?vue&type=template&id=38dcc39e&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}