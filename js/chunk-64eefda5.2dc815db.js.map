{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.regexp.test.js","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?d527","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?2712"],"names":["$","isObject","DELEGATES_TO_EXEC","execCalled","re","exec","apply","this","arguments","test","nativeTest","target","proto","forced","str","call","result","Error","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","title","period","rows","fields","columns","canExportCsv","canExportPDf","reportReady","onReportConfiguration","onPeriod","defineComponent","mixins","ReportMixin","components","ReportTemplate","data","cohort","reportType","patientLevelColumns","table","thTxt","disaggregatedColumns","created","report","LabReportService","getFormFields","methods","type","tests","getDateIntervalPeriod","value","setDisaggregatedRows","setPatientLevelRows","getDateDurationFields","id","helpText","FieldType","TT_MULTIPLE_SELECT","options","_","x","config","setStartDate","start_date","setEndDate","end_date","getLabResultsReport","availableTests","buildAvailableTests","buildAvailableTestOptions","TT_SELECT","label","results","sortByArvNumber","forEach","measures","measure","name","push","patient_id","arv","arv_number","gender","ageGroup","age_group","birthdate","toDate","ordered","order_date","specimen","modifier","released","result_date","length","other","males","females","concat","map","i","ageGroupIndex","group","AGE_GROUPS","maleRow","td","femaleRow","filterByGender","filter","drill","d","tdARV","tdDate","__exports__"],"mappings":"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","file":"js/chunk-64eefda5.2dc815db.js","sourcesContent":["'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\n\nvar DELEGATES_TO_EXEC = function () {\n  var execCalled = false;\n  var re = /[ac]/;\n  re.exec = function () {\n    execCalled = true;\n    return /./.exec.apply(this, arguments);\n  };\n  return re.test('abc') === true && execCalled;\n}();\n\nvar nativeTest = /./.test;\n\n$({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {\n  test: function (str) {\n    if (typeof this.exec !== 'function') {\n      return nativeTest.call(this, str);\n    }\n    var result = this.exec(str);\n    if (result !== null && !isObject(result)) {\n      throw new Error('RegExp exec method returned something other than an Object or null');\n    }\n    return !!result;\n  }\n});\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: true,\n    canExportPDf: true,\n    reportReady: _ctx.reportReady,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"reportReady\", \"onReportConfiguration\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { LabReportService } from \"@/apps/ART/services/reports/lab_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'Lab test result(s)',\n        rows: [] as Array<any>,\n        cohort: [] as Array<any>,\n        reportType: '' as string,\n        reportReady: false as boolean,\n        columns: [] as Array<any>,\n        patientLevelColumns:[ \n            [\n                table.thTxt('ARV#'), \n                table.thTxt('Gender'), \n                table.thTxt('Birthdate'), \n                table.thTxt('Ordered'), \n                table.thTxt('Specimen'), \n                table.thTxt('Test'), \n                table.thTxt('Result'), \n                table.thTxt('Released')\n            ]\n        ],\n        disaggregatedColumns: [\n            table.thTxt('Age group'), \n            table.thTxt('Gender')\n        ]\n    }),\n    created() {\n        this.report = new LabReportService()\n        this.fields = this.getFormFields()\n    },\n    methods: {\n        async onPeriod({type, tests}: any) {\n            this.reportReady = true\n            this.rows = []\n            this.period = this.report.getDateIntervalPeriod()\n            this.reportType = type.value\n            if (this.reportType === 'disaggregated') {\n                this.setDisaggregatedRows(tests)\n            } else if (this.reportType === 'patient_level') {\n                this.setPatientLevelRows(tests)\n            }\n        },\n        getFormFields(): Array<Field> {\n            return [\n                ...this.getDateDurationFields(),\n                {\n                    id: 'tests',\n                    helpText: 'Available test(s) results',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: async (_: any, x: any, config: any) => {\n                        this.report.setStartDate(config.start_date)\n                        this.report.setEndDate(config.end_date)\n                        const data = await this.report.getLabResultsReport()\n                        const availableTests = this.buildAvailableTests(data)\n                        return this.buildAvailableTestOptions(availableTests)\n                    } \n                },\n                {\n                    id: 'type',\n                    helpText: 'Select report type',\n                    type: FieldType.TT_SELECT,\n                    options: () => [\n                        {\n                            label: 'Disaggregated',\n                            value: 'disaggregated',\n                        },\n                        {\n                            label: 'Patient level',\n                            value: 'patient_level',\n                        }\n                    ]\n                }\n            ]\n        },\n        buildAvailableTests(results: any) {\n            const tests: Record<string, any> = {}\n            this.sortByArvNumber(results).forEach((result: any) => {\n                result.measures.forEach((measure: any) => {\n                    if (!(measure.name in tests)) {\n                        tests[measure.name] = []\n                    }\n                    tests[measure.name].push({\n                        id: result.patient_id,\n                        arv: result.arv_number,\n                        gender: result.gender,\n                        ageGroup: result.age_group,\n                        birthdate: this.toDate(result.birthdate),\n                        ordered: this.toDate(result.order_date),\n                        specimen: result.test,\n                        test:  measure.name,\n                        result: `${measure.modifier} ${measure.value}`,\n                        released: this.toDate(result.result_date)\n                    })\n                })\n            })\n            return tests\n        },\n        buildAvailableTestOptions(availableTests: Record<string, any>) {\n            const options: Array<Option> = []\n            for(const test in availableTests) {\n                const result = availableTests[test]\n                options.push({\n                    label: test,\n                    value: result.length,\n                    other: result\n                })\n            }\n            return options\n        },\n        setDisaggregatedRows(results: Array<Option>) {\n            const males = []\n            const females = []\n            this.columns = [this.disaggregatedColumns.concat(results.map((i: any) => table.thTxt(i.label)))]\n            for(const ageGroupIndex in AGE_GROUPS) {\n                const group = AGE_GROUPS[ageGroupIndex]\n                const maleRow: any = [table.td(group), table.td('M')]\n                const femaleRow: any = [table.td(group), table.td('F')]\n                results.forEach(({other}: Option) => {\n                    const filterByGender = (gender: 'F' | 'M') => {\n                        return other.filter((i: any) => i.gender === gender && i.ageGroup === group)\n                                    .map((i: any) => i.id)\n                    }\n                    maleRow.push(this.drill(filterByGender('M')))\n                    femaleRow.push(this.drill(filterByGender('F')))\n                })\n                males.push(maleRow)\n                females.push(femaleRow)\n                this.rows = [...females, ...males]\n            }\n        },\n        setPatientLevelRows(results: Array<Option>) {\n            this.columns = [this.patientLevelColumns]\n            results.forEach(({other}: Option)  => {\n                other.forEach((d: any) => {\n                    this.rows.push([\n                        this.tdARV(d.arv),\n                        table.td(d.gender),\n                        table.tdDate(d.birthdate),\n                        table.tdDate(d.ordered),\n                        table.td(d.specimen),\n                        table.td(d.test),\n                        table.td(d.result),\n                        table.tdDate(d.released)\n                    ])\n                })\n            })\n        }\n    }\n})\n","import { render } from \"./TestResultsReport.vue?vue&type=template&id=ec8bb4d6&ts=true\"\nimport script from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\nexport * from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}