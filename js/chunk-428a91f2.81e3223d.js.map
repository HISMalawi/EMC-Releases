{"version":3,"sources":["webpack:///./node_modules/vue-loader-v16/dist/templateLoader.js","webpack:///./node_modules/cache-loader/dist/cjs.js","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?cc46","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0c64","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","_component_his_standard_form","_resolveComponent","$event","cancelDestination","HisStandardForm","drugs","selectedDrugs","barcode","stockService","items","prepDrugs","postItems","f","toastSuccess","$router","push","toastDanger","getFields","id","helpText","FieldType","TT_SELECT","validation","val","Validation","options","label","value","condition","transfer_origination","_","filter","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","TT_BARCODE","hiddenFooterBtns","onValue","TT_MULTIPLE_SELECT","requireNext","unload","footerBtns","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","c","currentFieldContext","drugsToStr","map","b","join","drugsWithoutBatches","drug","entries","d","tins","expiry","batchNumber","every","partialBatches","e","score","some","isEmpty","partialDrugs","toastWarning","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","shortName","tabs","HisDate","toStandardHisDisplayFormat","other","formdata","location","transfer_location","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","created","StockService","LocationService","facilities","facility","location_id","getLabFacilities","getLabs","getFacilityWards","tag","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id"],"mappings":"gIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1EC,OAAQV,EAAKU,OACbC,YAAaX,EAAKW,YAClBC,YAAaZ,EAAKY,YAClBC,sBAAuBb,EAAKa,sBAC5BC,WAAYd,EAAKe,SACjBA,SAAUf,EAAKgB,eACfC,UAAWjB,EAAKkB,SACf,KAAM,EAAG,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN3FC,+BAAgB,CAC3BC,KAAM,kBACNC,WAAY,CAAEC,wBACdC,MAAO,CACH,WACA,WAEJC,KAAM,KAAM,CACRf,SAAU,sBAEdgB,MAAO,CACHT,eAAgB,CACZU,KAAMC,UAEVhB,YAAa,CACTe,KAAME,QACNC,SAAS,GAEbjB,YAAa,CACTc,KAAMI,QAEVpB,OAAQ,CACJgB,KAAMK,OACNC,UAAU,GAEdnB,sBAAuB,CACnBa,KAAMI,OACNE,UAAU,IAGlBC,QAAS,CACLlB,SAASmB,EAAeC,GACpBC,KAAKC,MAAM,WAAYH,EAAUC,IAErCjB,QAAQoB,GACJF,KAAKC,MAAM,UAAWC,O,qBCnClC,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxC,KAErD,U,2DCLT,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMmC,EAA+BC,8BAAkB,qBAEvD,OAAQnC,yBAAcC,yBAAaiC,EAA8B,CAC/D9B,OAAQV,EAAKU,OACbE,YAAaZ,EAAKY,YAClBI,eAAgBhB,EAAKe,SACrBJ,aAAa,EACbM,UAAWhB,EAAO,KAAOA,EAAO,GAAK,SAAAyC,GAAM,OAAK1C,EAAKY,YAAY,KACjEC,sBAAuBb,EAAK2C,mBAC3B,KAAM,EAAG,CAAC,SAAU,cAAe,iBAAkB,0B,wLCA3CxB,+BAAgB,CAC7BE,WAAY,CAAEuB,wBACdpB,KAAM,iBAAO,CACXZ,YAAa,GACbF,OAAQ,GACRmC,MAAO,GACPC,cAAe,GACfC,QAAS,GACTC,aAAc,KAGhBf,QAAS,CACDlB,SADC,SACQmB,GAAa,uKACpBe,EAAQ,EAAKC,UAAUhB,GADH,SAEV,EAAKc,aAAaG,UAAUF,GAFlB,OAEpBG,EAFoB,OAGtBA,GACFC,eAAa,2BACb,EAAKC,QAAQC,KAAK,MAElBC,eAAY,wBAPY,8CAU5BC,UAXO,WAWE,WACP,MAAO,CACL,CACEC,GAAI,uBACJC,SAAU,+BACVjC,KAAMkC,OAAUC,UAChBC,WAAY,SAACC,GAAD,OAAiBC,OAAWhC,SAAS+B,IACjDE,QAAS,iBAAM,CACb,CACEC,MAAO,MACPC,MAAO,OAET,CACED,MAAO,iBACPC,MAAO,qBAIb,CACET,GAAI,oBACJC,SAAU,WACVjC,KAAMkC,OAAUC,UAChBC,WAAY,SAACC,GAAD,OAAiBC,OAAWhC,SAAS+B,IACjDK,UAAW,SAACL,GAAD,MAAiD,mBAAnCA,EAAIM,qBAAqBF,OAClDF,QAAS,SAACK,GAAD,IAASC,EAAT,uDAAkB,GAAlB,OAAyBC,eAAcD,IAChDE,cAAe,SAACV,GAAD,OAAiBA,EAAIG,OACpCQ,OAAQ,CACNC,cAAc,EACdC,oBAAoB,IAGxB,CACElB,GAAI,UACJC,SAAU,eACVjC,KAAMkC,OAAUiB,WAEhBH,OAAQ,CACNI,iBAAkB,CAAC,QAAS,SAE9BC,QAAS,WAAF,8CAAE,WAAOrB,GAAP,iFACP,EAAKX,QAAUW,EACf,EAAK9C,YAAc,eAFZ,2CAAF,sDAAE,GAITwD,UAAW,SAACL,GAAD,MAAiD,QAAnCA,EAAIM,qBAAqBF,QAEpD,CACET,GAAI,eACJC,SAAU,eACVjC,KAAMkC,OAAUoB,mBAChBC,aAAa,EACbnB,WAAY,SAACC,GAAD,OAAcC,OAAWhC,SAAS+B,IAC9CE,QAAS,kBAAM,EAAKpB,OACpBqC,OAAQ,SAACnB,GAAD,OAAe,EAAKjB,cAAgBiB,GAC5CW,OAAQ,CACNC,cAAc,EACdQ,WAAY,CACV,CACE/D,KAAM,aACNgE,KAAM,MACNC,QAAS,WACP,EAAKC,UAAU,EAAKzC,YAM9B,CACEa,GAAI,OACJC,SAAU,gBACVjC,KAAMkC,OAAU2B,aAChBzB,WAAY,SAACC,GAAD,OAAiBC,OAAWhC,SAAS+B,KAEnD,CACEL,GAAI,gBACJC,SAAU,cACVjC,KAAMkC,OAAU4B,eAChBvB,QAAS,kBAAM,EAAKnB,eACpB2C,WAAY,SAACnB,EAAQlB,EAAQsC,EAAjB,GAAuD,IAA7BC,EAA6B,EAA7BA,oBAC9BC,EAAa,SAAC/C,GAAD,OAAgBA,EAAMgD,KAAI,SAACC,EAAQxD,GAAT,gBAA0BwD,EAAE5B,UAAS6B,KAAK,QACjFC,EAAsBL,EAAoB9C,MAAM0B,QAAO,SAAC0B,GAAD,OAC3DA,EAAKC,QAAQL,KAAI,SAACM,GAAD,OAAaA,EAAEC,OAASD,EAAEE,SAAWF,EAAEG,eAAaC,MAAM3E,YAEvE4E,EAAiBb,EAAoB9C,MAAM0B,QAAO,SAAC0B,GACvD,OAAOA,EAAKC,QAAQL,KAAI,SAACY,GACvB,IAAIC,EAAQ,EAIZ,OAHID,EAAEL,OAAMM,GAAS,GACjBD,EAAEJ,SAAQK,GAAS,GACnBD,EAAEH,cAAaI,GAAS,GACrBA,GAAS,GAAKA,GAAS,KAC7BC,KAAK/E,YAEV,IAAKgF,qBAAQJ,GAAiB,CAC5B,IAAMK,EAAejB,EAAWY,GAEhC,OADAM,eAAa,+CAAD,OAAgDD,KACrD,EAET,IAAKD,qBAAQZ,GAAsB,CACjC,IAAMe,EAAiBnB,EAAWI,GAElC,OADAc,eAAa,yCAAD,OAA0CC,KAC/C,EAET,OAAO,GAETjD,WAAY,SAACkD,GAAD,OAAehD,OAAWhC,SAASgF,KAEjD,CACEtD,GAAI,mBACJC,SAAU,UACVjC,KAAMkC,OAAUqD,gBAChBhD,QAAS,SAACkC,GAAD,OAAY,EAAKe,aAAaf,EAAEgB,gBACzCzC,OAAQ,CACNI,iBAAkB,CAAC,aAK3BoC,aA/HO,SA+HMf,GACX,IAAMiB,EAAU,CACd,OACA,kBACA,cACA,cACA,gBAEIC,EAAOlB,EAAEN,KAAI,SAACyB,GAClB,IAAMnB,EAAImB,EAAEnD,MACZ,MAAO,CACLgC,EAAEoB,UACFpB,EAAEqB,KACFrB,EAAEC,KACFqB,OAAQC,2BAA2BvB,EAAEE,QACrCF,EAAEG,gBAGN,MAAO,CACL,CACEpC,MAAO,gBACPC,MAAO,QACPwD,MAAO,CAAEP,UAASC,WAIxBnE,UAzJO,SAyJG0E,GACR,IAAM3E,EAAe,GACfF,EAAUX,KAAKW,QACf8E,EAAmD,QAAxCD,EAASvD,qBAAqBF,MAAkB,KAAOyD,EAASE,kBAAkB3D,MAiBnG,OAhBAyD,EAAST,cAAcY,SAAQ,SAACC,GAC9B,IAAMC,EAAUD,EAAG7D,MACnBlB,EAAMM,KAAK,CACT,aAAgB0E,EAAQ3B,YACxB,YAAeuB,EACf5E,MAAO,CACL,CACE,QAAWF,EACX,QAAWkF,EAAQC,OACnB,YAAeD,EAAQ5B,OACvB,SAAY8B,SAASF,EAAQT,MAAQW,SAASF,EAAQ7B,MACtD,cAAiBwB,EAASQ,KAAKjE,aAKhClB,GAETqC,UA/KO,SA+KG+C,GACR,OAAOA,EAASxC,KAAI,SAACyC,GAEnB,OADAA,EAAEC,WAAY,EACPD,MAGXE,YArLO,WAsLL,OAAOpG,KAAKY,aAAayF,WAAW5C,KAAI,SAACI,GACvC,MAAO,CACL/B,MAAO+B,EAAKsB,UACZpD,MAAO8B,QAKfyC,QAzM6B,WA0M3BtG,KAAKY,aAAe,IAAI2F,OACxBvG,KAAK1B,OAAS0B,KAAKqB,YACnBrB,KAAKS,MAAQT,KAAKoG,iB,qBCnNtB,MAAMjG,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASxC,KAErD,gB,8YCHR,SAAeyE,IAAtB,+B,8DAAO,yHAA6BD,EAA7B,+BAAoC,GAApC,SACsBqE,OAAgBpE,cAAc,CAACpD,KAAMmD,IAD3D,cACGsE,EADH,yBAEIA,EAAWtE,QAAO,SAACnB,GAAD,OAAawD,qBAAQxD,MACzCyC,KAAI,SAACiD,GAAD,MAAoB,CACrB5E,MAAO4E,EAAS1H,KAChB+C,MAAO2E,EAASC,YAChBpB,MAAOmB,OANZ,2C,wBAUA,SAAeE,IAAtB,+B,8DAAO,yHAAgCzE,EAAhC,+BAAuC,GAAvC,SACsBqE,OAAgBK,QAAQ,CAAC,YAAe1E,IAD9D,cACGsE,EADH,yBAEIA,EAAWhD,KAAI,SAACiD,GAAD,MAAoB,CAClC5E,MAAO4E,EACP3E,MAAO2E,OAJZ,2C,wBAQA,SAAeI,IAAtB,+B,8DAAO,yHAAgC3E,EAAhC,+BAAuC,GAAvC,SACiBqE,OAAgBpE,cAAc,CAC9CpD,KAAMmD,EACN4E,IAAK,4BAHN,cACGC,EADH,yBAMIA,EAAMvD,KAAI,SAACwD,GAAD,MAAgB,CAC7BnF,MAAOmF,EAAKjI,KACZ+C,MAAOkF,EAAKjI,KACZuG,MAAO0B,OATR,2C,wBAaA,SAAeC,IAAtB,+B,8DAAO,oHACmBV,OAAgBU,uBADnC,cACGC,EADH,yBAEIA,EAAQ1D,KAAI,SAAC2D,GAAD,MAAkB,CACjCtF,MAAOsF,EAAOpI,KACd+C,MAAOqF,EAAOpI,KACduG,MAAO6B,OALR,2C,wBASA,SAAeC,IAAtB,+B,8DAAO,oHACmBb,OAAgBa,aADnC,cACGC,EADH,yBAEIA,EAAQ7D,KAAI,SAAC8D,GAAD,MAAkB,CACjCzF,MAAOyF,EAAOvI,KACd+C,MAAOwF,EAAOC,UACdjC,MAAOgC,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAA4BC,GAA5B,uGACqBlB,OAAgBiB,aAAaC,GADlD,cACGC,EADH,yBAEIA,EAAUlE,KAAI,SAACmE,GAAD,MAAoB,CACrC9F,MAAO8F,EAAS5I,KAChB+C,MAAO6F,EAASC,YAChBtC,MAAOqC,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAAyCC,GAAzC,4GAA6D/I,EAA7D,+BAAkE,GAAlE,SACewH,OAAgBsB,0BAA0BC,EAAY/I,GADrE,cACGgJ,EADH,yBAEIA,EAAIvE,KAAI,SAACwE,GAAD,MAAc,CACzBnG,MAAOmG,EAAGjJ,KACV+C,MAAOkG,EAAGC,yBACV3C,MAAO0C,OALR,2C,wBASA,SAAeE,EAAtB,kC,8DAAO,WAA2BC,GAA3B,4GAA2DpJ,EAA3D,+BAAgE,GAAhE,SACoBwH,OAAgB2B,YAAYC,EAAwBpJ,GADxE,cACGqJ,EADH,yBAEIA,EAAS5E,KAAI,SAAC6E,GAAD,MAAmB,CACnCxG,MAAOwG,EAAQtJ,KACf+C,MAAOuG,EAAQC,WACfhD,MAAO+C,OALR,2C","file":"js/chunk-428a91f2.81e3223d.js","sourcesContent":["import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 8, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.activeField='')),\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"transfer_origination\",\n          helpText: \"Select where stock came from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"DHA\",\n              value: \"DHA\",\n            },\n            {\n              label: \"Other location\",\n              value: \"Other location\",\n            },\n          ],\n        },\n        {\n          id: \"transfer_location\",\n          helpText: \"Location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.transfer_origination.value === \"Other location\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n          condition: (val: any) => val.transfer_origination.value === \"DHA\"\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.drugs,\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            showKeyboard: true,\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: () => {\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                return score >= 1 && score <= 2 \n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"adherence_report\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Batch number\",\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d.tabs,\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      const location = formdata.transfer_origination.value === \"DHA\" ? null : formdata.transfer_location.value;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          'location_id': location,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=0d76ddeb&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f))\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n"],"sourceRoot":""}